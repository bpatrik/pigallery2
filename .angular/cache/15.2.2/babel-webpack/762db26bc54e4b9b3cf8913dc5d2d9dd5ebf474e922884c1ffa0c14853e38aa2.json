{"ast":null,"code":"import _asyncToGenerator from \"E:/work/pigallery2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { JobProgressStates } from '../../../../common/entities/job/JobProgressDTO';\nimport { NetworkService } from '../../model/network/network.service';\nimport { JobDTOUtils } from '../../../../common/entities/job/JobDTO';\nimport { BackendtextService } from '../../model/backendtext.service';\nimport { NotificationService } from '../../model/notification.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../model/network/network.service\";\nimport * as i2 from \"../../model/notification.service\";\nimport * as i3 from \"../../model/backendtext.service\";\nexport let ScheduledJobsService = /*#__PURE__*/(() => {\n  class ScheduledJobsService {\n    constructor(networkService, notification, backendTextService) {\n      this.networkService = networkService;\n      this.notification = notification;\n      this.backendTextService = backendTextService;\n      this.onJobFinish = new EventEmitter();\n      this.timer = null;\n      this.jobStartingStopping = {};\n      this.subscribers = 0;\n      this.progress = new BehaviorSubject({});\n      this.availableJobs = new BehaviorSubject([]);\n    }\n    getAvailableJobs() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.availableJobs.next(yield _this.networkService.getJson('/admin/jobs/available'));\n      })();\n    }\n    getConfigTemplate(JobName) {\n      const job = this.availableJobs.value.find(t => t.Name === JobName);\n      if (job && job.ConfigTemplate && job.ConfigTemplate.length > 0) {\n        return job.ConfigTemplate;\n      }\n      return null;\n    }\n    getDefaultConfig(jobName) {\n      const ct = this.getConfigTemplate(jobName);\n      if (!ct) {\n        return null;\n      }\n      const config = {};\n      ct.forEach(c => config[c.id] = c.defaultValue);\n      return config;\n    }\n    getProgress(schedule) {\n      return this.progress.value[JobDTOUtils.getHashName(schedule.jobName, schedule.config)];\n    }\n    subscribeToProgress() {\n      this.incSubscribers();\n    }\n    unsubscribeFromProgress() {\n      this.decSubscribers();\n    }\n    forceUpdate() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        return yield _this2.loadProgress();\n      })();\n    }\n    start(jobName, config, soloStart = false, allowParallelRun = false) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          _this3.jobStartingStopping[jobName] = true;\n          yield _this3.networkService.postJson('/admin/jobs/scheduled/' + jobName + '/start', {\n            config,\n            allowParallelRun,\n            soloStart\n          });\n          // placeholder to force showing running job\n          _this3.addDummyProgress(jobName, config);\n        } finally {\n          delete _this3.jobStartingStopping[jobName];\n          _this3.forceUpdate();\n        }\n      })();\n    }\n    stop(jobName) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        _this4.jobStartingStopping[jobName] = true;\n        yield _this4.networkService.postJson('/admin/jobs/scheduled/' + jobName + '/stop');\n        delete _this4.jobStartingStopping[jobName];\n        _this4.forceUpdate();\n      })();\n    }\n    loadProgress() {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        const prevPrg = _this5.progress.value;\n        _this5.progress.next(yield _this5.networkService.getJson('/admin/jobs/scheduled/progress'));\n        for (const prg of Object.keys(prevPrg)) {\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !_this5.progress.value.hasOwnProperty(prg) ||\n          // state changed from running to finished\n          (prevPrg[prg].state === JobProgressStates.running || prevPrg[prg].state === JobProgressStates.cancelling) && !(_this5.progress.value[prg].state === JobProgressStates.running || _this5.progress.value[prg].state === JobProgressStates.cancelling)) {\n            _this5.onJobFinish.emit(prg);\n            _this5.notification.success($localize`Job finished` + ': ' + _this5.backendTextService.getJobName(prevPrg[prg].jobName));\n          }\n        }\n      })();\n    }\n    isAnyJobRunning() {\n      return Object.values(this.progress.value).findIndex(p => p.state === JobProgressStates.running || p.state === JobProgressStates.cancelling) !== -1;\n    }\n    getProgressPeriodically() {\n      var _this6 = this;\n      if (this.timer != null || this.subscribers === 0) {\n        return;\n      }\n      let repeatTime = 5000;\n      if (!this.isAnyJobRunning()) {\n        repeatTime = 15000;\n      }\n      this.timer = window.setTimeout( /*#__PURE__*/_asyncToGenerator(function* () {\n        _this6.timer = null;\n        _this6.getProgressPeriodically();\n      }), repeatTime);\n      this.loadProgress().catch(console.error);\n    }\n    addDummyProgress(jobName, config) {\n      const prgs = this.progress.value;\n      prgs[JobDTOUtils.getHashName(jobName, config)] = {\n        jobName,\n        state: JobProgressStates.running,\n        HashName: JobDTOUtils.getHashName(jobName, config),\n        logs: [],\n        steps: {\n          skipped: 0,\n          processed: 0,\n          all: 0\n        },\n        time: {\n          start: Date.now(),\n          end: Date.now()\n        }\n      };\n      this.progress.next(prgs);\n    }\n    incSubscribers() {\n      this.subscribers++;\n      this.getProgressPeriodically();\n    }\n    decSubscribers() {\n      this.subscribers--;\n    }\n  }\n  ScheduledJobsService.ɵfac = function ScheduledJobsService_Factory(t) {\n    return new (t || ScheduledJobsService)(i0.ɵɵinject(i1.NetworkService), i0.ɵɵinject(i2.NotificationService), i0.ɵɵinject(i3.BackendtextService));\n  };\n  ScheduledJobsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ScheduledJobsService,\n    factory: ScheduledJobsService.ɵfac\n  });\n  return ScheduledJobsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}