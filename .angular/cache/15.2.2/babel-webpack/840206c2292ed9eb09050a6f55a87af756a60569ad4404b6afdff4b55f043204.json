{"ast":null,"code":"export class Event {\n  constructor() {\n    this.handlers = [];\n    this.singleHandlers = [];\n  }\n  on(handler) {\n    if (typeof handler !== 'function') {\n      throw new Error('Event::on: Handler is not a function');\n    }\n    this.handlers.push(handler);\n  }\n  once(handler) {\n    if (typeof handler !== 'function') {\n      throw new Error('Event::once: Handler is not a function');\n    }\n    this.singleHandlers.push(handler);\n  }\n  wait() {\n    return new Promise(resolve => {\n      this.once(() => {\n        resolve();\n      });\n    });\n  }\n  off(handler) {\n    this.handlers = this.handlers.filter(h => h !== handler);\n    this.singleHandlers = this.singleHandlers.filter(h => h !== handler);\n  }\n  allOff() {\n    this.handlers = [];\n    this.singleHandlers = [];\n  }\n  trigger(data) {\n    if (this.handlers) {\n      this.handlers.slice(0).forEach(h => h(data));\n    }\n    if (this.singleHandlers) {\n      this.singleHandlers.slice(0).forEach(h => h(data));\n      this.singleHandlers = [];\n    }\n  }\n  hasListener() {\n    return this.handlers.length !== 0 || this.singleHandlers.length !== 0;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}