{"ast":null,"code":"import { Utils } from '../../../../common/Utils';\nimport { Config } from '../../../../common/config/public/Config';\nimport { VersionService } from '../../model/version.service';\nimport { ContentWrapperWithError } from './content.service';\nimport { ThemeModes } from '../../../../common/config/public/ClientConfig';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../model/version.service\";\nexport let GalleryCacheService = /*#__PURE__*/(() => {\n  class GalleryCacheService {\n    constructor(versionService) {\n      this.versionService = versionService;\n      // if it was a forced reload not a navigation, clear cache\n      if (GalleryCacheService.wasAReload()) {\n        GalleryCacheService.deleteCache();\n      }\n      const onNewVersion = ver => {\n        if (ver !== null && localStorage.getItem(GalleryCacheService.VERSION) !== ver) {\n          GalleryCacheService.deleteCache();\n          localStorage.setItem(GalleryCacheService.VERSION, ver);\n        }\n      };\n      this.versionService.version.subscribe(onNewVersion);\n      onNewVersion(this.versionService.version.value);\n    }\n    static wasAReload() {\n      const perfEntries = performance.getEntriesByType('navigation');\n      return perfEntries && perfEntries[0] && perfEntries[0].type === 'reload';\n    }\n    static loadCacheItem(key) {\n      const tmp = localStorage.getItem(key);\n      if (tmp != null) {\n        const value = JSON.parse(tmp);\n        if (value.timestamp < Date.now() - Config.Search.searchCacheTimeout) {\n          localStorage.removeItem(key);\n          return null;\n        }\n        return value.item;\n      }\n      return null;\n    }\n    static deleteCache() {\n      try {\n        const toRemove = [];\n        for (let i = 0; i < localStorage.length; i++) {\n          if (localStorage.key(i).startsWith(GalleryCacheService.CONTENT_PREFIX) || localStorage.key(i).startsWith(GalleryCacheService.SEARCH_PREFIX) || localStorage.key(i).startsWith(GalleryCacheService.INSTANT_SEARCH_PREFIX) || localStorage.key(i).startsWith(GalleryCacheService.AUTO_COMPLETE_PREFIX)) {\n            toRemove.push(localStorage.key(i));\n          }\n        }\n        for (const item of toRemove) {\n          localStorage.removeItem(item);\n        }\n      } catch (e) {\n        // ignoring errors\n      }\n    }\n    getSorting(dir) {\n      const key = GalleryCacheService.SORTING_PREFIX + dir.path + '/' + dir.name;\n      const tmp = localStorage.getItem(key);\n      if (tmp != null) {\n        return parseInt(tmp, 10);\n      }\n      return null;\n    }\n    removeSorting(dir) {\n      try {\n        const key = GalleryCacheService.SORTING_PREFIX + dir.path + '/' + dir.name;\n        localStorage.removeItem(key);\n      } catch (e) {\n        this.reset();\n        console.error(e);\n      }\n    }\n    setSorting(dir, sorting) {\n      try {\n        const key = GalleryCacheService.SORTING_PREFIX + dir.path + '/' + dir.name;\n        localStorage.setItem(key, sorting.toString());\n      } catch (e) {\n        this.reset();\n        console.error(e);\n      }\n      return null;\n    }\n    getAutoComplete(text, type) {\n      if (Config.Gallery.enableCache === false) {\n        return null;\n      }\n      const key = GalleryCacheService.AUTO_COMPLETE_PREFIX + text + (type ? '_' + type : '');\n      const tmp = localStorage.getItem(key);\n      if (tmp != null) {\n        const value = JSON.parse(tmp);\n        if (value.timestamp < Date.now() - Config.Search.AutoComplete.cacheTimeout) {\n          localStorage.removeItem(key);\n          return null;\n        }\n        return value.item;\n      }\n      return null;\n    }\n    setAutoComplete(text, type, items) {\n      if (Config.Gallery.enableCache === false) {\n        return;\n      }\n      const key = GalleryCacheService.AUTO_COMPLETE_PREFIX + text + (type ? '_' + type : '');\n      const tmp = {\n        timestamp: Date.now(),\n        item: items\n      };\n      try {\n        localStorage.setItem(key, JSON.stringify(tmp));\n      } catch (e) {\n        this.reset();\n        console.error(e);\n      }\n    }\n    getSearch(query) {\n      if (Config.Gallery.enableCache === false) {\n        return null;\n      }\n      if (typeof query === 'string') {\n        throw new Error('query expected to by object. Got:' + query);\n      }\n      const key = GalleryCacheService.SEARCH_PREFIX + JSON.stringify(query);\n      return GalleryCacheService.loadCacheItem(key);\n    }\n    setSearch(cw) {\n      if (Config.Gallery.enableCache === false) {\n        return;\n      }\n      const tmp = {\n        timestamp: Date.now(),\n        item: cw\n      };\n      const key = GalleryCacheService.SEARCH_PREFIX + JSON.stringify(cw.searchResult.searchQuery);\n      try {\n        localStorage.setItem(key, JSON.stringify(tmp));\n      } catch (e) {\n        this.reset();\n        console.error(e);\n      }\n    }\n    getDirectory(directoryName) {\n      if (Config.Gallery.enableCache === false) {\n        return null;\n      }\n      try {\n        const value = localStorage.getItem(GalleryCacheService.CONTENT_PREFIX + Utils.concatUrls(directoryName));\n        if (value != null) {\n          return JSON.parse(value);\n        }\n      } catch (e) {\n        // ignoring errors\n      }\n      return new ContentWrapperWithError();\n    }\n    setDirectory(cw) {\n      if (Config.Gallery.enableCache === false) {\n        return;\n      }\n      const key = GalleryCacheService.CONTENT_PREFIX + Utils.concatUrls(cw.directory.path, cw.directory.name);\n      if (cw.directory.isPartial === true && localStorage.getItem(key)) {\n        return;\n      }\n      try {\n        // try to fit it\n        localStorage.setItem(key, JSON.stringify(cw));\n      } catch (e) {\n        this.reset();\n        console.error(e);\n      }\n    }\n    /**\r\n     * Update media state at cache too (Eg.: thumbnail rendered)\r\n     * @param media: MediaBaseDTO\r\n     */\n    mediaUpdated(media) {\n      if (Config.Gallery.enableCache === false) {\n        return;\n      }\n      try {\n        const directoryKey = GalleryCacheService.CONTENT_PREFIX + Utils.concatUrls(media.directory.path, media.directory.name);\n        const value = localStorage.getItem(directoryKey);\n        if (value != null) {\n          const directory = JSON.parse(value);\n          directory?.media?.forEach(p => {\n            if (p.name === media.name) {\n              // update data\n              p.metadata = media.metadata;\n              if (media.missingThumbnails) {\n                p.missingThumbnails = media.missingThumbnails;\n              } else {\n                delete p.missingThumbnails;\n              }\n              // save changes\n              localStorage.setItem(directoryKey, JSON.stringify(directory));\n              return;\n            }\n          });\n        }\n      } catch (e) {\n        this.reset();\n        console.error(e);\n      }\n    }\n    reset() {\n      try {\n        const currentUserStr = localStorage.getItem('currentUser');\n        localStorage.clear();\n        localStorage.setItem('currentUser', currentUserStr);\n        localStorage.setItem(GalleryCacheService.VERSION, this.versionService.version.value);\n      } catch (e) {\n        // ignoring errors\n      }\n    }\n    getSlideshowSpeed() {\n      const key = GalleryCacheService.SLIDESHOW_SPEED;\n      const tmp = localStorage.getItem(key);\n      if (tmp != null) {\n        return parseInt(tmp, 10);\n      }\n      return null;\n    }\n    setSlideshowSpeed(speed) {\n      try {\n        const key = GalleryCacheService.SLIDESHOW_SPEED;\n        localStorage.setItem(key, speed.toString());\n      } catch (e) {\n        this.reset();\n        console.error(e);\n      }\n    }\n    getThemeMode() {\n      const key = GalleryCacheService.THEME_MODE;\n      const tmp = localStorage.getItem(key);\n      if (tmp != null) {\n        return ThemeModes[tmp];\n      }\n      return null;\n    }\n    setThemeMode(mode) {\n      try {\n        const key = GalleryCacheService.THEME_MODE;\n        localStorage.setItem(key, ThemeModes[mode]);\n      } catch (e) {\n        this.reset();\n        console.error(e);\n      }\n    }\n  }\n  GalleryCacheService.CONTENT_PREFIX = 'CONTENT:';\n  GalleryCacheService.AUTO_COMPLETE_PREFIX = 'AUTOCOMPLETE:';\n  GalleryCacheService.INSTANT_SEARCH_PREFIX = 'INSTANT_SEARCH:';\n  GalleryCacheService.SEARCH_PREFIX = 'SEARCH:';\n  GalleryCacheService.SORTING_PREFIX = 'SORTING:';\n  GalleryCacheService.VERSION = 'VERSION';\n  GalleryCacheService.SLIDESHOW_SPEED = 'SLIDESHOW_SPEED';\n  GalleryCacheService.THEME_MODE = 'THEME_MODE';\n  GalleryCacheService.ɵfac = function GalleryCacheService_Factory(t) {\n    return new (t || GalleryCacheService)(i0.ɵɵinject(i1.VersionService));\n  };\n  GalleryCacheService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GalleryCacheService,\n    factory: GalleryCacheService.ɵfac\n  });\n  return GalleryCacheService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}