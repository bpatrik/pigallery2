{"ast":null,"code":"import { SupportedFormats } from '../SupportedFormats';\nexport const MediaDTOUtils = {\n  hasPositionData: media => {\n    return !!media.metadata.positionData && !!(media.metadata.positionData.city || media.metadata.positionData.state || media.metadata.positionData.country || media.metadata.positionData.GPSData && media.metadata.positionData.GPSData.latitude && media.metadata.positionData.GPSData.longitude);\n  },\n  isPhoto: media => {\n    return !MediaDTOUtils.isVideo(media);\n  },\n  isVideo: media => {\n    const lower = media.name.toLowerCase();\n    for (const ext of SupportedFormats.WithDots.Videos) {\n      if (lower.endsWith(ext)) {\n        return true;\n      }\n    }\n    return false;\n  },\n  isVideoPath: path => {\n    const lower = path.toLowerCase();\n    for (const ext of SupportedFormats.WithDots.Videos) {\n      if (lower.endsWith(ext)) {\n        return true;\n      }\n    }\n    return false;\n  },\n  isVideoTranscodingNeeded: media => {\n    const lower = media.name.toLowerCase();\n    for (const ext of SupportedFormats.WithDots.TranscodeNeed.Videos) {\n      if (lower.endsWith(ext)) {\n        return true;\n      }\n    }\n    return false;\n  },\n  calcAspectRatio: photo => {\n    return photo.metadata.size.width / photo.metadata.size.height || 1; // NaN should be treated as square photo\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}