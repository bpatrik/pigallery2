{"ast":null,"code":"import _asyncToGenerator from \"E:/work/pigallery2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { UserRoles } from '../../../../common/entities/UserDTO';\nimport { BehaviorSubject } from 'rxjs';\nimport { UserService } from './user.service';\nimport { Config } from '../../../../common/config/public/Config';\nimport { NetworkService } from './network.service';\nimport { ErrorCodes } from '../../../../common/entities/Error';\nimport { CookieNames } from '../../../../common/CookieNames';\nimport { ShareService } from '../../ui/gallery/share.service';\nimport { CookieService } from 'ngx-cookie-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nimport * as i2 from \"./network.service\";\nimport * as i3 from \"../../ui/gallery/share.service\";\nimport * as i4 from \"ngx-cookie-service\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(userService, networkService, shareService, cookieService) {\n      this.userService = userService;\n      this.networkService = networkService;\n      this.shareService = shareService;\n      this.cookieService = cookieService;\n      this.user = new BehaviorSubject(null);\n      // picking up session..\n      if (this.isAuthenticated() === false && this.cookieService.get(CookieNames.session) != null) {\n        if (typeof ServerInject !== 'undefined' && typeof ServerInject.user !== 'undefined') {\n          this.user.next(ServerInject.user);\n        }\n        this.getSessionUser().catch(console.error);\n      } else {\n        if (Config.Users.authenticationRequired === false) {\n          this.user.next({\n            name: UserRoles[Config.Users.unAuthenticatedUserRole],\n            role: Config.Users.unAuthenticatedUserRole\n          });\n        }\n      }\n      networkService.addGlobalErrorHandler(error => {\n        if (error.code === ErrorCodes.NOT_AUTHENTICATED) {\n          this.user.next(null);\n          return true;\n        }\n        if (error.code === ErrorCodes.NOT_AUTHORISED) {\n          this.logout().catch(console.error);\n          return true;\n        }\n        return false;\n      });\n      // TODO: refactor architecture remove shareService dependency\n      window.setTimeout(() => {\n        this.user.subscribe(u => {\n          this.shareService.onNewUser(u);\n        });\n      }, 0);\n    }\n    login(credential) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const user = yield _this.userService.login(credential);\n        _this.user.next(user);\n        return user;\n      })();\n    }\n    shareLogin(password) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const user = yield _this2.userService.shareLogin(password);\n        _this2.user.next(user);\n        return user;\n      })();\n    }\n    isAuthenticated() {\n      if (Config.Users.authenticationRequired === false) {\n        return true;\n      }\n      return !!this.user.value;\n    }\n    isAuthorized(role) {\n      return this.user.value && this.user.value.role >= role;\n    }\n    canSearch() {\n      return Config.Search.enabled && this.isAuthorized(UserRoles.Guest);\n    }\n    logout() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        yield _this3.userService.logout();\n        _this3.user.next(null);\n      })();\n    }\n    getSessionUser() {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          _this4.user.next(yield _this4.userService.getSessionUser());\n        } catch (error) {\n          console.error(error);\n        }\n      })();\n    }\n  }\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.NetworkService), i0.ɵɵinject(i3.ShareService), i0.ɵɵinject(i4.CookieService));\n  };\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}