{"ast":null,"code":"import _asyncToGenerator from \"E:/work/pigallery2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { NetworkService } from '../../../model/network/network.service';\nimport { Utils } from '../../../../../common/Utils';\nimport { Config } from '../../../../../common/config/public/Config';\nimport { MapProviders } from '../../../../../common/config/public/ClientConfig';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../model/network/network.service\";\nexport let MapService = /*#__PURE__*/(() => {\n  class MapService {\n    constructor(networkService) {\n      this.networkService = networkService;\n      MapService.MAPBOXLAYERS = [{\n        name: $localize`street`,\n        url: 'https://api.mapbox.com/styles/v1/mapbox/streets-v12/tiles/256/{z}/{x}/{y}?access_token=' + Config.Map.mapboxAccessToken,\n        darkLayer: false\n      }, {\n        name: $localize`satellite`,\n        url: 'https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/256/{z}/{x}/{y}?access_token=' + Config.Map.mapboxAccessToken,\n        darkLayer: false\n      }, {\n        name: $localize`hybrid`,\n        url: 'https://api.mapbox.com/styles/v1/mapbox/satellite-streets-v12/tiles/256/{z}/{x}/{y}?access_token=' + Config.Map.mapboxAccessToken,\n        darkLayer: false\n      }, {\n        name: $localize`dark`,\n        url: 'https://api.mapbox.com/styles/v1/mapbox/navigation-night-v1/tiles/256/{z}/{x}/{y}?access_token=' + Config.Map.mapboxAccessToken,\n        darkLayer: true\n      }];\n    }\n    get ShortAttributions() {\n      const OSM = '<a href=\"https://www.openstreetmap.org/copyright\">OSM</a>';\n      const MB = '<a href=\"https://www.mapbox.com/\">Mapbox</a>';\n      if (Config.Map.mapProvider === MapProviders.OpenStreetMap) {\n        return '  &copy; ' + OSM;\n      }\n      if (Config.Map.mapProvider === MapProviders.Mapbox) {\n        return OSM + ' | ' + MB;\n      }\n      return '';\n    }\n    get Attributions() {\n      const OSM = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>';\n      const MB = '&copy; <a href=\"https://www.mapbox.com/\">Mapbox</a>';\n      if (Config.Map.mapProvider === MapProviders.OpenStreetMap) {\n        return OSM;\n      }\n      if (Config.Map.mapProvider === MapProviders.Mapbox) {\n        return OSM + ' | ' + MB;\n      }\n      return '';\n    }\n    get MapLayer() {\n      return this.Layers.find(ml => !ml.darkLayer) || this.Layers[0];\n    }\n    get DarkMapLayer() {\n      return this.Layers.find(ml => ml.darkLayer) || this.MapLayer;\n    }\n    get Layers() {\n      switch (Config.Map.mapProvider) {\n        case MapProviders.Custom:\n          return Config.Map.customLayers;\n        case MapProviders.Mapbox:\n          return MapService.MAPBOXLAYERS;\n        case MapProviders.OpenStreetMap:\n          return MapService.OSMLAYERS;\n      }\n    }\n    getMapCoordinates(file) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const filePath = Utils.concatUrls(file.directory.path, file.directory.name, file.name);\n        const gpx = yield _this.networkService.getXML('/gallery/content/' + filePath + '/bestFit');\n        const getCoordinates = tagName => {\n          const elements = gpx.getElementsByTagName(tagName);\n          const ret = [];\n          // eslint-disable-next-line @typescript-eslint/prefer-for-of\n          for (let i = 0; i < elements.length; i++) {\n            ret.push({\n              lat: parseFloat(elements[i].getAttribute('lat')),\n              lng: parseFloat(elements[i].getAttribute('lon'))\n            });\n          }\n          return ret;\n        };\n        return {\n          name: gpx.getElementsByTagName('name')?.[0]?.textContent || '',\n          path: getCoordinates('trkpt'),\n          markers: getCoordinates('wpt')\n        };\n      })();\n    }\n  }\n  MapService.OSMLAYERS = [{\n    name: 'street',\n    url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n    darkLayer: false\n  }];\n  MapService.MAPBOXLAYERS = [];\n  MapService.ɵfac = function MapService_Factory(t) {\n    return new (t || MapService)(i0.ɵɵinject(i1.NetworkService));\n  };\n  MapService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MapService,\n    factory: MapService.ɵfac\n  });\n  return MapService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}