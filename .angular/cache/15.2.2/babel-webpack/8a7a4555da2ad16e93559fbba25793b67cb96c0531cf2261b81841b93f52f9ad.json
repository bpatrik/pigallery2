{"ast":null,"code":"import _asyncToGenerator from \"E:/work/pigallery2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { NetworkService } from '../../model/network/network.service';\nimport { Router, RoutesRecognized } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport { QueryParams } from '../../../../common/QueryParams';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../model/network/network.service\";\nimport * as i2 from \"@angular/router\";\nexport let ShareService = /*#__PURE__*/(() => {\n  class ShareService {\n    constructor(networkService, router) {\n      var _this = this;\n      this.networkService = networkService;\n      this.router = router;\n      this.UnknownSharingKey = {\n        sharingKey: 'UnknownSharingKey'\n      };\n      this.param = null;\n      this.queryParam = null;\n      this.sharingKey = null;\n      this.inited = false;\n      this.sharingSubject = new BehaviorSubject(null);\n      this.currentSharing = this.sharingSubject.asObservable().pipe(filter(s => s !== null)).pipe(distinctUntilChanged());\n      this.onNewUser = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (user) {\n          if (user && !!user.usedSharingKey) {\n            if (user.usedSharingKey !== _this.sharingKey || _this.sharingSubject.value == null) {\n              _this.sharingKey = user.usedSharingKey;\n              yield _this.getSharing();\n            }\n            if (_this.resolve) {\n              _this.resolve();\n              _this.resolve = null;\n              _this.inited = true;\n            }\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      this.ReadyPR = new Promise(resolve => {\n        if (this.inited === true) {\n          return resolve();\n        }\n        this.resolve = resolve;\n      });\n      this.router.events.subscribe( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (val) {\n          if (val instanceof RoutesRecognized) {\n            _this.param = val.state.root.firstChild.params[QueryParams.gallery.sharingKey_params] || null;\n            _this.queryParam = val.state.root.firstChild.queryParams[QueryParams.gallery.sharingKey_query] || null;\n            const changed = _this.sharingKey !== (_this.param || _this.queryParam);\n            if (changed) {\n              _this.sharingKey = _this.param || _this.queryParam || _this.sharingKey;\n              yield _this.getSharing();\n            }\n            if (_this.resolve) {\n              _this.resolve();\n              _this.resolve = null;\n              _this.inited = true;\n            }\n          }\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n    wait() {\n      if (this.inited) {\n        return Promise.resolve();\n      }\n      return this.ReadyPR;\n    }\n    createSharing(dir, includeSubFolders, valid) {\n      return this.networkService.postJson('/share/' + dir, {\n        createSharing: {\n          includeSubfolders: includeSubFolders,\n          valid\n        }\n      });\n    }\n    updateSharing(dir, sharingId, includeSubFolders, password, valid) {\n      return this.networkService.putJson('/share/' + dir, {\n        updateSharing: {\n          id: sharingId,\n          includeSubfolders: includeSubFolders,\n          valid,\n          password\n        }\n      });\n    }\n    getSharingKey() {\n      return this.sharingKey;\n    }\n    isSharing() {\n      return this.sharingKey != null;\n    }\n    getSharing() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          _this2.sharingSubject.next(null);\n          const sharing = yield _this2.networkService.getJson('/share/' + _this2.getSharingKey());\n          _this2.sharingSubject.next(sharing);\n        } catch (e) {\n          _this2.sharingSubject.next(_this2.UnknownSharingKey);\n          console.error(e);\n        }\n      })();\n    }\n  }\n  ShareService.ɵfac = function ShareService_Factory(t) {\n    return new (t || ShareService)(i0.ɵɵinject(i1.NetworkService), i0.ɵɵinject(i2.Router));\n  };\n  ShareService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShareService,\n    factory: ShareService.ɵfac\n  });\n  return ShareService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}