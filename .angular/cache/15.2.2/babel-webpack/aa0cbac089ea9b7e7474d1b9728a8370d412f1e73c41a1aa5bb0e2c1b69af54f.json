{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@asymmetrik/ngx-leaflet';\nimport { LeafletDirectiveWrapper } from '@asymmetrik/ngx-leaflet';\nimport * as L from 'leaflet';\nimport 'leaflet.markercluster';\nlet LeafletMarkerClusterDirective = /*#__PURE__*/(() => {\n  class LeafletMarkerClusterDirective {\n    constructor(leafletDirective) {\n      // Hexbin data binding\n      this.markerData = [];\n      // Fired when the marker cluster is created\n      this.markerClusterReady = new EventEmitter();\n      this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n    }\n    ngOnInit() {\n      this.leafletDirective.init();\n      const map = this.leafletDirective.getMap();\n      this.markerClusterGroup = L.markerClusterGroup(this.markerClusterOptions);\n      // Add the marker cluster group to the map\n      this.markerClusterGroup.addTo(map);\n      // Set the data now that the markerClusterGroup exists\n      this.setData(this.markerData);\n      // Fire the ready event\n      this.markerClusterReady.emit(this.markerClusterGroup);\n    }\n    ngOnChanges(changes) {\n      // Set the new data\n      if (changes['markerData']) {\n        this.setData(this.markerData);\n      }\n    }\n    setData(layers) {\n      // Ignore until the markerClusterGroup exists\n      if (null != this.markerClusterGroup) {\n        this.markerClusterGroup.clearLayers();\n        this.markerClusterGroup.addLayers(layers);\n      }\n    }\n  }\n  LeafletMarkerClusterDirective.ɵfac = function LeafletMarkerClusterDirective_Factory(t) {\n    return new (t || LeafletMarkerClusterDirective)(i0.ɵɵdirectiveInject(i1.LeafletDirective));\n  };\n  LeafletMarkerClusterDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LeafletMarkerClusterDirective,\n    selectors: [[\"\", \"leafletMarkerCluster\", \"\"]],\n    inputs: {\n      markerData: [\"leafletMarkerCluster\", \"markerData\"],\n      markerClusterOptions: [\"leafletMarkerClusterOptions\", \"markerClusterOptions\"]\n    },\n    outputs: {\n      markerClusterReady: \"leafletMarkerClusterReady\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return LeafletMarkerClusterDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet LeafletMarkerClusterModule = /*#__PURE__*/(() => {\n  class LeafletMarkerClusterModule {}\n  LeafletMarkerClusterModule.ɵfac = function LeafletMarkerClusterModule_Factory(t) {\n    return new (t || LeafletMarkerClusterModule)();\n  };\n  LeafletMarkerClusterModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LeafletMarkerClusterModule\n  });\n  LeafletMarkerClusterModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return LeafletMarkerClusterModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LeafletMarkerClusterDirective, LeafletMarkerClusterModule };\n//# sourceMappingURL=asymmetrik-ngx-leaflet-markercluster.mjs.map\n//# sourceMappingURL=asymmetrik-ngx-leaflet-markercluster.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}