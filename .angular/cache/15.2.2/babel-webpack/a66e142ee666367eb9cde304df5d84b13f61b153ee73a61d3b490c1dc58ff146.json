{"ast":null,"code":"import { Utils } from '../../../../common/Utils';\nimport { MediaIcon } from './MediaIcon';\nimport { Config } from '../../../../common/config/public/Config';\nimport { MediaDTOUtils } from '../../../../common/entities/MediaDTO';\nexport class Media extends MediaIcon {\n  constructor(media, renderWidth, renderHeight) {\n    super(media);\n    this.renderWidth = renderWidth;\n    this.renderHeight = renderHeight;\n  }\n  thumbnailLoaded() {\n    if (!this.isThumbnailAvailable()) {\n      this.media.missingThumbnails = this.media.missingThumbnails || 0;\n      this.media.missingThumbnails -= MediaIcon.ThumbnailMap[this.getThumbnailSize()];\n      if (this.media.missingThumbnails < 0) {\n        throw new Error('missingThumbnails got below 0');\n      }\n    }\n  }\n  getThumbnailSize() {\n    const longerEdge = Math.max(this.renderWidth, this.renderHeight);\n    return Utils.findClosestinSorted(longerEdge, Media.sortedThumbnailSizes);\n  }\n  getReplacementThumbnailSize() {\n    if (this.replacementSizeCache === false) {\n      this.replacementSizeCache = null;\n      const size = this.getThumbnailSize();\n      if (this.media.missingThumbnails) {\n        for (const thSize of Config.Media.Thumbnail.thumbnailSizes) {\n          // eslint-disable-next-line no-bitwise\n          if ((this.media.missingThumbnails & MediaIcon.ThumbnailMap[thSize]) === 0 && thSize < size) {\n            this.replacementSizeCache = thSize;\n            break;\n          }\n        }\n      }\n    }\n    return this.replacementSizeCache;\n  }\n  isReplacementThumbnailAvailable() {\n    return this.getReplacementThumbnailSize() !== null;\n  }\n  isThumbnailAvailable() {\n    // eslint-disable-next-line no-bitwise\n    return (this.media.missingThumbnails & MediaIcon.ThumbnailMap[this.getThumbnailSize()]) === 0;\n  }\n  getReplacementThumbnailPath() {\n    const size = this.getReplacementThumbnailSize();\n    return Utils.concatUrls(Config.Server.urlBase, Config.Server.apiPath, '/gallery/content/', this.getRelativePath(), 'thumbnail', size.toString());\n  }\n  hasPositionData() {\n    return MediaDTOUtils.hasPositionData(this.media);\n  }\n  getThumbnailPath() {\n    const size = this.getThumbnailSize();\n    return Utils.concatUrls(Config.Server.urlBase, Config.Server.apiPath, '/gallery/content/', this.getRelativePath(), 'thumbnail', size.toString());\n  }\n}\nMedia.sortedThumbnailSizes = Config.Media.Thumbnail.thumbnailSizes.sort((a, b) => a - b);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}