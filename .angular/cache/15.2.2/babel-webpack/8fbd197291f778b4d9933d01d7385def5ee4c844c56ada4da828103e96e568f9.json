{"ast":null,"code":"export class GridRowBuilder {\n  constructor(photos, startIndex, photoMargin, containerWidth) {\n    this.photos = photos;\n    this.startIndex = startIndex;\n    this.photoMargin = photoMargin;\n    this.containerWidth = containerWidth;\n    this.photoRow = [];\n    this.photoIndex = 0; // index of the last pushed media to the photoRow\n    this.photoIndex = startIndex;\n    if (this.containerWidth <= 0) {\n      throw new Error('container width cant be <=0, got:' + this.containerWidth);\n    }\n  }\n  addPhotos(num) {\n    for (let i = 0; i < num; i++) {\n      this.addPhoto();\n    }\n  }\n  removePhoto() {\n    if (this.photoIndex - 1 < this.startIndex) {\n      return false;\n    }\n    this.photoIndex--;\n    this.photoRow.pop();\n    return true;\n  }\n  getPhotoRow() {\n    return this.photoRow;\n  }\n  adjustRowHeightBetween(minHeight, maxHeight) {\n    while (this.calcRowHeight() > maxHeight && this.addPhoto() === true) {\n      // row too high -> add more images\n    }\n    while (this.calcRowHeight() < minHeight && this.removePhoto() === true) {\n      // roo too small -> remove images\n    }\n    // keep at least one media int thr row\n    if (this.photoRow.length <= 0) {\n      this.addPhoto();\n    }\n  }\n  calcRowHeight() {\n    let width = 0;\n    for (const item of this.photoRow) {\n      const size = item.metadata.size;\n      width += size.width / size.height || 1; // summing up aspect ratios, NaN should be treated as square photo\n    }\n\n    const height = (this.containerWidth - this.photoRow.length * (this.photoMargin * 2) - 1) / width; // cant be equal -> width-1\n    return height + this.photoMargin * 2;\n  }\n  addPhoto() {\n    if (this.photoIndex + 1 > this.photos.length) {\n      return false;\n    }\n    this.photoRow.push(this.photos[this.photoIndex]);\n    this.photoIndex++;\n    return true;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}