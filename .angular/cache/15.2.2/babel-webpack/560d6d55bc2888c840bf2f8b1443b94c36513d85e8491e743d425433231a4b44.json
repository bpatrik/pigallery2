{"ast":null,"code":"import { ChangeDetectorRef, ElementRef, QueryList } from '@angular/core';\nimport { DimensionUtils } from '../../../model/IRenderable';\nimport { FullScreenService } from '../fullscreen.service';\nimport { OverlayService } from '../overlay.service';\nimport { animate, AnimationBuilder, style } from '@angular/animations';\nimport { GalleryLightboxMediaComponent } from './media/media.lightbox.gallery.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PageHelper } from '../../../model/page.helper';\nimport { QueryService } from '../../../model/query.service';\nimport { QueryParams } from '../../../../../common/QueryParams';\nimport { ContentService } from '../content.service';\nimport { ControlsLightboxComponent } from './controls/controls.lightbox.gallery.component';\nimport { SupportedFormats } from '../../../../../common/SupportedFormats';\nimport { PiTitleService } from '../../../model/pi-title.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../fullscreen.service\";\nimport * as i2 from \"../overlay.service\";\nimport * as i3 from \"@angular/animations\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"../../../model/query.service\";\nimport * as i6 from \"../content.service\";\nimport * as i7 from \"../../../model/pi-title.service\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"./media/media.lightbox.gallery.component\";\nimport * as i10 from \"./infopanel/info-panel.lightbox.gallery.component\";\nimport * as i11 from \"./controls/controls.lightbox.gallery.component\";\nconst _c0 = [\"photo\"];\nconst _c1 = [\"controls\"];\nconst _c2 = [\"lightbox\"];\nconst _c3 = [\"root\"];\nfunction GalleryLightboxComponent_div_7_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵi18n(1, 18);\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction GalleryLightboxComponent_div_7_ng_container_8_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \",\\u00A0\");\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction GalleryLightboxComponent_div_7_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, GalleryLightboxComponent_div_7_ng_container_8_ng_container_2_Template, 2, 0, \"ng-container\", 16);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ext_r8 = ctx.$implicit;\n    const last_r9 = ctx.last;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"*.\", ext_r8, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !last_r9);\n  }\n}\nfunction GalleryLightboxComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"div\", 11)(2, \"div\", 12);\n    i0.ɵɵelement(3, \"span\", 13);\n    i0.ɵɵelementStart(4, \"span\", 14);\n    i0.ɵɵi18n(5, 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"br\");\n    i0.ɵɵtemplate(7, GalleryLightboxComponent_div_7_ng_container_7_Template, 2, 0, \"ng-container\", 16);\n    i0.ɵɵtemplate(8, GalleryLightboxComponent_div_7_ng_container_8_Template, 3, 2, \"ng-container\", 17);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.activePhoto.gridMedia.isVideoTranscodingNeeded());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.transcodeNeedVideos);\n  }\n}\nfunction GalleryLightboxComponent_app_lightbox_controls_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-lightbox-controls\", 19, 20);\n    i0.ɵɵlistener(\"closed\", function GalleryLightboxComponent_app_lightbox_controls_8_Template_app_lightbox_controls_closed_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.hide());\n    })(\"nextPhoto\", function GalleryLightboxComponent_app_lightbox_controls_8_Template_app_lightbox_controls_nextPhoto_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.nextImage());\n    })(\"previousPhoto\", function GalleryLightboxComponent_app_lightbox_controls_8_Template_app_lightbox_controls_previousPhoto_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.prevImage());\n    })(\"toggleInfoPanel\", function GalleryLightboxComponent_app_lightbox_controls_8_Template_app_lightbox_controls_toggleInfoPanel_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.toggleInfoPanel());\n    })(\"toggleFullScreen\", function GalleryLightboxComponent_app_lightbox_controls_8_Template_app_lightbox_controls_toggleFullScreen_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.toggleFullscreen());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"activePhoto\", ctx_r4.activePhoto)(\"navigation\", ctx_r4.navigation)(\"photoFrameDim\", ctx_r4.photoFrameDim)(\"mediaElement\", ctx_r4.mediaElement);\n  }\n}\nfunction GalleryLightboxComponent_app_info_panel_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-info-panel\", 21);\n    i0.ɵɵlistener(\"closed\", function GalleryLightboxComponent_app_info_panel_9_Template_app_info_panel_closed_0_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.hideInfoPanel());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"width\", ctx_r5.infoPanelWidth, \"px\");\n    i0.ɵɵproperty(\"media\", ctx_r5.activePhoto.gridMedia.media);\n  }\n}\nconst _c8 = function () {\n  return {\n    x: 0,\n    y: 0\n  };\n};\nexport var LightboxStates = /*#__PURE__*/(() => {\n  (function (LightboxStates) {\n    LightboxStates[LightboxStates[\"Open\"] = 1] = \"Open\";\n    LightboxStates[LightboxStates[\"Closing\"] = 2] = \"Closing\";\n    LightboxStates[LightboxStates[\"Closed\"] = 3] = \"Closed\";\n  })(LightboxStates || (LightboxStates = {}));\n  return LightboxStates;\n})();\nexport let GalleryLightboxComponent = /*#__PURE__*/(() => {\n  class GalleryLightboxComponent {\n    constructor(fullScreenService, changeDetector, overlayService, builder, router, queryService, galleryService, route, piTitleService) {\n      this.fullScreenService = fullScreenService;\n      this.changeDetector = changeDetector;\n      this.overlayService = overlayService;\n      this.builder = builder;\n      this.router = router;\n      this.queryService = queryService;\n      this.galleryService = galleryService;\n      this.route = route;\n      this.piTitleService = piTitleService;\n      this.navigation = {\n        hasPrev: true,\n        hasNext: true\n      };\n      this.blackCanvasOpacity = 0;\n      this.status = LightboxStates.Closed;\n      this.infoPanelVisible = false;\n      this.infoPanelWidth = 0;\n      this.animating = false;\n      this.photoFrameDim = {\n        width: 1,\n        height: 1,\n        aspect: 1\n      };\n      this.videoSourceError = false;\n      this.transcodeNeedVideos = SupportedFormats.TranscodeNeed.Videos;\n      this.startPhotoDimension = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0\n      };\n      this.iPvisibilityTimer = null;\n      this.visibilityTimer = null;\n      this.delayedMediaShow = null;\n      this.activePhotoId = null;\n      this.subscription = {\n        photosChange: null,\n        route: null\n      };\n      this.updatePhotoFrameDim = () => {\n        this.photoFrameDim = {\n          width: Math.max(window.innerWidth - this.infoPanelWidth, 0),\n          height: window.innerHeight,\n          aspect: 0\n        };\n        this.photoFrameDim.aspect = Math.round(this.photoFrameDim.width / this.photoFrameDim.height * 100) / 100;\n      };\n    }\n    get Title() {\n      if (!this.activePhoto) {\n        return null;\n      }\n      return this.activePhoto.gridMedia.media.metadata.caption;\n    }\n    toggleFullscreen() {\n      if (this.fullScreenService.isFullScreenEnabled()) {\n        this.fullScreenService.exitFullScreen();\n      } else {\n        this.fullScreenService.showFullScreen(this.root.nativeElement);\n      }\n    }\n    ngOnInit() {\n      this.updatePhotoFrameDim();\n      this.subscription.route = this.route.queryParams.subscribe(params => {\n        if (params[QueryParams.gallery.photo] && params[QueryParams.gallery.photo] !== '') {\n          if (!this.gridPhotoQL) {\n            return this.delayedMediaShow = params[QueryParams.gallery.photo];\n          }\n          this.onNavigateTo(params[QueryParams.gallery.photo]);\n        } else if (this.status === LightboxStates.Open) {\n          this.delayedMediaShow = null;\n          this.hideLightbox();\n        }\n      });\n    }\n    ngOnDestroy() {\n      if (this.controls) {\n        this.controls.pause();\n      }\n      if (this.subscription.photosChange != null) {\n        this.subscription.photosChange.unsubscribe();\n      }\n      if (this.subscription.route != null) {\n        this.subscription.route.unsubscribe();\n      }\n      if (this.visibilityTimer != null) {\n        clearTimeout(this.visibilityTimer);\n      }\n      if (this.iPvisibilityTimer != null) {\n        clearTimeout(this.iPvisibilityTimer);\n      }\n    }\n    onNavigateTo(photoStringId) {\n      if (this.activePhoto && this.queryService.getMediaStringId(this.activePhoto.gridMedia.media) === photoStringId) {\n        return;\n      }\n      if (this.controls) {\n        this.controls.resetZoom();\n      }\n      const photo = this.gridPhotoQL.find(i => this.queryService.getMediaStringId(i.gridMedia.media) === photoStringId);\n      if (!photo) {\n        return this.delayedMediaShow = photoStringId;\n      }\n      if (this.status === LightboxStates.Closed) {\n        this.showLigthbox(photo.gridMedia.media);\n      } else {\n        this.showPhoto(this.gridPhotoQL.toArray().indexOf(photo));\n      }\n      this.delayedMediaShow = null;\n    }\n    setGridPhotoQL(value) {\n      if (this.subscription.photosChange != null) {\n        this.subscription.photosChange.unsubscribe();\n      }\n      this.gridPhotoQL = value;\n      this.subscription.photosChange = this.gridPhotoQL.changes.subscribe(() => {\n        if (this.activePhotoId != null && this.gridPhotoQL.length > this.activePhotoId) {\n          this.updateActivePhoto(this.activePhotoId);\n        }\n        if (this.delayedMediaShow) {\n          this.onNavigateTo(this.delayedMediaShow);\n        }\n      });\n      if (this.delayedMediaShow) {\n        this.onNavigateTo(this.delayedMediaShow);\n      }\n    }\n    onResize() {\n      this.updatePhotoFrameDim();\n      if (this.activePhoto) {\n        this.animateLightbox();\n        this.updateActivePhoto(this.activePhotoId);\n      }\n    }\n    nextImage() {\n      if (this.activePhotoId + 1 < this.gridPhotoQL.length) {\n        this.navigateToPhoto(this.activePhotoId + 1);\n      } else {\n        this.navigateToPhoto(0);\n      }\n    }\n    prevImage() {\n      if (this.controls) {\n        this.controls.pause();\n      }\n      if (this.activePhotoId > 0) {\n        this.navigateToPhoto(this.activePhotoId - 1);\n      }\n    }\n    showLigthbox(photo) {\n      if (this.controls) {\n        this.controls.resetZoom();\n      }\n      this.status = LightboxStates.Open;\n      const selectedPhoto = this.findPhotoComponent(photo);\n      if (selectedPhoto === null) {\n        throw new Error('Can\\'t find Photo');\n      }\n      const lightboxDimension = selectedPhoto.getDimension();\n      lightboxDimension.top -= PageHelper.ScrollY;\n      this.animating = true;\n      this.animatePhoto(selectedPhoto.getDimension(), this.calcLightBoxPhotoDimension(selectedPhoto.gridMedia.media)).onDone(() => {\n        this.animating = false;\n      });\n      this.animateLightbox(lightboxDimension, {\n        top: 0,\n        left: 0,\n        width: this.photoFrameDim.width,\n        height: this.photoFrameDim.height\n      });\n      this.blackCanvasOpacity = 0;\n      this.startPhotoDimension = selectedPhoto.getDimension();\n      // disable scroll\n      this.overlayService.showOverlay();\n      this.blackCanvasOpacity = 1.0;\n      this.showPhoto(this.gridPhotoQL.toArray().indexOf(selectedPhoto), false);\n      this.piTitleService.setMediaTitle(selectedPhoto.gridMedia);\n    }\n    hide() {\n      this.router.navigate([], {\n        queryParams: this.queryService.getParams()\n      }).then(() => {\n        this.piTitleService.setLastNonMedia();\n      }).catch(console.error);\n    }\n    animatePhoto(from, to = from) {\n      const elem = this.builder.build([style(DimensionUtils.toString(from)), animate(300, style(DimensionUtils.toString(to)))]).create(this.mediaElement.elementRef.nativeElement);\n      elem.play();\n      return elem;\n    }\n    animateLightbox(from = {\n      top: 0,\n      left: 0,\n      width: this.photoFrameDim.width,\n      height: this.photoFrameDim.height\n    }, to = from) {\n      const elem = this.builder.build([style(DimensionUtils.toString(from)), animate(300, style(DimensionUtils.toString(to)))]).create(this.lightboxElement.nativeElement);\n      elem.play();\n      return elem;\n    }\n    toggleInfoPanel() {\n      if (this.infoPanelWidth !== 400) {\n        this.showInfoPanel();\n      } else {\n        this.hideInfoPanel();\n      }\n    }\n    hideInfoPanel(enableAnimate = true) {\n      this.iPvisibilityTimer = window.setTimeout(() => {\n        this.iPvisibilityTimer = null;\n        this.infoPanelVisible = false;\n      }, 1000);\n      const starPhotoPos = this.calcLightBoxPhotoDimension(this.activePhoto.gridMedia.media);\n      this.infoPanelWidth = 0;\n      this.updatePhotoFrameDim();\n      const endPhotoPos = this.calcLightBoxPhotoDimension(this.activePhoto.gridMedia.media);\n      if (enableAnimate) {\n        this.animatePhoto(starPhotoPos, endPhotoPos);\n      }\n      if (enableAnimate) {\n        this.animateLightbox({\n          top: 0,\n          left: 0,\n          width: Math.max(this.photoFrameDim.width - 400, 0),\n          height: this.photoFrameDim.height\n        }, {\n          top: 0,\n          left: 0,\n          width: this.photoFrameDim.width,\n          height: this.photoFrameDim.height\n        });\n      }\n    }\n    isInfoPanelAnimating() {\n      return this.iPvisibilityTimer != null;\n    }\n    showInfoPanel() {\n      this.infoPanelVisible = true;\n      const starPhotoPos = this.calcLightBoxPhotoDimension(this.activePhoto.gridMedia.media);\n      this.infoPanelWidth = 400;\n      this.updatePhotoFrameDim();\n      const endPhotoPos = this.calcLightBoxPhotoDimension(this.activePhoto.gridMedia.media);\n      this.animatePhoto(starPhotoPos, endPhotoPos);\n      this.animateLightbox({\n        top: 0,\n        left: 0,\n        width: this.photoFrameDim.width + 400,\n        height: this.photoFrameDim.height\n      }, {\n        top: 0,\n        left: 0,\n        width: this.photoFrameDim.width,\n        height: this.photoFrameDim.height\n      });\n      if (this.iPvisibilityTimer != null) {\n        clearTimeout(this.iPvisibilityTimer);\n      }\n      if (this.controls) {\n        this.controls.resetZoom();\n      }\n    }\n    isVisible() {\n      return this.status !== LightboxStates.Closed;\n    }\n    isOpen() {\n      return this.status === LightboxStates.Open;\n    }\n    onVideoSourceError() {\n      this.videoSourceError = true;\n    }\n    navigateToPhoto(photoIndex) {\n      this.router.navigate([], {\n        queryParams: this.queryService.getParams(this.gridPhotoQL.get(photoIndex).gridMedia.media),\n        replaceUrl: true\n      }).then(() => {\n        this.piTitleService.setMediaTitle(this.gridPhotoQL.get(photoIndex).gridMedia);\n      }).catch(console.error);\n    }\n    showPhoto(photoIndex, resize = true) {\n      this.activePhoto = null;\n      this.changeDetector.detectChanges();\n      this.updateActivePhoto(photoIndex, resize);\n    }\n    hideLightbox() {\n      if (this.controls) {\n        this.controls.resetZoom();\n      }\n      this.status = LightboxStates.Closing;\n      this.fullScreenService.exitFullScreen();\n      if (this.controls) {\n        this.controls.pause();\n      }\n      this.animating = true;\n      const lightboxDimension = this.activePhoto.getDimension();\n      lightboxDimension.top -= PageHelper.ScrollY;\n      this.blackCanvasOpacity = 0;\n      this.animatePhoto(this.calcLightBoxPhotoDimension(this.activePhoto.gridMedia.media), this.activePhoto.getDimension());\n      this.animateLightbox({\n        top: 0,\n        left: 0,\n        width: this.photoFrameDim.width,\n        height: this.photoFrameDim.height\n      }, lightboxDimension).onDone(() => {\n        this.status = LightboxStates.Closed;\n        this.activePhoto = null;\n        this.activePhotoId = null;\n        this.overlayService.hideOverlay();\n      });\n      this.hideInfoPanel(false);\n    }\n    updateActivePhoto(photoIndex, resize = true) {\n      if (photoIndex < 0 || photoIndex >= this.gridPhotoQL.length) {\n        throw new Error('Can\\'t find the media');\n      }\n      this.videoSourceError = false;\n      this.activePhotoId = photoIndex;\n      this.activePhoto = this.gridPhotoQL.get(photoIndex);\n      if (resize) {\n        this.animatePhoto(this.calcLightBoxPhotoDimension(this.activePhoto.gridMedia.media));\n      }\n      this.navigation.hasPrev = photoIndex > 0;\n      this.navigation.hasNext = photoIndex + 1 < this.gridPhotoQL.length;\n      const to = this.activePhoto.getDimension();\n      // if target image out of screen -> scroll to there\n      if (PageHelper.ScrollY > to.top || PageHelper.ScrollY + this.photoFrameDim.height < to.top) {\n        PageHelper.ScrollY = to.top;\n      }\n    }\n    findPhotoComponent(media) {\n      const galleryPhotoComponents = this.gridPhotoQL.toArray();\n      for (const item of galleryPhotoComponents) {\n        if (item.gridMedia.media === media) {\n          return item;\n        }\n      }\n      return null;\n    }\n    calcLightBoxPhotoDimension(photo) {\n      let width;\n      let height;\n      const photoAspect = photo.metadata.size.width / photo.metadata.size.height;\n      const windowAspect = this.photoFrameDim.aspect;\n      if (photoAspect < windowAspect) {\n        width = Math.round(photo.metadata.size.width * (this.photoFrameDim.height / photo.metadata.size.height));\n        height = this.photoFrameDim.height;\n      } else {\n        width = this.photoFrameDim.width;\n        height = Math.round(photo.metadata.size.height * (this.photoFrameDim.width / photo.metadata.size.width));\n      }\n      const top = this.photoFrameDim.height / 2 - height / 2;\n      const left = this.photoFrameDim.width / 2 - width / 2;\n      return {\n        top,\n        left,\n        width,\n        height\n      };\n    }\n    get NexGridMedia() {\n      if (this.activePhotoId + 1 < this.gridPhotoQL?.length) {\n        return this.gridPhotoQL.get(this.activePhotoId + 1)?.gridMedia;\n      }\n      return null;\n    }\n  }\n  GalleryLightboxComponent.ɵfac = function GalleryLightboxComponent_Factory(t) {\n    return new (t || GalleryLightboxComponent)(i0.ɵɵdirectiveInject(i1.FullScreenService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.OverlayService), i0.ɵɵdirectiveInject(i3.AnimationBuilder), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.QueryService), i0.ɵɵdirectiveInject(i6.ContentService), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i7.PiTitleService));\n  };\n  GalleryLightboxComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GalleryLightboxComponent,\n    selectors: [[\"app-gallery-lightbox\"]],\n    viewQuery: function GalleryLightboxComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mediaElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.controls = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lightboxElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.root = _t.first);\n      }\n    },\n    hostBindings: function GalleryLightboxComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"resize\", function GalleryLightboxComponent_resize_HostBindingHandler($event) {\n          return ctx.onResize($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    decls: 10,\n    vars: 13,\n    consts: function () {\n      let i18n_4;\n      if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n        /**\r\n         * @suppress {msgDescriptions}\r\n         */\n        const MSG_EXTERNAL_5294987439623514854$$SRC_FRONTEND_APP_UI_GALLERY_LIGHTBOX_LIGHTBOX_GALLERY_COMPONENT_TS__5 = goog.getMsg(\"Error during loading the video.\");\n        i18n_4 = MSG_EXTERNAL_5294987439623514854$$SRC_FRONTEND_APP_UI_GALLERY_LIGHTBOX_LIGHTBOX_GALLERY_COMPONENT_TS__5;\n      } else {\n        i18n_4 = $localize`Error during loading the video.`;\n      }\n      let i18n_6;\n      if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n        /**\r\n         * @suppress {msgDescriptions}\r\n         */\n        const MSG_EXTERNAL_8773811217165354912$$SRC_FRONTEND_APP_UI_GALLERY_LIGHTBOX_LIGHTBOX_GALLERY_COMPONENT_TS___7 = goog.getMsg(\" Most likely the video is not transcoded. It can be done in the settings. You need to transcode these videos to watch them online: \");\n        i18n_6 = MSG_EXTERNAL_8773811217165354912$$SRC_FRONTEND_APP_UI_GALLERY_LIGHTBOX_LIGHTBOX_GALLERY_COMPONENT_TS___7;\n      } else {\n        i18n_6 = $localize` Most likely the video is not transcoded. It can be done in the settings. You need to transcode these videos to watch them online: `;\n      }\n      return [[3, \"hidden\"], [\"root\", \"\"], [1, \"blackCanvas\"], [1, \"lightbox\"], [\"lightbox\", \"\"], [3, \"gridMedia\", \"nextGridMedia\", \"loadMedia\", \"zoom\", \"drag\", \"windowAspect\", \"videoSourceError\"], [\"photo\", \"\"], [\"class\", \"container h-100 flex-column\", 4, \"ngIf\"], [3, \"activePhoto\", \"navigation\", \"photoFrameDim\", \"mediaElement\", \"closed\", \"nextPhoto\", \"previousPhoto\", \"toggleInfoPanel\", \"toggleFullScreen\", 4, \"ngIf\"], [\"id\", \"info-panel\", 3, \"width\", \"media\", \"closed\", 4, \"ngIf\"], [1, \"container\", \"h-100\", \"flex-column\"], [1, \"row\", \"justify-content-center\", \"align-items-center\", \"h-100\"], [1, \"col-md-8\", \"text-white\", \"text-center\"], [1, \"oi\", \"oi-warning\", \"h2\", \"me-2\"], [1, \"h2\"], i18n_4, [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], i18n_6, [3, \"activePhoto\", \"navigation\", \"photoFrameDim\", \"mediaElement\", \"closed\", \"nextPhoto\", \"previousPhoto\", \"toggleInfoPanel\", \"toggleFullScreen\"], [\"controls\", \"\"], [\"id\", \"info-panel\", 3, \"media\", \"closed\"]];\n    },\n    template: function GalleryLightboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵelement(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3, 4)(5, \"app-gallery-lightbox-media\", 5, 6);\n        i0.ɵɵlistener(\"videoSourceError\", function GalleryLightboxComponent_Template_app_gallery_lightbox_media_videoSourceError_5_listener() {\n          return ctx.onVideoSourceError();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(7, GalleryLightboxComponent_div_7_Template, 9, 2, \"div\", 7);\n        i0.ɵɵtemplate(8, GalleryLightboxComponent_app_lightbox_controls_8_Template, 2, 4, \"app-lightbox-controls\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, GalleryLightboxComponent_app_info_panel_9_Template, 1, 3, \"app-info-panel\", 9);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"hidden\", !ctx.isVisible());\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleProp(\"opacity\", ctx.blackCanvasOpacity);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"gridMedia\", ctx.activePhoto ? ctx.activePhoto.gridMedia : null)(\"nextGridMedia\", ctx.NexGridMedia)(\"loadMedia\", !ctx.animating)(\"zoom\", ctx.controls ? ctx.controls.Zoom : 1)(\"drag\", ctx.controls ? ctx.controls.drag : i0.ɵɵpureFunction0(12, _c8))(\"windowAspect\", ctx.photoFrameDim.aspect);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.videoSourceError && ctx.activePhoto);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isOpen());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.activePhoto && ctx.infoPanelVisible);\n      }\n    },\n    dependencies: [i8.NgForOf, i8.NgIf, i9.GalleryLightboxMediaComponent, i10.InfoPanelLightboxComponent, i11.ControlsLightboxComponent],\n    styles: [\".lightbox[_ngcontent-%COMP%]{position:fixed;z-index:1100;left:0;top:0;width:100%;height:100%;overflow:hidden;cursor:pointer}app-gallery-lightbox-photo[_ngcontent-%COMP%]{overflow:hidden}.blackCanvas[_ngcontent-%COMP%]{position:fixed;z-index:1099;left:0;top:0;width:100%;height:100%;background-color:#000;transition:all .3s ease-in-out;-o-transition:all .3s ease-in-out;-ms-transition:all .3s ease-in-out;-webkit-transition:all .3s ease-in-out;-moz-transition:all .3s ease-in-out}app-info-panel[_ngcontent-%COMP%]{z-index:1100;position:fixed;height:100vh;max-width:100vw;right:0;top:0;transition:all .3s ease-in-out;-o-transition:all .3s ease-in-out;-ms-transition:all .3s ease-in-out;-moz-transition:all .3s ease-in-out;-webkit-transition:all .3s ease-in-out}\"]\n  });\n  return GalleryLightboxComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}