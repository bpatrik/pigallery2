{"ast":null,"code":"import { backendTexts } from '../../../common/BackendTexts';\nimport { DefaultsJobs } from '../../../common/entities/job/JobDTO';\nimport * as i0 from \"@angular/core\";\nexport let BackendtextService = /*#__PURE__*/(() => {\n  class BackendtextService {\n    get(id) {\n      switch (id) {\n        case backendTexts.sizeToGenerate.name:\n          return $localize`Size to generate`;\n        case backendTexts.sizeToGenerate.description:\n          return $localize`These thumbnails will be generated. The list should be a subset of the enabled thumbnail sizes`;\n        case backendTexts.indexedFilesOnly.name:\n          return $localize`Indexed only`;\n        case backendTexts.indexedFilesOnly.description:\n          return $localize`Only checks indexed files.`;\n        case backendTexts.indexChangesOnly.name:\n          return $localize`Index changes only`;\n        case backendTexts.indexChangesOnly.description:\n          return $localize`Only indexes a folder if it got changed.`;\n        default:\n          return null;\n      }\n    }\n    getJobName(job) {\n      if (typeof job === 'string') {\n        job = DefaultsJobs[job];\n      }\n      switch (job) {\n        case DefaultsJobs.Indexing:\n          return $localize`Indexing`;\n        case DefaultsJobs['Gallery Reset']:\n          return $localize`Gallery reset`;\n        case DefaultsJobs['Album Reset']:\n          return $localize`Album reset`;\n        case DefaultsJobs['Thumbnail Generation']:\n          return $localize`Thumbnail generation`;\n        case DefaultsJobs['Photo Converting']:\n          return $localize`Photo converting`;\n        case DefaultsJobs['Video Converting']:\n          return $localize`Video converting`;\n        case DefaultsJobs['Temp Folder Cleaning']:\n          return $localize`Temp folder cleaning`;\n        case DefaultsJobs['Preview Filling']:\n          return $localize`Preview filling`;\n        case DefaultsJobs['Preview Reset']:\n          return $localize`Preview reset`;\n        case DefaultsJobs['GPX Compression']:\n          return $localize`GPX compression`;\n        default:\n          return DefaultsJobs[job];\n      }\n    }\n  }\n  BackendtextService.ɵfac = function BackendtextService_Factory(t) {\n    return new (t || BackendtextService)();\n  };\n  BackendtextService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BackendtextService,\n    factory: BackendtextService.ɵfac\n  });\n  return BackendtextService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}