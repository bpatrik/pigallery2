{"ast":null,"code":"import { ThumbnailLoaderService, ThumbnailLoadingPriority } from './thumbnailLoader.service';\nimport { Person } from '../faces/Person';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./thumbnailLoader.service\";\nexport let ThumbnailManagerService = /*#__PURE__*/(() => {\n  class ThumbnailManagerService {\n    constructor(thumbnailLoader) {\n      this.thumbnailLoader = thumbnailLoader;\n    }\n    getThumbnail(photo) {\n      return new Thumbnail(photo, this.thumbnailLoader);\n    }\n    getLazyThumbnail(photo) {\n      return new Thumbnail(photo, this.thumbnailLoader, false);\n    }\n    getIcon(photo) {\n      return new IconThumbnail(photo, this.thumbnailLoader);\n    }\n    getPersonThumbnail(person) {\n      return new PersonThumbnail(person, this.thumbnailLoader);\n    }\n  }\n  ThumbnailManagerService.ɵfac = function ThumbnailManagerService_Factory(t) {\n    return new (t || ThumbnailManagerService)(i0.ɵɵinject(i1.ThumbnailLoaderService));\n  };\n  ThumbnailManagerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ThumbnailManagerService,\n    factory: ThumbnailManagerService.ɵfac\n  });\n  return ThumbnailManagerService;\n})();\nexport class ThumbnailBase {\n  constructor(thumbnailService) {\n    this.thumbnailService = thumbnailService;\n    this.loading = false;\n    this.available = false;\n    this.src = null;\n    this.error = false;\n    this.onLoad = null;\n    this.thumbnailTask = null;\n  }\n  set OnLoad(onLoad) {\n    this.onLoad = onLoad;\n  }\n  get Available() {\n    return this.available;\n  }\n  get Src() {\n    return this.src;\n  }\n  get Loading() {\n    return this.loading;\n  }\n  get Error() {\n    return this.error;\n  }\n  destroy() {\n    if (this.thumbnailTask != null) {\n      this.thumbnailService.removeTask(this.thumbnailTask);\n      this.thumbnailTask = null;\n    }\n  }\n}\nexport class PersonThumbnail extends ThumbnailBase {\n  constructor(person, thumbnailService) {\n    super(thumbnailService);\n    this.person = person;\n    this.src = '';\n    this.error = false;\n    if (!this.person.missingThumbnail) {\n      this.src = Person.getThumbnailUrl(person);\n      this.available = true;\n      if (this.onLoad) {\n        this.onLoad();\n      }\n      return;\n    }\n    setTimeout(() => {\n      const listener = {\n        onStartedLoading: () => {\n          // onLoadStarted\n          this.loading = true;\n        },\n        onLoad: () => {\n          // onLoaded\n          this.src = Person.getThumbnailUrl(person);\n          if (this.onLoad) {\n            this.onLoad();\n          }\n          this.available = true;\n          this.loading = false;\n          this.thumbnailTask = null;\n        },\n        onError: () => {\n          // onError\n          this.thumbnailTask = null;\n          this.loading = false;\n          this.error = true;\n        }\n      };\n      this.thumbnailTask = this.thumbnailService.loadPersonThumbnail(person, ThumbnailLoadingPriority.high, listener);\n    }, 0);\n  }\n  set Visible(visible) {\n    if (!this.thumbnailTask) {\n      return;\n    }\n    if (visible === true) {\n      this.thumbnailTask.priority = ThumbnailLoadingPriority.high;\n    } else {\n      this.thumbnailTask.priority = ThumbnailLoadingPriority.medium;\n    }\n  }\n}\nexport class IconThumbnail extends ThumbnailBase {\n  constructor(media, thumbnailService) {\n    super(thumbnailService);\n    this.media = media;\n    this.src = '';\n    this.error = false;\n    if (this.media.isIconAvailable()) {\n      this.src = this.media.getIconPath();\n      this.available = true;\n      if (this.onLoad) {\n        this.onLoad();\n      }\n    }\n    if (!this.media.isIconAvailable()) {\n      setTimeout(() => {\n        const listener = {\n          onStartedLoading: () => {\n            // onLoadStarted\n            this.loading = true;\n          },\n          onLoad: () => {\n            // onLoaded\n            this.src = this.media.getIconPath();\n            if (this.onLoad) {\n              this.onLoad();\n            }\n            this.available = true;\n            this.loading = false;\n            this.thumbnailTask = null;\n          },\n          onError: () => {\n            // onError\n            this.thumbnailTask = null;\n            this.loading = false;\n            this.error = true;\n          }\n        };\n        this.thumbnailTask = this.thumbnailService.loadIcon(this.media, ThumbnailLoadingPriority.high, listener);\n      }, 0);\n    }\n  }\n  set Visible(visible) {\n    if (!this.thumbnailTask) {\n      return;\n    }\n    if (visible === true) {\n      this.thumbnailTask.priority = ThumbnailLoadingPriority.high;\n    } else {\n      this.thumbnailTask.priority = ThumbnailLoadingPriority.medium;\n    }\n  }\n}\nexport class Thumbnail extends ThumbnailBase {\n  constructor(media, thumbnailService, autoLoad = true) {\n    super(thumbnailService);\n    this.media = media;\n    if (this.media.isThumbnailAvailable()) {\n      this.src = this.media.getThumbnailPath();\n      this.available = true;\n      if (this.onLoad) {\n        this.onLoad();\n      }\n    } else if (this.media.isReplacementThumbnailAvailable()) {\n      this.src = this.media.getReplacementThumbnailPath();\n      this.available = true;\n    }\n    if (autoLoad) {\n      this.load();\n    }\n  }\n  set CurrentlyWaiting(value) {\n    if (!this.thumbnailTask) {\n      return;\n    }\n    if (value === true) {\n      if (this.media.isReplacementThumbnailAvailable()) {\n        this.thumbnailTask.priority = ThumbnailLoadingPriority.medium;\n      } else {\n        this.thumbnailTask.priority = ThumbnailLoadingPriority.extraHigh;\n      }\n    } else {\n      if (this.media.isReplacementThumbnailAvailable()) {\n        this.thumbnailTask.priority = ThumbnailLoadingPriority.low;\n      } else {\n        this.thumbnailTask.priority = ThumbnailLoadingPriority.medium;\n      }\n    }\n  }\n  set Visible(visible) {\n    if (!this.thumbnailTask) {\n      return;\n    }\n    if (visible === true) {\n      if (this.media.isReplacementThumbnailAvailable()) {\n        this.thumbnailTask.priority = ThumbnailLoadingPriority.medium;\n      } else {\n        this.thumbnailTask.priority = ThumbnailLoadingPriority.high;\n      }\n    } else {\n      if (this.media.isReplacementThumbnailAvailable()) {\n        this.thumbnailTask.priority = ThumbnailLoadingPriority.low;\n      } else {\n        this.thumbnailTask.priority = ThumbnailLoadingPriority.medium;\n      }\n    }\n  }\n  load() {\n    if (!this.media.isThumbnailAvailable() && this.thumbnailTask == null) {\n      //    setTimeout(() => {\n      const listener = {\n        onStartedLoading: () => {\n          // onLoadStarted\n          this.loading = true;\n        },\n        onLoad: () => {\n          // onLoaded\n          this.src = this.media.getThumbnailPath();\n          if (this.onLoad) {\n            this.onLoad();\n          }\n          this.available = true;\n          this.loading = false;\n          this.thumbnailTask = null;\n        },\n        onError: () => {\n          // onError\n          this.thumbnailTask = null;\n          this.loading = false;\n          this.error = true;\n        }\n      };\n      if (this.media.isReplacementThumbnailAvailable()) {\n        this.thumbnailTask = this.thumbnailService.loadImage(this.media, ThumbnailLoadingPriority.medium, listener);\n      } else {\n        this.thumbnailTask = this.thumbnailService.loadImage(this.media, ThumbnailLoadingPriority.high, listener);\n      }\n      // }, 0);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}