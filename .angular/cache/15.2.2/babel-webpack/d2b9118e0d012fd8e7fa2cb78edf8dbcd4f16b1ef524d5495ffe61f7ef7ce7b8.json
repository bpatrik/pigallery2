{"ast":null,"code":"import { BrowserModule, HAMMER_GESTURE_CONFIG, HammerGestureConfig, HammerModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { UserService } from './model/network/user.service';\nimport { ContentService } from './ui/gallery/content.service';\nimport { NetworkService } from './model/network/network.service';\nimport { GalleryCacheService } from './ui/gallery/cache.gallery.service';\nimport { FullScreenService } from './ui/gallery/fullscreen.service';\nimport { AuthenticationService } from './model/network/authentication.service';\nimport { LeafletModule } from '@asymmetrik/ngx-leaflet';\nimport { LoadingBarModule } from '@ngx-loading-bar/core';\nimport { GPXFilesFilterPipe } from './pipes/GPXFilesFilterPipe';\nimport { ThumbnailManagerService } from './ui/gallery/thumbnailManager.service';\nimport { OverlayService } from './ui/gallery/overlay.service';\nimport { ShareService } from './ui/gallery/share.service';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { ToastrModule } from 'ngx-toastr';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NotificationService } from './model/notification.service';\nimport { ClipboardModule } from 'ngx-clipboard';\nimport { NavigationService } from './model/navigation.service';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { SettingsService } from './ui/settings/settings.service';\nimport { HTTP_INTERCEPTORS, HttpClient, HttpClientModule } from '@angular/common/http';\nimport { DefaultUrlSerializer, UrlSerializer } from '@angular/router';\nimport { QueryService } from './model/query.service';\nimport { StringifySortingMethod } from './pipes/StringifySortingMethod';\nimport { MapService } from './ui/gallery/map/map.service';\nimport { ThumbnailLoaderService } from './ui/gallery/thumbnailLoader.service';\nimport { DuplicateService } from './ui/duplicates/duplicates.service';\nimport { SeededRandomService } from './model/seededRandom.service';\nimport { FacesService } from './ui/faces/faces.service';\nimport { VersionService } from './model/version.service';\nimport { TimepickerModule } from 'ngx-bootstrap/timepicker';\nimport { ScheduledJobsService } from './ui/settings/scheduled-jobs.service';\nimport { BackendtextService } from './model/backendtext.service';\nimport { ErrorInterceptor } from './model/network/helper/error.interceptor';\nimport { CSRFInterceptor } from './model/network/helper/csrf.interceptor';\nimport { AutoCompleteService } from './ui/gallery/search/autocomplete.service';\nimport { SearchQueryParserService } from './ui/gallery/search/search-query-parser.service';\nimport { AppRoutingModule } from './app.routing';\nimport { CookieService } from 'ngx-cookie-service';\nimport { LeafletMarkerClusterModule } from '@asymmetrik/ngx-leaflet-markercluster';\nimport { Marker } from 'leaflet';\nimport { AlbumsService } from './ui/albums/albums.service';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { MDFilesFilterPipe } from './pipes/MDFilesFilterPipe';\nimport { BlogService } from './ui/gallery/blog/blog.service';\nimport { GallerySortingService } from './ui/gallery/navigator/sorting.service';\nimport { FilterService } from './ui/gallery/filter/filter.service';\nimport { ThemeService } from './model/theme.service';\nimport { MarkerFactory } from './ui/gallery/map/MarkerFactory';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-bootstrap/tooltip\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"ngx-bootstrap/modal\";\nimport * as i4 from \"ngx-bootstrap/collapse\";\nimport * as i5 from \"ngx-bootstrap/popover\";\nimport * as i6 from \"ngx-bootstrap/dropdown\";\nimport * as i7 from \"ngx-bootstrap/datepicker\";\nimport * as i8 from \"ngx-bootstrap/timepicker\";\nimport * as i9 from \"ngx-markdown\";\nexport let MyHammerConfig = /*#__PURE__*/(() => {\n  class MyHammerConfig extends HammerGestureConfig {\n    constructor() {\n      super(...arguments);\n      this.events = ['pinch'];\n      this.overrides = {\n        pan: {\n          threshold: 1\n        },\n        swipe: {\n          direction: 31\n        },\n        pinch: {\n          enable: true\n        }\n      };\n    }\n  }\n  MyHammerConfig.ɵfac = /*@__PURE__*/function () {\n    let ɵMyHammerConfig_BaseFactory;\n    return function MyHammerConfig_Factory(t) {\n      return (ɵMyHammerConfig_BaseFactory || (ɵMyHammerConfig_BaseFactory = i0.ɵɵgetInheritedFactory(MyHammerConfig)))(t || MyHammerConfig);\n    };\n  }();\n  MyHammerConfig.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MyHammerConfig,\n    factory: MyHammerConfig.ɵfac\n  });\n  return MyHammerConfig;\n})();\nexport class CustomUrlSerializer {\n  constructor() {\n    this.defaultUrlSerializer = new DefaultUrlSerializer();\n  }\n  parse(url) {\n    // Encode parentheses\n    url = url.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n    // Use the default serializer.\n    return this.defaultUrlSerializer.parse(url);\n  }\n  serialize(tree) {\n    return this.defaultUrlSerializer.serialize(tree).replace(/%28/g, '(').replace(/%29/g, ')');\n  }\n}\nMarker.prototype.options.icon = MarkerFactory.defIcon;\nexport let AppModule = /*#__PURE__*/(() => {\n  class AppModule {}\n  AppModule.ɵfac = function AppModule_Factory(t) {\n    return new (t || AppModule)();\n  };\n  AppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AppModule,\n    bootstrap: [AppComponent]\n  });\n  AppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [{\n      provide: HTTP_INTERCEPTORS,\n      useClass: CSRFInterceptor,\n      multi: true\n    }, {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ErrorInterceptor,\n      multi: true\n    }, {\n      provide: UrlSerializer,\n      useClass: CustomUrlSerializer\n    }, {\n      provide: HAMMER_GESTURE_CONFIG,\n      useClass: MyHammerConfig\n    }, StringifySortingMethod, NetworkService, ShareService, UserService, AlbumsService, GalleryCacheService, ContentService, FilterService, GallerySortingService, MapService, BlogService, SearchQueryParserService, AutoCompleteService, AuthenticationService, ThumbnailLoaderService, ThumbnailManagerService, NotificationService, FullScreenService, NavigationService, SettingsService, SeededRandomService, OverlayService, QueryService, ThemeService, DuplicateService, FacesService, VersionService, ScheduledJobsService, BackendtextService, CookieService, GPXFilesFilterPipe, MDFilesFilterPipe],\n    imports: [BrowserModule, HammerModule, FormsModule, HttpClientModule, BrowserAnimationsModule, AppRoutingModule, ClipboardModule, TooltipModule.forRoot(), ToastrModule.forRoot(), ModalModule.forRoot(), CollapseModule.forRoot(), PopoverModule.forRoot(), BsDropdownModule.forRoot(), BsDatepickerModule.forRoot(), TimepickerModule.forRoot(), LoadingBarModule, LeafletModule, LeafletMarkerClusterModule, MarkdownModule.forRoot({\n      loader: HttpClient\n    })]\n  });\n  return AppModule;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}