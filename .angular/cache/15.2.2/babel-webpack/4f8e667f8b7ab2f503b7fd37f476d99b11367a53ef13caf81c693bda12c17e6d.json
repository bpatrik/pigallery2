{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-inferrable-types */\nimport 'reflect-metadata';\nimport { SortingMethods } from '../../entities/SortingMethods';\nimport { UserRoles } from '../../entities/UserDTO';\nimport { ConfigProperty, SubConfigClass } from 'typeconfig/common';\nimport { DefaultsJobs } from '../../entities/job/JobDTO';\nif (typeof $localize === 'undefined') {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  global.$localize = s => s;\n}\nexport var MapProviders = /*#__PURE__*/(() => {\n  (function (MapProviders) {\n    MapProviders[MapProviders[\"OpenStreetMap\"] = 1] = \"OpenStreetMap\";\n    MapProviders[MapProviders[\"Mapbox\"] = 2] = \"Mapbox\";\n    MapProviders[MapProviders[\"Custom\"] = 3] = \"Custom\";\n  })(MapProviders || (MapProviders = {}));\n  return MapProviders;\n})();\nexport var ConfigPriority = /*#__PURE__*/(() => {\n  (function (ConfigPriority) {\n    ConfigPriority[ConfigPriority[\"basic\"] = 0] = \"basic\";\n    ConfigPriority[ConfigPriority[\"advanced\"] = 1] = \"advanced\";\n    ConfigPriority[ConfigPriority[\"underTheHood\"] = 2] = \"underTheHood\";\n  })(ConfigPriority || (ConfigPriority = {}));\n  return ConfigPriority;\n})();\nexport var ThemeModes = /*#__PURE__*/(() => {\n  (function (ThemeModes) {\n    ThemeModes[ThemeModes[\"light\"] = 1] = \"light\";\n    ThemeModes[ThemeModes[\"dark\"] = 2] = \"dark\";\n    ThemeModes[ThemeModes[\"auto\"] = 3] = \"auto\";\n  })(ThemeModes || (ThemeModes = {}));\n  return ThemeModes;\n})();\nlet AutoCompleteItemsPerCategoryConfig = class AutoCompleteItemsPerCategoryConfig {\n  constructor() {\n    this.maxItems = 20;\n    this.fileName = 2;\n    this.directory = 2;\n    this.caption = 3;\n    this.position = 3;\n    this.person = 5;\n    this.keyword = 5;\n  }\n};\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Maximum items`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Maximum number autocomplete items shown at once. If there is not enough items to reach this value, it takes upto double of the individual items.`\n}), __metadata(\"design:type\", Number)], AutoCompleteItemsPerCategoryConfig.prototype, \"maxItems\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Max photo items`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Maximum number autocomplete items shown per photo category.`\n}), __metadata(\"design:type\", Number)], AutoCompleteItemsPerCategoryConfig.prototype, \"fileName\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Max directory items`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Maximum number autocomplete items shown per directory category.`\n}), __metadata(\"design:type\", Number)], AutoCompleteItemsPerCategoryConfig.prototype, \"directory\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Max caption items`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Maximum number autocomplete items shown per caption category.`\n}), __metadata(\"design:type\", Number)], AutoCompleteItemsPerCategoryConfig.prototype, \"caption\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Max position items`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Maximum number autocomplete items shown per position category.`\n}), __metadata(\"design:type\", Number)], AutoCompleteItemsPerCategoryConfig.prototype, \"position\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Max faces items`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Maximum number autocomplete items shown per faces category.`\n}), __metadata(\"design:type\", Number)], AutoCompleteItemsPerCategoryConfig.prototype, \"person\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Max keyword items`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Maximum number autocomplete items shown per keyword category.`\n}), __metadata(\"design:type\", Number)], AutoCompleteItemsPerCategoryConfig.prototype, \"keyword\", void 0);\nAutoCompleteItemsPerCategoryConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], AutoCompleteItemsPerCategoryConfig);\nexport { AutoCompleteItemsPerCategoryConfig };\nlet AutoCompleteConfig = class AutoCompleteConfig {\n  constructor() {\n    this.enabled = true;\n    this.ItemsPerCategory = new AutoCompleteItemsPerCategoryConfig();\n    this.cacheTimeout = 1000 * 60 * 60;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Enable Autocomplete`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Show hints while typing search query.`\n}), __metadata(\"design:type\", Boolean)], AutoCompleteConfig.prototype, \"enabled\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Max items per category`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Maximum number autocomplete items shown per category.`\n}), __metadata(\"design:type\", AutoCompleteItemsPerCategoryConfig)], AutoCompleteConfig.prototype, \"ItemsPerCategory\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Cache timeout`,\n    priority: ConfigPriority.underTheHood,\n    unit: 'ms'\n  },\n  description: $localize`Autocomplete cache timeout. `\n}), __metadata(\"design:type\", Number)], AutoCompleteConfig.prototype, \"cacheTimeout\", void 0);\nAutoCompleteConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], AutoCompleteConfig);\nexport { AutoCompleteConfig };\nlet ClientSearchConfig = class ClientSearchConfig {\n  constructor() {\n    this.enabled = true;\n    this.searchCacheTimeout = 1000 * 60 * 60;\n    this.AutoComplete = new AutoCompleteConfig();\n    this.maxMediaResult = 10000;\n    this.maxDirectoryResult = 200;\n    this.listDirectories = false;\n    this.listMetafiles = true;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Enable`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Enables searching.`\n}), __metadata(\"design:type\", Boolean)], ClientSearchConfig.prototype, \"enabled\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Cache timeout`,\n    priority: ConfigPriority.underTheHood,\n    unit: 'ms'\n  },\n  description: $localize`Search cache timeout.`\n}), __metadata(\"design:type\", Number)], ClientSearchConfig.prototype, \"searchCacheTimeout\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Autocomplete`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", AutoCompleteConfig)], ClientSearchConfig.prototype, \"AutoComplete\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Maximum media result`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Maximum number of photos and videos that are listed in one search result.`\n}), __metadata(\"design:type\", Number)], ClientSearchConfig.prototype, \"maxMediaResult\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Maximum directory result`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Maximum number of directories that are listed in one search result.`\n}), __metadata(\"design:type\", Number)], ClientSearchConfig.prototype, \"maxDirectoryResult\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`List directories`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Search returns also with directories, not just media.`\n}), __metadata(\"design:type\", Boolean)], ClientSearchConfig.prototype, \"listDirectories\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`List metafiles`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Search also returns with metafiles from directories that contain a media file of the matched search result.`\n}), __metadata(\"design:type\", Boolean)], ClientSearchConfig.prototype, \"listMetafiles\", void 0);\nClientSearchConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientSearchConfig);\nexport { ClientSearchConfig };\nlet ClientAlbumConfig = class ClientAlbumConfig {\n  constructor() {\n    this.enabled = true;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Enable`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", Boolean)], ClientAlbumConfig.prototype, \"enabled\", void 0);\nClientAlbumConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientAlbumConfig);\nexport { ClientAlbumConfig };\nlet ClientSharingConfig = class ClientSharingConfig {\n  constructor() {\n    this.enabled = true;\n    this.passwordProtected = true;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Enable`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Enables sharing.`\n}), __metadata(\"design:type\", Boolean)], ClientSharingConfig.prototype, \"enabled\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Password protected`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Enables password protected sharing links.`\n}), __metadata(\"design:type\", Boolean)], ClientSharingConfig.prototype, \"passwordProtected\", void 0);\nClientSharingConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientSharingConfig);\nexport { ClientSharingConfig };\nlet ClientRandomPhotoConfig = class ClientRandomPhotoConfig {\n  constructor() {\n    this.enabled = true;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Enable`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Enables random link generation.`\n}), __metadata(\"design:type\", Boolean)], ClientRandomPhotoConfig.prototype, \"enabled\", void 0);\nClientRandomPhotoConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientRandomPhotoConfig);\nexport { ClientRandomPhotoConfig };\nlet MapLayers = class MapLayers {\n  constructor() {\n    this.name = 'street';\n    this.url = '';\n    this.darkLayer = false;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Name of a map layer.`\n}), __metadata(\"design:type\", String)], MapLayers.prototype, \"name\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    priority: ConfigPriority.advanced,\n    hint: 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n  },\n  description: $localize`Url of a map layer.`\n}), __metadata(\"design:type\", String)], MapLayers.prototype, \"url\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Sets if the layer is dark (used as default in the dark mode).`\n}), __metadata(\"design:type\", Boolean)], MapLayers.prototype, \"darkLayer\", void 0);\nMapLayers = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], MapLayers);\nexport { MapLayers };\nlet SVGIconConfig = class SVGIconConfig {\n  constructor(viewBox = '0 0 512 512', path = '') {\n    this.viewBox = '0 0 512 512';\n    this.path = '';\n    this.viewBox = viewBox;\n    this.path = path;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`SVG icon viewBox`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`SVG path viewBox. See: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox`\n}), __metadata(\"design:type\", String)], SVGIconConfig.prototype, \"viewBox\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`SVG path`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Path element of the SVG icon. Icons used on the map: fontawesome.com/icons.`\n}), __metadata(\"design:type\", String)], SVGIconConfig.prototype, \"path\", void 0);\nSVGIconConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n}), __metadata(\"design:paramtypes\", [String, String])], SVGIconConfig);\nexport { SVGIconConfig };\nlet PathThemeConfig = class PathThemeConfig {\n  constructor(color = '', dashArray = '', svgIcon = new SVGIconConfig()) {\n    this.color = '';\n    this.dashArray = '';\n    this.svgIcon = new SVGIconConfig();\n    this.color = color;\n    this.dashArray = dashArray;\n    this.svgIcon = svgIcon;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Color`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Color of the path. Use any valid css colors.`\n}), __metadata(\"design:type\", String)], PathThemeConfig.prototype, \"color\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Dash pattern`,\n    priority: ConfigPriority.advanced,\n    uiOptions: ['', '4', '4 1', '4 8', '4 1 2', '0 4 0', '4 1 2 3']\n  },\n  description: $localize`Dash pattern of the path. Represents the spacing and length of the dash. Read more about dash array at: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray.`\n}), __metadata(\"design:type\", String)], PathThemeConfig.prototype, \"dashArray\", void 0);\n__decorate([ConfigProperty({\n  type: SVGIconConfig,\n  tags: {\n    name: $localize`Svg Icon`,\n    uiType: 'SVGIconConfig',\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Set the icon of the map marker pin.`\n}), __metadata(\"design:type\", SVGIconConfig)], PathThemeConfig.prototype, \"svgIcon\", void 0);\nPathThemeConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n}), __metadata(\"design:paramtypes\", [String, String, SVGIconConfig])], PathThemeConfig);\nexport { PathThemeConfig };\nlet MapPathGroupThemeConfig = class MapPathGroupThemeConfig {\n  constructor(matchers = [], theme = new PathThemeConfig()) {\n    this.matchers = [];\n    this.theme = new PathThemeConfig();\n    this.matchers = matchers;\n    this.theme = theme;\n  }\n};\n__decorate([ConfigProperty({\n  arrayType: 'string',\n  tags: {\n    name: $localize`Matchers`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`List of regex string to match the name of the path. Case insensitive. Empty list matches everything.`\n}), __metadata(\"design:type\", Array)], MapPathGroupThemeConfig.prototype, \"matchers\", void 0);\n__decorate([ConfigProperty({\n  type: PathThemeConfig,\n  tags: {\n    name: $localize`Path and icon theme`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`List of regex string to match the name of the path.`\n}), __metadata(\"design:type\", PathThemeConfig)], MapPathGroupThemeConfig.prototype, \"theme\", void 0);\nMapPathGroupThemeConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n}), __metadata(\"design:paramtypes\", [Array, PathThemeConfig])], MapPathGroupThemeConfig);\nexport { MapPathGroupThemeConfig };\nlet MapPathGroupConfig = class MapPathGroupConfig {\n  constructor(name = '', matchers = []) {\n    this.name = '';\n    this.matchers = [];\n    this.name = name;\n    this.matchers = matchers;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Name`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Name of the marker and path group on the map.`\n}), __metadata(\"design:type\", String)], MapPathGroupConfig.prototype, \"name\", void 0);\n__decorate([ConfigProperty({\n  arrayType: MapPathGroupThemeConfig,\n  tags: {\n    name: $localize`Path themes`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Matchers for a given map and path theme.`\n}), __metadata(\"design:type\", Array)], MapPathGroupConfig.prototype, \"matchers\", void 0);\nMapPathGroupConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n}), __metadata(\"design:paramtypes\", [String, Array])], MapPathGroupConfig);\nexport { MapPathGroupConfig };\nlet ClientMapConfig = class ClientMapConfig {\n  constructor() {\n    this.enabled = true;\n    this.useImageMarkers = true;\n    this.mapProvider = MapProviders.OpenStreetMap;\n    this.mapboxAccessToken = '';\n    this.customLayers = [new MapLayers()];\n    this.maxPreviewMarkers = 50;\n    this.MapPathGroupConfig = [new MapPathGroupConfig('Transportation', [new MapPathGroupThemeConfig(['flight', 'flying'], new PathThemeConfig('var(--bs-orange)', '4 8', new SVGIconConfig('0 0 567 512', 'M482.3 192c34.2 0 93.7 29 93.7 64c0 36-59.5 64-93.7 64l-116.6 0L265.2 495.9c-5.7 10-16.3 16.1-27.8 16.1l-56.2 0c-10.6 0-18.3-10.2-15.4-20.4l49-171.6L112 320 68.8 377.6c-3 4-7.8 6.4-12.8 6.4l-42 0c-7.8 0-14-6.3-14-14c0-1.3 .2-2.6 .5-3.9L32 256 .5 145.9c-.4-1.3-.5-2.6-.5-3.9c0-7.8 6.3-14 14-14l42 0c5 0 9.8 2.4 12.8 6.4L112 192l102.9 0-49-171.6C162.9 10.2 170.6 0 181.2 0l56.2 0c11.5 0 22.1 6.2 27.8 16.1L365.7 192l116.6 0z'))), new MapPathGroupThemeConfig(['drive', 'driving'], new PathThemeConfig('var(--bs-orange)', '4 8', new SVGIconConfig('0 0 640 512', 'M171.3 96H224v96H111.3l30.4-75.9C146.5 104 158.2 96 171.3 96zM272 192V96h81.2c9.7 0 18.9 4.4 25 12l67.2 84H272zm256.2 1L428.2 68c-18.2-22.8-45.8-36-75-36H171.3c-39.3 0-74.6 23.9-89.1 60.3L40.6 196.4C16.8 205.8 0 228.9 0 256V368c0 17.7 14.3 32 32 32H65.3c7.6 45.4 47.1 80 94.7 80s87.1-34.6 94.7-80H385.3c7.6 45.4 47.1 80 94.7 80s87.1-34.6 94.7-80H608c17.7 0 32-14.3 32-32V320c0-65.2-48.8-119-111.8-127zM434.7 368a48 48 0 1 1 90.5 32 48 48 0 1 1 -90.5-32zM160 336a48 48 0 1 1 0 96 48 48 0 1 1 0-96z'))), new MapPathGroupThemeConfig(['ship', 'sailing', 'cruise'], new PathThemeConfig('var(--bs-orange)', '4 8', new SVGIconConfig('0 0 576 512', 'M256 16c0-7 4.5-13.2 11.2-15.3s13.9 .4 17.9 6.1l224 320c3.4 4.9 3.8 11.3 1.1 16.6s-8.2 8.6-14.2 8.6H272c-8.8 0-16-7.2-16-16V16zM212.1 96.5c7 1.9 11.9 8.2 11.9 15.5V336c0 8.8-7.2 16-16 16H80c-5.7 0-11-3-13.8-8s-2.9-11-.1-16l128-224c3.6-6.3 11-9.4 18-7.5zM5.7 404.3C2.8 394.1 10.5 384 21.1 384H554.9c10.6 0 18.3 10.1 15.4 20.3l-4 14.3C550.7 473.9 500.4 512 443 512H133C75.6 512 25.3 473.9 9.7 418.7l-4-14.3z')))]), new MapPathGroupConfig('Sport', [new MapPathGroupThemeConfig(['run'], new PathThemeConfig('var(--bs-primary)', '', new SVGIconConfig('0 0 417 512', 'M320 48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM125.7 175.5c9.9-9.9 23.4-15.5 37.5-15.5c1.9 0 3.8 .1 5.6 .3L137.6 254c-9.3 28 1.7 58.8 26.8 74.5l86.2 53.9-25.4 88.8c-4.9 17 5 34.7 22 39.6s34.7-5 39.6-22l28.7-100.4c5.9-20.6-2.6-42.6-20.7-53.9L238 299l30.9-82.4 5.1 12.3C289 264.7 323.9 288 362.7 288H384c17.7 0 32-14.3 32-32s-14.3-32-32-32H362.7c-12.9 0-24.6-7.8-29.5-19.7l-6.3-15c-14.6-35.1-44.1-61.9-80.5-73.1l-48.7-15c-11.1-3.4-22.7-5.2-34.4-5.2c-31 0-60.8 12.3-82.7 34.3L57.4 153.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l23.1-23.1zM91.2 352H32c-17.7 0-32 14.3-32 32s14.3 32 32 32h69.6c19 0 36.2-11.2 43.9-28.5L157 361.6l-9.5-6c-17.5-10.9-30.5-26.8-37.9-44.9L91.2 352z'))), new MapPathGroupThemeConfig(['walk'], new PathThemeConfig('var(--bs-primary)', '', new SVGIconConfig('0 0 320 512', 'M160 48a48 48 0 1 1 96 0 48 48 0 1 1 -96 0zM126.5 199.3c-1 .4-1.9 .8-2.9 1.2l-8 3.5c-16.4 7.3-29 21.2-34.7 38.2l-2.6 7.8c-5.6 16.8-23.7 25.8-40.5 20.2s-25.8-23.7-20.2-40.5l2.6-7.8c11.4-34.1 36.6-61.9 69.4-76.5l8-3.5c20.8-9.2 43.3-14 66.1-14c44.6 0 84.8 26.8 101.9 67.9L281 232.7l21.4 10.7c15.8 7.9 22.2 27.1 14.3 42.9s-27.1 22.2-42.9 14.3L247 287.3c-10.3-5.2-18.4-13.8-22.8-24.5l-9.6-23-19.3 65.5 49.5 54c5.4 5.9 9.2 13 11.2 20.8l23 92.1c4.3 17.1-6.1 34.5-23.3 38.8s-34.5-6.1-38.8-23.3l-22-88.1-70.7-77.1c-14.8-16.1-20.3-38.6-14.7-59.7l16.9-63.5zM68.7 398l25-62.4c2.1 3 4.5 5.8 7 8.6l40.7 44.4-14.5 36.2c-2.4 6-6 11.5-10.6 16.1L54.6 502.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L68.7 398z'))), new MapPathGroupThemeConfig(['hike', 'hiking'], new PathThemeConfig('var(--bs-primary)', '', new SVGIconConfig('0 0 384 512', 'M192 48a48 48 0 1 1 96 0 48 48 0 1 1 -96 0zm51.3 182.7L224.2 307l49.7 49.7c9 9 14.1 21.2 14.1 33.9V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V397.3l-73.9-73.9c-15.8-15.8-22.2-38.6-16.9-60.3l20.4-84c8.3-34.1 42.7-54.9 76.7-46.4c19 4.8 35.6 16.4 46.4 32.7L305.1 208H336V184c0-13.3 10.7-24 24-24s24 10.7 24 24v55.8c0 .1 0 .2 0 .2s0 .2 0 .2V488c0 13.3-10.7 24-24 24s-24-10.7-24-24V272H296.6c-16 0-31-8-39.9-21.4l-13.3-20zM81.1 471.9L117.3 334c3 4.2 6.4 8.2 10.1 11.9l41.9 41.9L142.9 488.1c-4.5 17.1-22 27.3-39.1 22.8s-27.3-22-22.8-39.1zm55.5-346L101.4 266.5c-3 12.1-14.9 19.9-27.2 17.9l-47.9-8c-14-2.3-22.9-16.3-19.2-30L31.9 155c9.5-34.8 41.1-59 77.2-59h4.2c15.6 0 27.1 14.7 23.3 29.8z'))), new MapPathGroupThemeConfig(['bike', 'biking', 'cycling'], new PathThemeConfig('var(--bs-primary)', '', new SVGIconConfig('0 0 640 512', 'M400 96a48 48 0 1 0 0-96 48 48 0 1 0 0 96zm27.2 64l-61.8-48.8c-17.3-13.6-41.7-13.8-59.1-.3l-83.1 64.2c-30.7 23.8-28.5 70.8 4.3 91.6L288 305.1V416c0 17.7 14.3 32 32 32s32-14.3 32-32V288c0-10.7-5.3-20.7-14.2-26.6L295 232.9l60.3-48.5L396 217c5.7 4.5 12.7 7 20 7h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H427.2zM56 384a72 72 0 1 1 144 0A72 72 0 1 1 56 384zm200 0A128 128 0 1 0 0 384a128 128 0 1 0 256 0zm184 0a72 72 0 1 1 144 0 72 72 0 1 1 -144 0zm200 0a128 128 0 1 0 -256 0 128 128 0 1 0 256 0z'))), new MapPathGroupThemeConfig(['skiing', 'ski'], new PathThemeConfig('var(--bs-primary)', '', new SVGIconConfig('0 0 512 512', 'M380.7 48a48 48 0 1 1 96 0 48 48 0 1 1 -96 0zM2.7 268.9c6.1-11.8 20.6-16.3 32.4-10.2L232.7 361.3l46.2-69.2-75.1-75.1c-14.6-14.6-20.4-33.9-18.4-52.1l108.8 52 39.3 39.3c16.2 16.2 18.7 41.5 6 60.6L289.8 391l128.7 66.8c13.6 7.1 29.8 7.2 43.6 .3l15.2-7.6c11.9-5.9 26.3-1.1 32.2 10.7s1.1 26.3-10.7 32.2l-15.2 7.6c-27.5 13.7-59.9 13.5-87.2-.7L12.9 301.3C1.2 295.2-3.4 280.7 2.7 268.9zM118.9 65.6L137 74.2l8.7-17.4c4-7.9 13.6-11.1 21.5-7.2s11.1 13.6 7.2 21.5l-8.5 16.9 54.7 26.2c1.5-.7 3.1-1.4 4.7-2.1l83.4-33.4c34.2-13.7 72.8 4.2 84.5 39.2l17.1 51.2 52.1 26.1c15.8 7.9 22.2 27.1 14.3 42.9s-27.1 22.2-42.9 14.3l-58.1-29c-11.4-5.7-20-15.7-24.1-27.8l-5.8-17.3-27.3 12.1-6.8 3-6.7-3.2L151.5 116.7l-9.2 18.4c-4 7.9-13.6 11.1-21.5 7.2s-11.1-13.6-7.2-21.5l9-18-17.6-8.4c-8-3.8-11.3-13.4-7.5-21.3s13.4-11.3 21.3-7.5z')))]), new MapPathGroupConfig('Other paths', [new MapPathGroupThemeConfig([],\n    // Match all\n    new PathThemeConfig('var(--bs-secondary)'))])];\n  }\n};\n__decorate([ConfigProperty({\n  onNewValue: (value, config) => {\n    if (value === false) {\n      config.MetaFile.gpx = false;\n    }\n  },\n  tags: {\n    priority: ConfigPriority.advanced,\n    name: $localize`Enable`\n  }\n}), __metadata(\"design:type\", Boolean)], ClientMapConfig.prototype, \"enabled\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Image Markers`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Map will use thumbnail images as markers instead of the default pin.`\n}), __metadata(\"design:type\", Boolean)], ClientMapConfig.prototype, \"useImageMarkers\", void 0);\n__decorate([ConfigProperty({\n  type: MapProviders,\n  tags: {\n    name: $localize`Map Provider`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", Number)], ClientMapConfig.prototype, \"mapProvider\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Mapbox access token`,\n    relevant: c => c.mapProvider === MapProviders.Mapbox,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`MapBox needs an access token to work, create one at https://www.mapbox.com.`\n}), __metadata(\"design:type\", String)], ClientMapConfig.prototype, \"mapboxAccessToken\", void 0);\n__decorate([ConfigProperty({\n  arrayType: MapLayers,\n  description: $localize`The map module will use these urls to fetch the map tiles.`,\n  tags: {\n    relevant: c => c.mapProvider === MapProviders.Custom,\n    name: $localize`Custom Layers`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", Array)], ClientMapConfig.prototype, \"customLayers\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Max Preview Markers`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Maximum number of markers to be shown on the map preview on the gallery page.`\n}), __metadata(\"design:type\", Number)], ClientMapConfig.prototype, \"maxPreviewMarkers\", void 0);\n__decorate([ConfigProperty({\n  arrayType: MapPathGroupConfig,\n  tags: {\n    name: $localize`Path theme groups`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Markers are grouped and themed by these settings`\n}), __metadata(\"design:type\", Array)], ClientMapConfig.prototype, \"MapPathGroupConfig\", void 0);\nClientMapConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientMapConfig);\nexport { ClientMapConfig };\nlet ClientThumbnailConfig = class ClientThumbnailConfig {\n  constructor() {\n    this.iconSize = 45;\n    this.personThumbnailSize = 200;\n    this.thumbnailSizes = [240, 480];\n    this.concurrentThumbnailGenerations = 1;\n  }\n  /**\r\n   * Generates a map for bitwise operation from icon and normal thumbnails\r\n   */\n  generateThumbnailMap() {\n    const m = {};\n    [this.iconSize, ...this.thumbnailSizes.sort()].forEach((v, i) => {\n      m[v] = Math.pow(2, i + 1);\n    });\n    return m;\n  }\n  /**\r\n   * Generates a map for bitwise operation from icon and normal thumbnails\r\n   */\n  generateThumbnailMapEntries() {\n    return Object.entries(this.generateThumbnailMap()).map(v => ({\n      size: parseInt(v[0]),\n      bit: v[1]\n    }));\n  }\n};\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  max: 100,\n  tags: {\n    name: $localize`Map Icon size`,\n    unit: 'px',\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Icon size (used on maps).`\n}), __metadata(\"design:type\", Number)], ClientThumbnailConfig.prototype, \"iconSize\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Person thumbnail size`,\n    unit: 'px',\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Person (face) thumbnail size.`\n}), __metadata(\"design:type\", Number)], ClientThumbnailConfig.prototype, \"personThumbnailSize\", void 0);\n__decorate([ConfigProperty({\n  arrayType: 'unsignedInt',\n  tags: {\n    name: $localize`Thumbnail sizes`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Size of the thumbnails. The best matching size will be generated. More sizes give better quality, but use more storage and CPU to render. If size is 240, that shorter side of the thumbnail will have 160 pixels.`\n}), __metadata(\"design:type\", Array)], ClientThumbnailConfig.prototype, \"thumbnailSizes\", void 0);\n__decorate([ConfigProperty({\n  volatile: true,\n  description: 'Updated to match he number of CPUs. This manny thumbnail will be concurrently generated.'\n}), __metadata(\"design:type\", Number)], ClientThumbnailConfig.prototype, \"concurrentThumbnailGenerations\", void 0);\nClientThumbnailConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientThumbnailConfig);\nexport { ClientThumbnailConfig };\nexport var NavigationLinkTypes = /*#__PURE__*/(() => {\n  (function (NavigationLinkTypes) {\n    NavigationLinkTypes[NavigationLinkTypes[\"gallery\"] = 1] = \"gallery\";\n    NavigationLinkTypes[NavigationLinkTypes[\"faces\"] = 2] = \"faces\";\n    NavigationLinkTypes[NavigationLinkTypes[\"albums\"] = 3] = \"albums\";\n    NavigationLinkTypes[NavigationLinkTypes[\"search\"] = 4] = \"search\";\n    NavigationLinkTypes[NavigationLinkTypes[\"url\"] = 5] = \"url\";\n  })(NavigationLinkTypes || (NavigationLinkTypes = {}));\n  return NavigationLinkTypes;\n})();\nlet NavigationLinkConfig = class NavigationLinkConfig {\n  constructor(type = NavigationLinkTypes.gallery, name, SearchQuery, url) {\n    this.type = NavigationLinkTypes.gallery;\n    this.type = type;\n    this.name = name;\n    this.SearchQuery = SearchQuery;\n    this.url = url;\n  }\n};\n__decorate([ConfigProperty({\n  type: NavigationLinkTypes,\n  tags: {\n    name: $localize`Type`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", Number)], NavigationLinkConfig.prototype, \"type\", void 0);\n__decorate([ConfigProperty({\n  type: 'string',\n  tags: {\n    name: $localize`Name`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", String)], NavigationLinkConfig.prototype, \"name\", void 0);\n__decorate([ConfigProperty({\n  type: 'object',\n  tags: {\n    name: $localize`SearchQuery`,\n    priority: ConfigPriority.advanced,\n    uiType: 'SearchQuery',\n    relevant: c => c.type === NavigationLinkTypes.search\n  }\n}), __metadata(\"design:type\", Object)], NavigationLinkConfig.prototype, \"SearchQuery\", void 0);\n__decorate([ConfigProperty({\n  type: 'string',\n  tags: {\n    name: $localize`Url`,\n    priority: ConfigPriority.advanced,\n    relevant: c => c.type === NavigationLinkTypes.url\n  }\n}), __metadata(\"design:type\", String)], NavigationLinkConfig.prototype, \"url\", void 0);\nNavigationLinkConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n}), __metadata(\"design:paramtypes\", [Number, String, Object, String])], NavigationLinkConfig);\nexport { NavigationLinkConfig };\nlet NavBarConfig = class NavBarConfig {\n  constructor() {\n    this.showItemCount = true;\n    this.links = [new NavigationLinkConfig(NavigationLinkTypes.gallery), new NavigationLinkConfig(NavigationLinkTypes.albums), new NavigationLinkConfig(NavigationLinkTypes.faces)];\n    this.NavbarShowDelay = 0.30;\n    this.NavbarHideDelay = 0.15;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Show item count`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Shows the number photos and videos on the navigation bar.`\n}), __metadata(\"design:type\", Boolean)], NavBarConfig.prototype, \"showItemCount\", void 0);\n__decorate([ConfigProperty({\n  arrayType: NavigationLinkConfig,\n  tags: {\n    name: $localize`Links`,\n    priority: ConfigPriority.advanced,\n    experimental: true,\n    githubIssue: 174\n  },\n  description: $localize`Visible links in the top menu.`\n}), __metadata(\"design:type\", Array)], NavBarConfig.prototype, \"links\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Navbar show delay`,\n    priority: ConfigPriority.underTheHood\n  },\n  type: 'positiveFloat',\n  description: $localize`Ratio of the page height, you need to scroll to show the navigation bar.`\n}), __metadata(\"design:type\", Number)], NavBarConfig.prototype, \"NavbarShowDelay\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Navbar hide delay`,\n    priority: ConfigPriority.underTheHood\n  },\n  type: 'positiveFloat',\n  description: $localize`Ratio of the page height, you need to scroll to hide the navigation bar.`\n}), __metadata(\"design:type\", Number)], NavBarConfig.prototype, \"NavbarHideDelay\", void 0);\nNavBarConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], NavBarConfig);\nexport { NavBarConfig };\nlet ClientLightboxConfig = class ClientLightboxConfig {\n  constructor() {\n    this.defaultSlideshowSpeed = 5;\n    this.captionAlwaysOn = false;\n    this.facesAlwaysOn = false;\n    this.loopVideos = false;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Default slideshow speed`,\n    priority: ConfigPriority.underTheHood,\n    githubIssue: 570,\n    unit: 's'\n  },\n  description: $localize`Default time interval for displaying a photo in the slide show.`\n}), __metadata(\"design:type\", Number)], ClientLightboxConfig.prototype, \"defaultSlideshowSpeed\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Always show captions`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`If enabled, lightbox will always show caption by default, not only on hover.`\n}), __metadata(\"design:type\", Boolean)], ClientLightboxConfig.prototype, \"captionAlwaysOn\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Always show faces`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`If enabled, lightbox will always show faces by default, not only on hover.`\n}), __metadata(\"design:type\", Boolean)], ClientLightboxConfig.prototype, \"facesAlwaysOn\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Loop Videos`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`If enabled, lightbox will loop videos by default.`\n}), __metadata(\"design:type\", Boolean)], ClientLightboxConfig.prototype, \"loopVideos\", void 0);\nClientLightboxConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientLightboxConfig);\nexport { ClientLightboxConfig };\nlet ThemeConfig = class ThemeConfig {\n  constructor(name, theme) {\n    this.name = name;\n    this.theme = theme;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Name`\n  },\n  description: $localize`Name of the theme`\n}), __metadata(\"design:type\", String)], ThemeConfig.prototype, \"name\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Theme`\n  },\n  description: $localize`Adds these css settings as it is to the end of the body tag of the page.`\n}), __metadata(\"design:type\", String)], ThemeConfig.prototype, \"theme\", void 0);\nThemeConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n}), __metadata(\"design:paramtypes\", [String, String])], ThemeConfig);\nexport { ThemeConfig };\nlet ThemesConfig = class ThemesConfig {\n  constructor() {\n    this.enabled = false;\n    this.defaultMode = ThemeModes.light;\n    this.selectedTheme = 'classic';\n    this.availableThemes = [new ThemeConfig('classic', ':root nav.navbar {\\n' + '--bs-navbar-color: rgba(255, 255, 255, 0.55);\\n' + '--bs-navbar-hover-color: rgba(255, 255, 255, 0.75);\\n' + '--bs-navbar-disabled-color: rgba(255, 255, 255, 0.25);\\n' + '--bs-navbar-active-color: #fff;\\n' + '--bs-navbar-brand-color: #fff;\\n' + '--bs-navbar-brand-hover-color: #fff;\\n' + '--bs-bg-opacity: 1;\\n' + 'background-color: rgba(var(--bs-dark-rgb), var(--bs-bg-opacity)) !important;\\n' + '}')];\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Enable`,\n    experimental: true,\n    githubIssue: 642\n  },\n  description: $localize`Enable themes and color modes.  Experimental until bootstrap v5.3 is only alpha.`\n}), __metadata(\"design:type\", Boolean)], ThemesConfig.prototype, \"enabled\", void 0);\n__decorate([ConfigProperty({\n  type: ThemeModes,\n  tags: {\n    name: $localize`Default theme mode`,\n    uiDisabled: sb => !sb.enabled\n  },\n  description: $localize`Sets the default theme mode that is used for the application.`\n}), __metadata(\"design:type\", Number)], ThemesConfig.prototype, \"defaultMode\", void 0);\n__decorate([ConfigProperty({\n  type: 'string',\n  tags: {\n    name: $localize`Selected theme`,\n    uiDisabled: sb => !sb.enabled,\n    uiType: 'ThemeSelector'\n  },\n  description: $localize`Selected theme to use on the site.`\n}), __metadata(\"design:type\", String)], ThemesConfig.prototype, \"selectedTheme\", void 0);\n__decorate([ConfigProperty({\n  arrayType: ThemeConfig,\n  tags: {\n    name: $localize`Selected theme css`,\n    uiDisabled: sb => !sb.enabled,\n    relevant: c => c.selectedTheme !== 'default',\n    uiType: 'SelectedThemeSettings'\n  },\n  description: $localize`Adds these css settings as it is to the end of the body tag of the page.`\n}), __metadata(\"design:type\", Array)], ThemesConfig.prototype, \"availableThemes\", void 0);\nThemesConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ThemesConfig);\nexport { ThemesConfig };\nlet ClientGalleryConfig = class ClientGalleryConfig {\n  constructor() {\n    this.enableCache = true;\n    this.enableOnScrollRendering = true;\n    this.defaultPhotoSortingMethod = SortingMethods.ascDate;\n    this.defaultSearchSortingMethod = SortingMethods.descDate;\n    this.enableDirectorySortingByDate = false;\n    this.enableOnScrollThumbnailPrioritising = true;\n    this.NavBar = new NavBarConfig();\n    this.captionFirstNaming = false; // shows the caption instead of the filename in the photo grid\n    this.enableDownloadZip = false;\n    this.enableDirectoryFlattening = false;\n    this.Lightbox = new ClientLightboxConfig();\n    this.Themes = new ThemesConfig();\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Cache`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Caches directory contents and search results for better performance.`\n}), __metadata(\"design:type\", Boolean)], ClientGalleryConfig.prototype, \"enableCache\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Scroll based thumbnail generation`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Those thumbnails get higher priority that are visible on the screen.`\n}), __metadata(\"design:type\", Boolean)], ClientGalleryConfig.prototype, \"enableOnScrollRendering\", void 0);\n__decorate([ConfigProperty({\n  type: SortingMethods,\n  tags: {\n    name: $localize`Default sorting`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Default sorting method for photo and video in a directory results.`\n}), __metadata(\"design:type\", Number)], ClientGalleryConfig.prototype, \"defaultPhotoSortingMethod\", void 0);\n__decorate([ConfigProperty({\n  type: SortingMethods,\n  tags: {\n    name: $localize`Default search sorting`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Default sorting method for photo and video in a search results.`\n}), __metadata(\"design:type\", Number)], ClientGalleryConfig.prototype, \"defaultSearchSortingMethod\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Sort directories by date`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`If enabled, directories will be sorted by date, like photos, otherwise by name. Directory date is the last modification time of that directory not the creation date of the oldest photo.`\n}), __metadata(\"design:type\", Boolean)], ClientGalleryConfig.prototype, \"enableDirectorySortingByDate\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`On scroll thumbnail prioritising`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Those thumbnails will be rendered first that are in view.`\n}), __metadata(\"design:type\", Boolean)], ClientGalleryConfig.prototype, \"enableOnScrollThumbnailPrioritising\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Navigation bar`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", NavBarConfig)], ClientGalleryConfig.prototype, \"NavBar\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Caption first naming`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Show the caption (IPTC 120) tags from the EXIF data instead of the filenames.`\n}), __metadata(\"design:type\", Boolean)], ClientGalleryConfig.prototype, \"captionFirstNaming\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Download Zip`,\n    priority: ConfigPriority.advanced,\n    experimental: true,\n    githubIssue: 52\n  },\n  description: $localize`Enable download zip of a directory contents Directory flattening. (Does not work for searches.)`\n}), __metadata(\"design:type\", Boolean)], ClientGalleryConfig.prototype, \"enableDownloadZip\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Directory flattening`,\n    priority: ConfigPriority.advanced,\n    experimental: true,\n    githubIssue: 174\n  },\n  description: $localize`Adds a button to flattens the file structure, by listing the content of all subdirectories. (Won't work if the gallery has multiple folders with the same path.)`\n}), __metadata(\"design:type\", Boolean)], ClientGalleryConfig.prototype, \"enableDirectoryFlattening\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Lightbox`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", ClientLightboxConfig)], ClientGalleryConfig.prototype, \"Lightbox\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Themes`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Pigallery2 uses Bootstrap 5.3 (https://getbootstrap.com/docs/5.3) for design (css, layout). In dark mode it sets 'data-bs-theme=\"dark\"' to the <html> to take advantage bootstrap's color modes. For theming, read more at: https://getbootstrap.com/docs/5.3/customize/color-modes/`\n}), __metadata(\"design:type\", ThemesConfig)], ClientGalleryConfig.prototype, \"Themes\", void 0);\nClientGalleryConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientGalleryConfig);\nexport { ClientGalleryConfig };\nlet ClientVideoConfig = class ClientVideoConfig {\n  constructor() {\n    this.enabled = true;\n    this.supportedFormatsWithTranscoding = ['avi', 'mkv', 'mov', 'wmv', 'flv', 'mts', 'm2ts', 'mpg', '3gp', 'm4v', 'mpeg', 'vob', 'divx', 'xvid', 'ts'];\n    // Browser supported video formats\n    // Read more:  https://www.w3schools.com/html/html5_video.asp\n    this.supportedFormats = ['mp4', 'webm', 'ogv', 'ogg'];\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Enable`,\n    priority: ConfigPriority.advanced,\n    uiResetNeeded: {\n      db: true\n    }\n  }\n}), __metadata(\"design:type\", Boolean)], ClientVideoConfig.prototype, \"enabled\", void 0);\n__decorate([ConfigProperty({\n  arrayType: 'string',\n  tags: {\n    name: $localize`Supported formats with transcoding`,\n    priority: ConfigPriority.underTheHood,\n    uiDisabled: sb => !sb.enabled,\n    uiResetNeeded: {\n      db: true\n    }\n  },\n  description: $localize`Video formats that are supported after transcoding (with the build-in ffmpeg support).`\n}), __metadata(\"design:type\", Array)], ClientVideoConfig.prototype, \"supportedFormatsWithTranscoding\", void 0);\n__decorate([ConfigProperty({\n  arrayType: 'string',\n  tags: {\n    name: $localize`Supported formats without transcoding`,\n    priority: ConfigPriority.underTheHood,\n    uiDisabled: sb => !sb.enabled,\n    uiResetNeeded: {\n      db: true\n    }\n  },\n  description: $localize`Video formats that are supported also without transcoding. Browser supported formats: https://www.w3schools.com/html/html5_video.asp`\n}), __metadata(\"design:type\", Array)], ClientVideoConfig.prototype, \"supportedFormats\", void 0);\nClientVideoConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientVideoConfig);\nexport { ClientVideoConfig };\nlet ClientPhotoConvertingConfig = class ClientPhotoConvertingConfig {\n  constructor() {\n    this.enabled = true;\n    this.loadFullImageOnZoom = true;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Enable`\n  },\n  description: $localize`Enable photo converting.`\n}), __metadata(\"design:type\", Boolean)], ClientPhotoConvertingConfig.prototype, \"enabled\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Load full resolution image on zoom.`,\n    priority: ConfigPriority.advanced,\n    uiDisabled: sc => !sc.enabled\n  },\n  description: $localize`Enables loading the full resolution image on zoom in the ligthbox (preview).`\n}), __metadata(\"design:type\", Boolean)], ClientPhotoConvertingConfig.prototype, \"loadFullImageOnZoom\", void 0);\nClientPhotoConvertingConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientPhotoConvertingConfig);\nexport { ClientPhotoConvertingConfig };\nlet ClientPhotoConfig = class ClientPhotoConfig {\n  constructor() {\n    this.Converting = new ClientPhotoConvertingConfig();\n    this.supportedFormats = ['gif', 'jpeg', 'jpg', 'jpe', 'png', 'webp', 'svg'];\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Photo converting`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", ClientPhotoConvertingConfig)], ClientPhotoConfig.prototype, \"Converting\", void 0);\n__decorate([ConfigProperty({\n  arrayType: 'string',\n  tags: {\n    name: $localize`Supported photo formats`,\n    priority: ConfigPriority.underTheHood,\n    uiResetNeeded: {\n      db: true\n    }\n  },\n  description: $localize`Photo formats that are supported. Browser needs to support these formats natively. Also sharp (libvips) package should be able to convert these formats.`\n}), __metadata(\"design:type\", Array)], ClientPhotoConfig.prototype, \"supportedFormats\", void 0);\nClientPhotoConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientPhotoConfig);\nexport { ClientPhotoConfig };\nlet ClientGPXCompressingConfig = class ClientGPXCompressingConfig {\n  constructor() {\n    this.enabled = true;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Enable GPX compressing`,\n    priority: ConfigPriority.advanced,\n    githubIssue: 504,\n    uiDisabled: (sc, c) => !c.Map.enabled\n  },\n  description: $localize`Enables lossy (based on delta time and distance. Too frequent points are removed) GPX compression.`\n}), __metadata(\"design:type\", Boolean)], ClientGPXCompressingConfig.prototype, \"enabled\", void 0);\nClientGPXCompressingConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientGPXCompressingConfig);\nexport { ClientGPXCompressingConfig };\nlet ClientMediaConfig = class ClientMediaConfig {\n  constructor() {\n    this.Thumbnail = new ClientThumbnailConfig();\n    this.Video = new ClientVideoConfig();\n    this.Photo = new ClientPhotoConfig();\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Thumbnail`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", ClientThumbnailConfig)], ClientMediaConfig.prototype, \"Thumbnail\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Video`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", ClientVideoConfig)], ClientMediaConfig.prototype, \"Video\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Photo`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", ClientPhotoConfig)], ClientMediaConfig.prototype, \"Photo\", void 0);\nClientMediaConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientMediaConfig);\nexport { ClientMediaConfig };\nlet ClientMetaFileConfig = class ClientMetaFileConfig {\n  constructor() {\n    this.gpx = true;\n    this.GPXCompressing = new ClientGPXCompressingConfig();\n    this.markdown = true;\n    this.pg2conf = true;\n    this.supportedFormats = ['gpx', 'pg2conf', 'md'];\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`*.gpx files`,\n    priority: ConfigPriority.advanced,\n    uiResetNeeded: {\n      db: true\n    },\n    uiDisabled: (sb, c) => !c.Map.enabled\n  },\n  description: $localize`Reads *.gpx files and renders them on the map.`\n}), __metadata(\"design:type\", Boolean)], ClientMetaFileConfig.prototype, \"gpx\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`GPX compression`,\n    priority: ConfigPriority.advanced,\n    uiDisabled: (sb, c) => !c.Map.enabled || !sb.gpx\n  }\n}), __metadata(\"design:type\", ClientGPXCompressingConfig)], ClientMetaFileConfig.prototype, \"GPXCompressing\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Markdown files`,\n    uiResetNeeded: {\n      db: true\n    },\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Reads *.md files in a directory and shows the next to the map.`\n}), __metadata(\"design:type\", Boolean)], ClientMetaFileConfig.prototype, \"markdown\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`*.pg2conf files`,\n    uiResetNeeded: {\n      db: true\n    },\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Reads *.pg2conf files (You can use it for custom sorting and saved search (albums)).`\n}), __metadata(\"design:type\", Boolean)], ClientMetaFileConfig.prototype, \"pg2conf\", void 0);\n__decorate([ConfigProperty({\n  arrayType: 'string',\n  tags: {\n    name: $localize`Supported formats`,\n    uiResetNeeded: {\n      db: true\n    },\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`The app will read and process these files.`\n}), __metadata(\"design:type\", Array)], ClientMetaFileConfig.prototype, \"supportedFormats\", void 0);\nClientMetaFileConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientMetaFileConfig);\nexport { ClientMetaFileConfig };\nlet ClientFacesConfig = class ClientFacesConfig {\n  constructor() {\n    this.enabled = true;\n    this.keywordsToPersons = true;\n    this.writeAccessMinRole = UserRoles.Admin;\n    this.readAccessMinRole = UserRoles.User;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Enabled`,\n    priority: ConfigPriority.advanced,\n    uiResetNeeded: {\n      db: true\n    }\n  }\n}), __metadata(\"design:type\", Boolean)], ClientFacesConfig.prototype, \"enabled\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Override keywords`,\n    priority: ConfigPriority.underTheHood,\n    uiResetNeeded: {\n      db: true\n    }\n  },\n  description: $localize`If a photo has the same face (person) name and keyword, the app removes the duplicate, keeping the face only.`\n}), __metadata(\"design:type\", Boolean)], ClientFacesConfig.prototype, \"keywordsToPersons\", void 0);\n__decorate([ConfigProperty({\n  type: UserRoles,\n  tags: {\n    name: $localize`Face starring right`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Required minimum right to star (favourite) a face.`\n}), __metadata(\"design:type\", Number)], ClientFacesConfig.prototype, \"writeAccessMinRole\", void 0);\n__decorate([ConfigProperty({\n  type: UserRoles,\n  tags: {\n    name: $localize`Face listing right`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Required minimum right to show the faces tab.`\n}), __metadata(\"design:type\", Number)], ClientFacesConfig.prototype, \"readAccessMinRole\", void 0);\nClientFacesConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientFacesConfig);\nexport { ClientFacesConfig };\nlet ClientServiceConfig = class ClientServiceConfig {\n  constructor() {\n    this.applicationTitle = 'PiGallery 2';\n    this.publicUrl = '';\n    this.urlBase = '';\n    this.apiPath = '/pgapi';\n    this.customHTMLHead = '';\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Page title`\n  }\n}), __metadata(\"design:type\", String)], ClientServiceConfig.prototype, \"applicationTitle\", void 0);\n__decorate([ConfigProperty({\n  description: $localize`If you access the page form local network its good to know the public url for creating sharing link.`,\n  tags: {\n    name: $localize`Page public url`,\n    hint: typeof window !== 'undefined' ? window?.origin : '',\n    uiOptional: true\n  }\n}), __metadata(\"design:type\", String)], ClientServiceConfig.prototype, \"publicUrl\", void 0);\n__decorate([ConfigProperty({\n  description: $localize`If you access the gallery under a sub url (like: http://mydomain.com/myGallery), set it here. If it is not working you might miss the '/' from the beginning of the url.`,\n  tags: {\n    name: $localize`Url Base`,\n    hint: '/myGallery',\n    uiResetNeeded: {\n      server: true\n    },\n    priority: ConfigPriority.advanced,\n    uiOptional: true\n  }\n}), __metadata(\"design:type\", String)], ClientServiceConfig.prototype, \"urlBase\", void 0);\n__decorate([ConfigProperty({\n  description: 'PiGallery api path.',\n  tags: {\n    name: $localize`Api path`,\n    uiResetNeeded: {\n      server: true\n    },\n    priority: ConfigPriority.underTheHood\n  }\n}), __metadata(\"design:type\", String)], ClientServiceConfig.prototype, \"apiPath\", void 0);\n__decorate([ConfigProperty({\n  arrayType: 'string',\n  volatile: true\n}), __metadata(\"design:type\", Array)], ClientServiceConfig.prototype, \"languages\", void 0);\n__decorate([ConfigProperty({\n  description: $localize`Injects the content of this between the <head></head> HTML tags of the app. (You can use it add analytics or custom code to the app).`,\n  tags: {\n    name: $localize`Custom HTML Head`,\n    priority: ConfigPriority.advanced,\n    uiResetNeeded: {\n      server: true\n    },\n    githubIssue: 404,\n    uiOptional: true\n  }\n}), __metadata(\"design:type\", String)], ClientServiceConfig.prototype, \"customHTMLHead\", void 0);\nClientServiceConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientServiceConfig);\nexport { ClientServiceConfig };\nlet ClientUserConfig = class ClientUserConfig {\n  constructor() {\n    this.authenticationRequired = true;\n    this.unAuthenticatedUserRole = UserRoles.Admin;\n  }\n};\n__decorate([ConfigProperty({\n  onNewValue: (value, config) => {\n    if (config && value === false) {\n      config.Sharing.enabled = false;\n    }\n  },\n  tags: {\n    uiResetNeeded: {\n      server: true\n    },\n    name: $localize`Password protection`\n  },\n  description: $localize`Enables user management with login to password protect the gallery.`\n}), __metadata(\"design:type\", Boolean)], ClientUserConfig.prototype, \"authenticationRequired\", void 0);\n__decorate([ConfigProperty({\n  type: UserRoles,\n  tags: {\n    name: $localize`Default user right`,\n    priority: ConfigPriority.advanced,\n    uiResetNeeded: {\n      server: true\n    },\n    relevant: c => c.authenticationRequired === false\n  },\n  description: $localize`Default user right when password protection is disabled.`\n}), __metadata(\"design:type\", Number)], ClientUserConfig.prototype, \"unAuthenticatedUserRole\", void 0);\nClientUserConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientUserConfig);\nexport { ClientUserConfig };\nlet ClientConfig = class ClientConfig {\n  constructor() {\n    this.Server = new ClientServiceConfig();\n    this.Users = new ClientUserConfig();\n    this.Gallery = new ClientGalleryConfig();\n    this.Media = new ClientMediaConfig();\n    this.MetaFile = new ClientMetaFileConfig();\n    this.Album = new ClientAlbumConfig();\n    this.Search = new ClientSearchConfig();\n    this.Sharing = new ClientSharingConfig();\n    this.Map = new ClientMapConfig();\n    this.Faces = new ClientFacesConfig();\n    this.RandomPhoto = new ClientRandomPhotoConfig();\n  }\n};\n__decorate([ConfigProperty(), __metadata(\"design:type\", ClientServiceConfig)], ClientConfig.prototype, \"Server\", void 0);\n__decorate([ConfigProperty(), __metadata(\"design:type\", ClientUserConfig)], ClientConfig.prototype, \"Users\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Gallery`,\n    uiIcon: 'browser'\n  }\n}), __metadata(\"design:type\", ClientGalleryConfig)], ClientConfig.prototype, \"Gallery\", void 0);\n__decorate([ConfigProperty(), __metadata(\"design:type\", ClientMediaConfig)], ClientConfig.prototype, \"Media\", void 0);\n__decorate([ConfigProperty(), __metadata(\"design:type\", ClientMetaFileConfig)], ClientConfig.prototype, \"MetaFile\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Album`,\n    uiIcon: 'grid-two-up',\n    uiJob: [{\n      job: DefaultsJobs[DefaultsJobs['Album Reset']],\n      hideProgress: true\n    }]\n  }\n}), __metadata(\"design:type\", ClientAlbumConfig)], ClientConfig.prototype, \"Album\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Search`,\n    uiIcon: 'magnifying-glass'\n  }\n}), __metadata(\"design:type\", ClientSearchConfig)], ClientConfig.prototype, \"Search\", void 0);\n__decorate([ConfigProperty(), __metadata(\"design:type\", ClientSharingConfig)], ClientConfig.prototype, \"Sharing\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Map`,\n    uiIcon: 'map-marker'\n  }\n}), __metadata(\"design:type\", ClientMapConfig)], ClientConfig.prototype, \"Map\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Faces`,\n    uiIcon: 'people'\n  }\n}), __metadata(\"design:type\", ClientFacesConfig)], ClientConfig.prototype, \"Faces\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Random photo`,\n    uiIcon: 'random',\n    githubIssue: 392\n  },\n  description: $localize`This feature enables you to generate 'random photo' urls. That URL returns a photo random selected from your gallery. You can use the url with 3rd party application like random changing desktop background. Note: With the current implementation, random link also requires login.`\n}), __metadata(\"design:type\", ClientRandomPhotoConfig)], ClientConfig.prototype, \"RandomPhoto\", void 0);\nClientConfig = __decorate([SubConfigClass({\n  tags: {\n    client: true\n  },\n  softReadonly: true\n})], ClientConfig);\nexport { ClientConfig };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}