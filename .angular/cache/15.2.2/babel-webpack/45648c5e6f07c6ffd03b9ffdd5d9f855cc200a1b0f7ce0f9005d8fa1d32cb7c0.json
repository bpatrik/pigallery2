{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Loader = void 0;\nclass Loader {\n  static flatToObjHierarchy(vars) {\n    const cliArgsObj = {};\n    Object.keys(vars).forEach(key => {\n      const keyArray = key.split('-');\n      const value = vars[key];\n      // recursive settings\n      const setObject = (object, keyArr, val) => {\n        const k = keyArr.shift();\n        object[k] = object[k] || {};\n        if (keyArr.length === 0) {\n          // convert to boolean\n          if (val.toLowerCase && val.toLowerCase() === 'false') {\n            val = false;\n          }\n          if (val.toLowerCase && val.toLowerCase() === 'true') {\n            val = true;\n          }\n          object[k] = val;\n          return;\n        }\n        return setObject(object[k], keyArr, val);\n      };\n      setObject(cliArgsObj, keyArray, value);\n    });\n    return cliArgsObj;\n  }\n  static processHierarchyVar(configObject, vars) {\n    return this.loadObject(configObject, Loader.flatToObjHierarchy(vars));\n  }\n  static loadObject(targetObject, sourceObject) {\n    let changed = false;\n    Object.keys(sourceObject).forEach(key => {\n      if (typeof targetObject[key] === 'undefined') {\n        return;\n      }\n      if (Array.isArray(targetObject[key])) {\n        if (targetObject[key] !== sourceObject[key]) {\n          targetObject[key] = sourceObject[key];\n          changed = true;\n        }\n        return;\n      }\n      if (typeof targetObject[key] === 'object' && targetObject[key] != null) {\n        changed = this.loadObject(targetObject[key], sourceObject[key]) || changed;\n        return;\n      }\n      if (targetObject[key] !== sourceObject[key]) {\n        targetObject[key] = sourceObject[key];\n        changed = true;\n      }\n      return;\n    });\n    return changed;\n  }\n}\nexports.Loader = Loader;\n//# sourceMappingURL=Loader.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}