{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConfigProperty = void 0;\nconst Utils_1 = require(\"../../Utils\");\nfunction ConfigProperty(options = {}) {\n  return (target, property) => {\n    let type = options.type;\n    if (typeof type === 'undefined') {\n      type = Reflect.getMetadata('design:type', target, property);\n    }\n    switch (type) {\n      case Array:\n        type = 'array';\n        break;\n      case Number:\n        type = 'float';\n        break;\n      case String:\n        type = 'string';\n        break;\n      case Boolean:\n        type = 'boolean';\n        break;\n      case Object:\n        type = 'object';\n        break;\n      case Date:\n        type = 'date';\n        break;\n    }\n    const state = target.__state || {};\n    state[property] = options;\n    state[property].type = type;\n    const isEnumType = Utils_1.Utils.isEnum(type);\n    if (isEnumType) {\n      state[property].isEnumType = isEnumType;\n    }\n    const isEnumArrayType = Utils_1.Utils.isEnum(state[property].arrayType);\n    if (isEnumArrayType) {\n      state[property].isEnumArrayType = isEnumArrayType;\n    }\n    const isConfigType = type.prototype && typeof type.prototype.__loadJSONObject === 'function' && typeof type.prototype.toJSON === 'function';\n    if (isConfigType) {\n      state[property].isConfigType = isConfigType;\n    }\n    const isConfigArrayType = state[property].arrayType && state[property].arrayType.prototype && typeof state[property].arrayType.prototype.__loadJSONObject === 'function' && typeof state[property].arrayType.prototype.toJSON === 'function';\n    if (isConfigArrayType) {\n      state[property].isConfigArrayType = isConfigArrayType;\n    }\n    if (type === 'unsignedInt' || type === 'positiveFloat') {\n      state[property].min = Math.max(state[property].min || 0, 0);\n    }\n    target.__state = state;\n    return {\n      set: function (value) {\n        this.__setAndValidateFromRoot(property, this.__validate(property, value));\n      },\n      get: function () {\n        return this.__state[property].value;\n      },\n      enumerable: true,\n      configurable: true\n    };\n  };\n}\nexports.ConfigProperty = ConfigProperty;\n//# sourceMappingURL=ConfigPropoerty.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}