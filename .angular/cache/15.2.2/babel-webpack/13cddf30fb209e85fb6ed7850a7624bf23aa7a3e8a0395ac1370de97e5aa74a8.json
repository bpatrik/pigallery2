{"ast":null,"code":"import _asyncToGenerator from \"E:/work/pigallery2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { NetworkService } from '../../model/network/network.service';\nimport { ContentWrapper } from '../../../../common/entities/ConentWrapper';\nimport { GalleryCacheService } from './cache.gallery.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { Config } from '../../../../common/config/public/Config';\nimport { ShareService } from './share.service';\nimport { NavigationService } from '../../model/navigation.service';\nimport { QueryParams } from '../../../../common/QueryParams';\nimport { ErrorCodes } from '../../../../common/entities/Error';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../model/network/network.service\";\nimport * as i2 from \"./cache.gallery.service\";\nimport * as i3 from \"./share.service\";\nimport * as i4 from \"../../model/navigation.service\";\nexport let ContentService = /*#__PURE__*/(() => {\n  class ContentService {\n    constructor(networkService, galleryCacheService, shareService, navigationService) {\n      this.networkService = networkService;\n      this.galleryCacheService = galleryCacheService;\n      this.shareService = shareService;\n      this.navigationService = navigationService;\n      this.lastRequest = {\n        directory: null\n      };\n      this.ongoingSearch = null;\n      this.content = new BehaviorSubject(new ContentWrapperWithError());\n      this.directoryContent = this.content.pipe(map(c => c.directory ? c.directory : c.searchResult));\n    }\n    setContent(content) {\n      this.content.next(content);\n    }\n    loadDirectory(directoryName) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        // load from cache\n        const cw = _this.galleryCacheService.getDirectory(directoryName);\n        ContentWrapper.unpack(cw);\n        _this.setContent(cw);\n        _this.lastRequest.directory = directoryName;\n        // prepare server request\n        const params = {};\n        if (Config.Sharing.enabled === true) {\n          if (_this.shareService.isSharing()) {\n            params[QueryParams.gallery.sharingKey_query] = _this.shareService.getSharingKey();\n          }\n        }\n        if (cw.directory && cw.directory.lastModified && cw.directory.lastScanned && !cw.directory.isPartial) {\n          params[QueryParams.gallery.knownLastModified] = cw.directory.lastModified;\n          params[QueryParams.gallery.knownLastScanned] = cw.directory.lastScanned;\n        }\n        try {\n          const cw = yield _this.networkService.getJson('/gallery/content/' + encodeURIComponent(directoryName), params);\n          if (!cw || cw.notModified === true) {\n            return;\n          }\n          _this.galleryCacheService.setDirectory(cw); // save it before adding references\n          if (_this.lastRequest.directory !== directoryName) {\n            return;\n          }\n          ContentWrapper.unpack(cw);\n          _this.lastDirectory = cw.directory;\n          _this.setContent(cw);\n        } catch (e) {\n          console.error(e);\n          _this.navigationService.toGallery().catch(console.error);\n        }\n      })();\n    }\n    search(query) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        if (_this2.searchId != null) {\n          clearTimeout(_this2.searchId);\n        }\n        _this2.ongoingSearch = query;\n        _this2.setContent(new ContentWrapperWithError());\n        let cw = _this2.galleryCacheService.getSearch(JSON.parse(query));\n        if (!cw || cw.searchResult == null) {\n          try {\n            cw = yield _this2.networkService.getJson('/search/' + query);\n            _this2.galleryCacheService.setSearch(cw);\n          } catch (e) {\n            if (e.code === ErrorCodes.LocationLookUp_ERROR) {\n              cw.error = 'Cannot find location: ' + e.message;\n            } else {\n              throw e;\n            }\n          }\n        }\n        if (_this2.ongoingSearch !== query) {\n          return;\n        }\n        ContentWrapper.unpack(cw);\n        _this2.setContent(cw);\n      })();\n    }\n    isSearchResult() {\n      return !!this.content.value.searchResult;\n    }\n  }\n  ContentService.ɵfac = function ContentService_Factory(t) {\n    return new (t || ContentService)(i0.ɵɵinject(i1.NetworkService), i0.ɵɵinject(i2.GalleryCacheService), i0.ɵɵinject(i3.ShareService), i0.ɵɵinject(i4.NavigationService));\n  };\n  ContentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContentService,\n    factory: ContentService.ɵfac\n  });\n  return ContentService;\n})();\nexport class ContentWrapperWithError extends ContentWrapper {}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}