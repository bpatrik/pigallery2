{"ast":null,"code":"import _asyncToGenerator from \"E:/work/pigallery2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, first } from 'rxjs';\nimport { NetworkService } from '../../model/network/network.service';\nimport { WebConfig } from '../../../../common/config/private/WebConfig';\nimport { WebConfigClassBuilder } from 'typeconfig/src/decorators/builders/WebConfigClassBuilder';\nimport { ConfigPriority } from '../../../../common/config/public/ClientConfig';\nimport { CookieNames } from '../../../../common/CookieNames';\nimport { CookieService } from 'ngx-cookie-service';\nimport { DefaultsJobs } from '../../../../common/entities/job/JobDTO';\nimport { ScheduledJobsService } from './scheduled-jobs.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../model/network/network.service\";\nimport * as i2 from \"./scheduled-jobs.service\";\nimport * as i3 from \"ngx-cookie-service\";\nexport let SettingsService = /*#__PURE__*/(() => {\n  class SettingsService {\n    constructor(networkService, jobsService, cookieService) {\n      this.networkService = networkService;\n      this.jobsService = jobsService;\n      this.cookieService = cookieService;\n      this.configPriority = ConfigPriority.basic;\n      this.fetchingSettings = false;\n      this.statistic = new BehaviorSubject(null);\n      this.settings = new BehaviorSubject(WebConfigClassBuilder.attachPrivateInterface(new WebConfig()));\n      this.getSettings().catch(console.error);\n      if (this.cookieService.check(CookieNames.configPriority)) {\n        this.configPriority = parseInt(this.cookieService.get(CookieNames.configPriority));\n      }\n      this.settings.pipe(first()).subscribe(() => {\n        this.loadStatistic();\n      });\n      this.jobsService.onJobFinish.subscribe(jobName => {\n        if (jobName === DefaultsJobs[DefaultsJobs.Indexing] || jobName === DefaultsJobs[DefaultsJobs['Gallery Reset']]) {\n          this.loadStatistic();\n        }\n      });\n    }\n    getSettings() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if (_this.fetchingSettings === true) {\n          return;\n        }\n        _this.fetchingSettings = true;\n        try {\n          const wcg = WebConfigClassBuilder.attachPrivateInterface(new WebConfig());\n          wcg.load(yield _this.networkService.getJson('/settings'));\n          _this.settings.next(wcg);\n        } catch (e) {\n          console.error(e);\n        }\n        _this.fetchingSettings = false;\n      })();\n    }\n    updateSettings(settings, settingsPath) {\n      return this.networkService.putJson('/settings', {\n        settings,\n        settingsPath\n      });\n    }\n    configPriorityChanged() {\n      // save it for some years\n      this.cookieService.set(CookieNames.configPriority, this.configPriority.toString(), 365 * 50);\n    }\n    loadStatistic() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        _this2.statistic.next(yield _this2.networkService.getJson('/admin/statistic'));\n      })();\n    }\n  }\n  SettingsService.ɵfac = function SettingsService_Factory(t) {\n    return new (t || SettingsService)(i0.ɵɵinject(i1.NetworkService), i0.ɵɵinject(i2.ScheduledJobsService), i0.ɵɵinject(i3.CookieService));\n  };\n  SettingsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SettingsService,\n    factory: SettingsService.ɵfac\n  });\n  return SettingsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}