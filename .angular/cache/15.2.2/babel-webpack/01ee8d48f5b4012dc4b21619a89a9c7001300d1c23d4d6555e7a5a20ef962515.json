{"ast":null,"code":"import { ElementRef, EventEmitter } from '@angular/core';\nimport { GridMedia } from '../../grid/GridMedia';\nimport { MediaDTOUtils } from '../../../../../../common/entities/MediaDTO';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { SupportedFormats } from '../../../../../../common/SupportedFormats';\nimport { Config } from '../../../../../../common/config/public/Config';\nimport { LightboxService } from '../lightbox.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../lightbox.service\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = [\"video\"];\nfunction GalleryLightboxMediaComponent_img_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"width\", ctx_r1.imageSize.width, \"%\")(\"height\", ctx_r1.imageSize.height, \"%\")(\"transform\", ctx_r1.ImageTransform);\n    i0.ɵɵproperty(\"src\", ctx_r1.thumbnailSrc, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction GalleryLightboxMediaComponent_img_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"img\", 6);\n    i0.ɵɵlistener(\"load\", function GalleryLightboxMediaComponent_img_3_Template_img_load_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onImageLoad());\n    })(\"error\", function GalleryLightboxMediaComponent_img_3_Template_img_error_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onImageError());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"width\", ctx_r2.imageSize.width, \"%\")(\"height\", ctx_r2.imageSize.height, \"%\")(\"transform\", ctx_r2.ImageTransform);\n    i0.ɵɵproperty(\"src\", ctx_r2.photo.src, i0.ɵɵsanitizeUrl)(\"alt\", ctx_r2.gridMedia.media.name);\n  }\n}\nfunction GalleryLightboxMediaComponent_video_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"video\", 7, 8);\n    i0.ɵɵlistener(\"loadstart\", function GalleryLightboxMediaComponent_video_4_Template_video_loadstart_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onImageLoad());\n    })(\"error\", function GalleryLightboxMediaComponent_video_4_Template_video_error_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onImageError());\n    })(\"timeupdate\", function GalleryLightboxMediaComponent_video_4_Template_video_timeupdate_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.onVideoProgress());\n    });\n    i0.ɵɵelementStart(2, \"source\", 9);\n    i0.ɵɵlistener(\"error\", function GalleryLightboxMediaComponent_video_4_Template_source_error_2_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onSourceError());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" Something went wrong. \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"width\", ctx_r3.imageSize.width, \"%\")(\"height\", ctx_r3.imageSize.height, \"%\");\n    i0.ɵɵproperty(\"loop\", ctx_r3.lightboxService.loopVideos);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", ctx_r3.gridMedia.getBestFitMediaPath(), i0.ɵɵsanitizeUrl);\n  }\n}\nexport let GalleryLightboxMediaComponent = /*#__PURE__*/(() => {\n  class GalleryLightboxMediaComponent {\n    constructor(elementRef, lightboxService, sanitizer) {\n      this.elementRef = elementRef;\n      this.lightboxService = lightboxService;\n      this.sanitizer = sanitizer;\n      this.loadMedia = false; // prevents loading media\n      this.windowAspect = 1;\n      this.zoom = 1;\n      this.drag = {\n        x: 0,\n        y: 0\n      };\n      this.videoSourceError = new EventEmitter();\n      this.prevGirdPhoto = null;\n      this.imageSize = {\n        width: 'auto',\n        height: '100'\n      };\n      this.nextImage = new Image();\n      // do not skip to the next photo if not both are loaded (or resulted in an error)\n      this.imageLoadFinished = {\n        this: false,\n        next: false\n      };\n      this.thumbnailSrc = null;\n      this.photo = {\n        src: null,\n        isBestFit: null\n      };\n      this.transcodeNeedVideos = SupportedFormats.TranscodeNeed.Videos;\n      // if media not loaded, show thumbnail\n      this.mediaLoaded = false;\n      this.videoProgress = 0;\n    }\n    get ImageTransform() {\n      return this.sanitizer.bypassSecurityTrustStyle('scale(' + this.zoom + ') translate(calc(' + -50 / this.zoom + '% + ' + this.drag.x / this.zoom + 'px), calc(' + -50 / this.zoom + '% + ' + this.drag.y / this.zoom + 'px))');\n    }\n    get VideoProgress() {\n      return this.videoProgress;\n    }\n    set VideoProgress(value) {\n      if (!this.video && value === null && typeof value === 'undefined') {\n        return;\n      }\n      this.video.nativeElement.currentTime = this.video.nativeElement.duration * (value / 100);\n      if (this.video.nativeElement.paused) {\n        this.video.nativeElement.play().catch(console.error);\n      }\n    }\n    get VideoVolume() {\n      if (!this.video) {\n        return 1;\n      }\n      return this.video.nativeElement.volume;\n    }\n    set VideoVolume(value) {\n      if (!this.video) {\n        return;\n      }\n      this.video.nativeElement.muted = false;\n      this.video.nativeElement.volume = value;\n    }\n    get Muted() {\n      if (!this.video) {\n        return false;\n      }\n      return this.video.nativeElement.muted;\n    }\n    get Paused() {\n      if (!this.video) {\n        return true;\n      }\n      return this.video.nativeElement.paused;\n    }\n    get ThumbnailUrl() {\n      if (this.gridMedia.isThumbnailAvailable() === true) {\n        return this.gridMedia.getThumbnailPath();\n      }\n      if (this.gridMedia.isReplacementThumbnailAvailable() === true) {\n        return this.gridMedia.getReplacementThumbnailPath();\n      }\n      return null;\n    }\n    ngOnChanges() {\n      // media changed\n      if (this.prevGirdPhoto !== this.gridMedia) {\n        this.prevGirdPhoto = this.gridMedia;\n        this.thumbnailSrc = null;\n        this.photo.src = null;\n        this.nextImage.src = '';\n        this.nextImage.onload = null;\n        this.nextImage.onerror = null;\n        this.mediaLoaded = false;\n        this.imageLoadFinished = {\n          this: false,\n          next: false\n        };\n      }\n      this.setImageSize();\n      if (this.thumbnailSrc == null && this.gridMedia && this.ThumbnailUrl !== null) {\n        this.thumbnailSrc = this.ThumbnailUrl;\n      }\n      this.loadPhoto();\n    }\n    mute() {\n      if (!this.video) {\n        return;\n      }\n      this.video.nativeElement.muted = !this.video.nativeElement.muted;\n    }\n    playPause() {\n      if (!this.video) {\n        return;\n      }\n      if (this.video.nativeElement.paused) {\n        this.video.nativeElement.play().catch(console.error);\n      } else {\n        this.video.nativeElement.pause();\n      }\n    }\n    onImageError() {\n      // TODO:handle error\n      this.imageLoadFinished.this = true;\n      console.error('Error: cannot load media for lightbox url: ' + this.gridMedia.getBestFitMediaPath());\n      this.loadNextPhoto();\n    }\n    onImageLoad() {\n      this.imageLoadFinished.this = true;\n      this.mediaLoaded = true;\n      this.loadNextPhoto();\n    }\n    showThumbnail() {\n      return this.gridMedia && !this.mediaLoaded && this.thumbnailSrc !== null && (this.gridMedia.isThumbnailAvailable() || this.gridMedia.isReplacementThumbnailAvailable());\n    }\n    onSourceError() {\n      this.mediaLoaded = false;\n      this.videoSourceError.emit();\n    }\n    /**\r\n     * Loads next photo to faster show it on navigation.\r\n     * Called after the current photo is loaded\r\n     * @private\r\n     */\n    loadNextPhoto() {\n      if (!this.nextGridMedia || !this.loadMedia) {\n        return;\n      }\n      // Videos do not support preloading\n      if (!this.nextGridMedia.isPhoto()) {\n        this.imageLoadFinished.next = true;\n        return;\n      }\n      if (Config.Media.Photo.Converting.enabled === true) {\n        this.nextImage.src = this.nextGridMedia.getBestFitMediaPath();\n      } else {\n        this.nextImage.src = this.nextGridMedia.getMediaPath();\n      }\n      this.nextImage.onload = () => this.imageLoadFinished.next = true;\n      this.nextImage.onerror = () => {\n        console.error('Cant preload:' + this.nextImage.src);\n        this.imageLoadFinished.next = true;\n      };\n      if (this.nextImage.complete) {\n        this.imageLoadFinished.next = true;\n      }\n    }\n    loadPhoto() {\n      if (!this.gridMedia || !this.loadMedia || !this.gridMedia.isPhoto()) {\n        return;\n      }\n      if (this.zoom === 1 || Config.Media.Photo.Converting.loadFullImageOnZoom === false) {\n        if (this.photo.src == null) {\n          if (Config.Media.Photo.Converting.enabled === true) {\n            this.photo.src = this.gridMedia.getBestFitMediaPath();\n            this.photo.isBestFit = true;\n          } else {\n            this.photo.src = this.gridMedia.getMediaPath();\n            this.photo.isBestFit = false;\n          }\n        }\n        // on zoom load high res photo\n      } else if (this.photo.isBestFit === true || this.photo.src == null) {\n        this.photo.src = this.gridMedia.getMediaPath();\n        this.photo.isBestFit = false;\n      }\n    }\n    onVideoProgress() {\n      this.videoProgress = 100 / this.video.nativeElement.duration * this.video.nativeElement.currentTime;\n    }\n    setImageSize() {\n      if (!this.gridMedia) {\n        return;\n      }\n      const photoAspect = MediaDTOUtils.calcAspectRatio(this.gridMedia.media);\n      if (photoAspect < this.windowAspect) {\n        this.imageSize.height = '100';\n        this.imageSize.width = null;\n      } else {\n        this.imageSize.height = null;\n        this.imageSize.width = '100';\n      }\n    }\n  }\n  GalleryLightboxMediaComponent.ɵfac = function GalleryLightboxMediaComponent_Factory(t) {\n    return new (t || GalleryLightboxMediaComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.LightboxService), i0.ɵɵdirectiveInject(i2.DomSanitizer));\n  };\n  GalleryLightboxMediaComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GalleryLightboxMediaComponent,\n    selectors: [[\"app-gallery-lightbox-media\"]],\n    viewQuery: function GalleryLightboxMediaComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.video = _t.first);\n      }\n    },\n    inputs: {\n      gridMedia: \"gridMedia\",\n      nextGridMedia: \"nextGridMedia\",\n      loadMedia: \"loadMedia\",\n      windowAspect: \"windowAspect\",\n      zoom: \"zoom\",\n      drag: \"drag\"\n    },\n    outputs: {\n      videoSourceError: \"videoSourceError\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 5,\n    vars: 3,\n    consts: [[1, \"imgContainer\"], [\"imgContainer\", \"\"], [3, \"width\", \"height\", \"transform\", \"src\", 4, \"ngIf\"], [3, \"width\", \"height\", \"transform\", \"src\", \"alt\", \"load\", \"error\", 4, \"ngIf\"], [\"autoplay\", \"\", 3, \"width\", \"height\", \"loop\", \"loadstart\", \"error\", \"timeupdate\", 4, \"ngIf\"], [3, \"src\"], [3, \"src\", \"alt\", \"load\", \"error\"], [\"autoplay\", \"\", 3, \"loop\", \"loadstart\", \"error\", \"timeupdate\"], [\"video\", \"\"], [3, \"src\", \"error\"]],\n    template: function GalleryLightboxMediaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵtemplate(2, GalleryLightboxMediaComponent_img_2_Template, 1, 7, \"img\", 2);\n        i0.ɵɵtemplate(3, GalleryLightboxMediaComponent_img_3_Template, 1, 8, \"img\", 3);\n        i0.ɵɵtemplate(4, GalleryLightboxMediaComponent_video_4_Template, 4, 6, \"video\", 4);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.showThumbnail());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.gridMedia !== null && ctx.gridMedia.isPhoto() && ctx.photo.src);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.gridMedia !== null && ctx.gridMedia.isVideo() && ctx.loadMedia);\n      }\n    },\n    dependencies: [i3.NgIf],\n    styles: [\".imgContainer[_ngcontent-%COMP%]   img[_ngcontent-%COMP%], .imgContainer[_ngcontent-%COMP%]   video[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}\"]\n  });\n  return GalleryLightboxMediaComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}