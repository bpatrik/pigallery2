{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { ThemeModes } from '../../../common/config/public/ClientConfig';\nimport { Config } from '../../../common/config/public/Config';\nimport { GalleryCacheService } from '../ui/gallery/cache.gallery.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../ui/gallery/cache.gallery.service\";\nexport let ThemeService = /*#__PURE__*/(() => {\n  class ThemeService {\n    constructor(cachingService) {\n      this.cachingService = cachingService;\n      this.mode = ThemeModes.light;\n      this.darkMode = new BehaviorSubject(false);\n      this.matcher = window.matchMedia('(prefers-color-scheme: dark)');\n      if (cachingService.getThemeMode()) {\n        this.setMode(cachingService.getThemeMode());\n      } else {\n        this.setMode(Config.Gallery.Themes.defaultMode);\n      }\n      this.darkMode.subscribe(darkMode => {\n        this.applyMode(darkMode);\n      });\n    }\n    listenToModePreference() {\n      if (this.mode !== ThemeModes.auto) {\n        return;\n      }\n      this.darkMode.next(window.matchMedia('(prefers-color-scheme: dark)').matches);\n      this.matcher.addEventListener('change', event => {\n        this.darkMode.next(event.matches);\n      });\n    }\n    stopListening() {\n      this.matcher.removeAllListeners();\n    }\n    applyMode(darkMode) {\n      if (!Config.Gallery.Themes.enabled) {\n        return;\n      }\n      if (!darkMode) {\n        document.documentElement.removeAttribute('data-bs-theme');\n      } else {\n        document.documentElement.setAttribute('data-bs-theme', 'dark');\n      }\n    }\n    setMode(mode) {\n      if (this.mode === mode) {\n        return;\n      }\n      this.mode = mode;\n      if (this.mode === ThemeModes.light) {\n        this.darkMode.next(false);\n        this.stopListening();\n      } else if (this.mode === ThemeModes.dark) {\n        this.darkMode.next(true);\n        this.stopListening();\n      } else if (this.mode === ThemeModes.auto) {\n        this.listenToModePreference();\n      }\n      this.cachingService.setThemeMode(this.mode);\n    }\n    toggleMode() {\n      switch (this.mode) {\n        case ThemeModes.light:\n          this.setMode(ThemeModes.dark);\n          break;\n        case ThemeModes.dark:\n          this.setMode(ThemeModes.auto);\n          break;\n        case ThemeModes.auto:\n          this.setMode(ThemeModes.light);\n          break;\n      }\n    }\n  }\n  ThemeService.ɵfac = function ThemeService_Factory(t) {\n    return new (t || ThemeService)(i0.ɵɵinject(i1.GalleryCacheService));\n  };\n  ThemeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ThemeService,\n    factory: ThemeService.ɵfac,\n    providedIn: 'root'\n  });\n  return ThemeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}