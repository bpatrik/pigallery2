{"ast":null,"code":"import { NetworkService } from '../../../model/network/network.service';\nimport { GalleryCacheService } from '../cache.gallery.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { Config } from '../../../../../common/config/public/Config';\nimport { SortingMethods } from '../../../../../common/entities/SortingMethods';\nimport { PG2ConfMap } from '../../../../../common/PG2ConfMap';\nimport { ContentService, DirectoryContent } from '../content.service';\nimport { map, switchMap } from 'rxjs/operators';\nimport { SeededRandomService } from '../../../model/seededRandom.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../model/network/network.service\";\nimport * as i2 from \"../cache.gallery.service\";\nimport * as i3 from \"../content.service\";\nimport * as i4 from \"../../../model/seededRandom.service\";\nexport let GallerySortingService = /*#__PURE__*/(() => {\n  class GallerySortingService {\n    constructor(networkService, galleryCacheService, galleryService, rndService) {\n      this.networkService = networkService;\n      this.galleryCacheService = galleryCacheService;\n      this.galleryService = galleryService;\n      this.rndService = rndService;\n      this.collator = new Intl.Collator(undefined, {\n        numeric: true\n      });\n      this.sorting = new BehaviorSubject(Config.Gallery.defaultPhotoSortingMethod);\n      this.galleryService.content.subscribe(c => {\n        if (c.directory) {\n          const sort = this.galleryCacheService.getSorting(c.directory);\n          if (sort !== null) {\n            this.sorting.next(sort);\n            return;\n          }\n        }\n        this.sorting.next(this.getDefaultSorting(c));\n      });\n    }\n    getDefaultSorting(cw) {\n      if (cw.directory && cw.directory.metaFile) {\n        for (const file in PG2ConfMap.sorting) {\n          if (cw.directory.metaFile.some(f => f.name === file)) {\n            return PG2ConfMap.sorting[file];\n          }\n        }\n      }\n      if (cw.searchResult) {\n        return Config.Gallery.defaultSearchSortingMethod;\n      }\n      return Config.Gallery.defaultPhotoSortingMethod;\n    }\n    setSorting(sorting) {\n      this.sorting.next(sorting);\n      if (this.galleryService.content.value.directory) {\n        if (sorting !== this.getDefaultSorting(this.galleryService.content.value)) {\n          this.galleryCacheService.setSorting(this.galleryService.content.value.directory, sorting);\n        } else {\n          this.galleryCacheService.removeSorting(this.galleryService.content.value.directory);\n        }\n      }\n    }\n    applySorting(directoryContent) {\n      return directoryContent.pipe(switchMap(dirContent => {\n        return this.sorting.pipe(map(sorting => {\n          if (!dirContent) {\n            return dirContent;\n          }\n          const c = {\n            media: dirContent.media,\n            directories: dirContent.directories,\n            metaFile: dirContent.metaFile\n          };\n          if (c.directories) {\n            switch (sorting) {\n              case SortingMethods.ascRating: // directories do not have rating\n              case SortingMethods.ascName:\n                c.directories.sort((a, b) => this.collator.compare(a.name, b.name));\n                break;\n              case SortingMethods.ascDate:\n                if (Config.Gallery.enableDirectorySortingByDate === true) {\n                  c.directories.sort((a, b) => a.lastModified - b.lastModified);\n                  break;\n                }\n                c.directories.sort((a, b) => this.collator.compare(a.name, b.name));\n                break;\n              case SortingMethods.descRating: // directories do not have rating\n              case SortingMethods.descName:\n                c.directories.sort((a, b) => this.collator.compare(b.name, a.name));\n                break;\n              case SortingMethods.descDate:\n                if (Config.Gallery.enableDirectorySortingByDate === true) {\n                  c.directories.sort((a, b) => b.lastModified - a.lastModified);\n                  break;\n                }\n                c.directories.sort((a, b) => this.collator.compare(b.name, a.name));\n                break;\n              case SortingMethods.random:\n                this.rndService.setSeed(c.directories.length);\n                c.directories.sort((a, b) => {\n                  if (a.name.toLowerCase() < b.name.toLowerCase()) {\n                    return 1;\n                  }\n                  if (a.name.toLowerCase() > b.name.toLowerCase()) {\n                    return -1;\n                  }\n                  return 0;\n                }).sort(() => {\n                  return this.rndService.get() - 0.5;\n                });\n                break;\n            }\n          }\n          if (c.media) {\n            switch (sorting) {\n              case SortingMethods.ascName:\n                c.media.sort((a, b) => this.collator.compare(a.name, b.name));\n                break;\n              case SortingMethods.descName:\n                c.media.sort((a, b) => this.collator.compare(b.name, a.name));\n                break;\n              case SortingMethods.ascDate:\n                c.media.sort((a, b) => {\n                  return a.metadata.creationDate - b.metadata.creationDate;\n                });\n                break;\n              case SortingMethods.descDate:\n                c.media.sort((a, b) => {\n                  return b.metadata.creationDate - a.metadata.creationDate;\n                });\n                break;\n              case SortingMethods.ascRating:\n                c.media.sort((a, b) => (a.metadata.rating || 0) - (b.metadata.rating || 0));\n                break;\n              case SortingMethods.descRating:\n                c.media.sort((a, b) => (b.metadata.rating || 0) - (a.metadata.rating || 0));\n                break;\n              case SortingMethods.random:\n                this.rndService.setSeed(c.media.length);\n                c.media.sort((a, b) => {\n                  if (a.name.toLowerCase() < b.name.toLowerCase()) {\n                    return -1;\n                  }\n                  if (a.name.toLowerCase() > b.name.toLowerCase()) {\n                    return 1;\n                  }\n                  return 0;\n                }).sort(() => {\n                  return this.rndService.get() - 0.5;\n                });\n                break;\n            }\n          }\n          return c;\n        }));\n      }));\n    }\n  }\n  GallerySortingService.ɵfac = function GallerySortingService_Factory(t) {\n    return new (t || GallerySortingService)(i0.ɵɵinject(i1.NetworkService), i0.ɵɵinject(i2.GalleryCacheService), i0.ɵɵinject(i3.ContentService), i0.ɵɵinject(i4.SeededRandomService));\n  };\n  GallerySortingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GallerySortingService,\n    factory: GallerySortingService.ɵfac\n  });\n  return GallerySortingService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}