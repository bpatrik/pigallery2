{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-inferrable-types */\nimport 'reflect-metadata';\nimport { JobTriggerType } from '../../entities/job/JobScheduleDTO';\nimport { ClientConfig, ClientGPXCompressingConfig, ClientMediaConfig, ClientMetaFileConfig, ClientPhotoConfig, ClientPhotoConvertingConfig, ClientServiceConfig, ClientSharingConfig, ClientThumbnailConfig, ClientUserConfig, ClientVideoConfig, ConfigPriority } from '../public/ClientConfig';\nimport { SubConfigClass } from 'typeconfig/src/decorators/class/SubConfigClass';\nimport { ConfigProperty } from 'typeconfig/src/decorators/property/ConfigPropoerty';\nimport { DefaultsJobs } from '../../entities/job/JobDTO';\nimport { SearchQueryTypes } from '../../entities/SearchQueryDTO';\nimport { SortingMethods } from '../../entities/SortingMethods';\nimport { UserRoles } from '../../entities/UserDTO';\nif (typeof $localize === 'undefined') {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  global.$localize = s => s;\n}\nexport var DatabaseType = /*#__PURE__*/(() => {\n  (function (DatabaseType) {\n    DatabaseType[DatabaseType[\"mysql\"] = 2] = \"mysql\";\n    DatabaseType[DatabaseType[\"sqlite\"] = 3] = \"sqlite\";\n  })(DatabaseType || (DatabaseType = {}));\n  return DatabaseType;\n})();\nexport var LogLevel = /*#__PURE__*/(() => {\n  (function (LogLevel) {\n    LogLevel[LogLevel[\"error\"] = 1] = \"error\";\n    LogLevel[LogLevel[\"warn\"] = 2] = \"warn\";\n    LogLevel[LogLevel[\"info\"] = 3] = \"info\";\n    LogLevel[LogLevel[\"verbose\"] = 4] = \"verbose\";\n    LogLevel[LogLevel[\"debug\"] = 5] = \"debug\";\n    LogLevel[LogLevel[\"silly\"] = 6] = \"silly\";\n  })(LogLevel || (LogLevel = {}));\n  return LogLevel;\n})();\nexport var SQLLogLevel = /*#__PURE__*/(() => {\n  (function (SQLLogLevel) {\n    SQLLogLevel[SQLLogLevel[\"none\"] = 1] = \"none\";\n    SQLLogLevel[SQLLogLevel[\"error\"] = 2] = \"error\";\n    SQLLogLevel[SQLLogLevel[\"all\"] = 3] = \"all\";\n  })(SQLLogLevel || (SQLLogLevel = {}));\n  return SQLLogLevel;\n})();\nexport var ReIndexingSensitivity = /*#__PURE__*/(() => {\n  (function (ReIndexingSensitivity) {\n    ReIndexingSensitivity[ReIndexingSensitivity[\"low\"] = 1] = \"low\";\n    ReIndexingSensitivity[ReIndexingSensitivity[\"medium\"] = 2] = \"medium\";\n    ReIndexingSensitivity[ReIndexingSensitivity[\"high\"] = 3] = \"high\";\n  })(ReIndexingSensitivity || (ReIndexingSensitivity = {}));\n  return ReIndexingSensitivity;\n})();\nexport var FFmpegPresets = /*#__PURE__*/(() => {\n  (function (FFmpegPresets) {\n    FFmpegPresets[FFmpegPresets[\"ultrafast\"] = 1] = \"ultrafast\";\n    FFmpegPresets[FFmpegPresets[\"superfast\"] = 2] = \"superfast\";\n    FFmpegPresets[FFmpegPresets[\"veryfast\"] = 3] = \"veryfast\";\n    FFmpegPresets[FFmpegPresets[\"faster\"] = 4] = \"faster\";\n    FFmpegPresets[FFmpegPresets[\"fast\"] = 5] = \"fast\";\n    FFmpegPresets[FFmpegPresets[\"medium\"] = 6] = \"medium\";\n    FFmpegPresets[FFmpegPresets[\"slow\"] = 7] = \"slow\";\n    FFmpegPresets[FFmpegPresets[\"slower\"] = 8] = \"slower\";\n    FFmpegPresets[FFmpegPresets[\"veryslow\"] = 9] = \"veryslow\";\n    FFmpegPresets[FFmpegPresets[\"placebo\"] = 10] = \"placebo\";\n  })(FFmpegPresets || (FFmpegPresets = {}));\n  return FFmpegPresets;\n})();\nlet MySQLConfig = class MySQLConfig {\n  constructor() {\n    this.host = 'localhost';\n    this.port = 3306;\n    this.database = 'pigallery2';\n    this.username = '';\n    this.password = '';\n  }\n};\n__decorate([ConfigProperty({\n  envAlias: 'MYSQL_HOST',\n  tags: {\n    name: $localize`Host`,\n    uiResetNeeded: {\n      server: true\n    },\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", String)], MySQLConfig.prototype, \"host\", void 0);\n__decorate([ConfigProperty({\n  envAlias: 'MYSQL_PORT',\n  min: 0,\n  max: 65535,\n  tags: {\n    name: $localize`Port`,\n    uiResetNeeded: {\n      server: true\n    },\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", Number)], MySQLConfig.prototype, \"port\", void 0);\n__decorate([ConfigProperty({\n  envAlias: 'MYSQL_DATABASE',\n  tags: {\n    name: $localize`Database`,\n    uiResetNeeded: {\n      server: true\n    },\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", String)], MySQLConfig.prototype, \"database\", void 0);\n__decorate([ConfigProperty({\n  envAlias: 'MYSQL_USERNAME',\n  tags: {\n    name: $localize`Username`,\n    uiResetNeeded: {\n      server: true\n    },\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", String)], MySQLConfig.prototype, \"username\", void 0);\n__decorate([ConfigProperty({\n  envAlias: 'MYSQL_PASSWORD',\n  type: 'password',\n  tags: {\n    name: $localize`Password`,\n    uiResetNeeded: {\n      server: true\n    },\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", String)], MySQLConfig.prototype, \"password\", void 0);\nMySQLConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], MySQLConfig);\nexport { MySQLConfig };\nlet SQLiteConfig = class SQLiteConfig {\n  constructor() {\n    this.DBFileName = 'sqlite.db';\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Sqlite db filename`,\n    uiResetNeeded: {\n      server: true\n    },\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Sqlite will save the db with this filename.`\n}), __metadata(\"design:type\", String)], SQLiteConfig.prototype, \"DBFileName\", void 0);\nSQLiteConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], SQLiteConfig);\nexport { SQLiteConfig };\nlet UserConfig = class UserConfig {\n  constructor(name, password, role) {\n    this.role = UserRoles.User;\n    if (name) {\n      this.name = name;\n    }\n    if (typeof role !== 'undefined') {\n      this.role = role;\n    }\n    if (password) {\n      this.password = password;\n    }\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Name`,\n    priority: ConfigPriority.underTheHood\n  }\n}), __metadata(\"design:type\", String)], UserConfig.prototype, \"name\", void 0);\n__decorate([ConfigProperty({\n  type: UserRoles,\n  tags: {\n    name: $localize`Role`,\n    priority: ConfigPriority.underTheHood\n  }\n}), __metadata(\"design:type\", Number)], UserConfig.prototype, \"role\", void 0);\n__decorate([ConfigProperty({\n  type: 'string',\n  constraint: {\n    assert: (val, config) => !!val,\n    assertReason: 'Password cant be empty'\n  },\n  tags: {\n    name: $localize`Password`,\n    priority: ConfigPriority.underTheHood,\n    relevant: c => !c.encrypted\n  },\n  description: $localize`Unencrypted, temporary password. App will encrypt it and delete this.`\n}), __metadata(\"design:type\", String)], UserConfig.prototype, \"password\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Encrypted password`,\n    priority: ConfigPriority.underTheHood,\n    secret: true\n  }\n}), __metadata(\"design:type\", String)], UserConfig.prototype, \"encryptedPassword\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    priority: ConfigPriority.underTheHood,\n    relevant: () => false // never render this on UI. Only used to indicate that encryption is done.\n  }\n}), __metadata(\"design:type\", Boolean)], UserConfig.prototype, \"encrypted\", void 0);\nUserConfig = __decorate([SubConfigClass({\n  softReadonly: true\n}), __metadata(\"design:paramtypes\", [String, String, Number])], UserConfig);\nexport { UserConfig };\nlet ServerDataBaseConfig = class ServerDataBaseConfig {\n  constructor() {\n    this.type = DatabaseType.sqlite;\n    this.dbFolder = 'db';\n    this.sqlite = new SQLiteConfig();\n    this.mysql = new MySQLConfig();\n  }\n};\n__decorate([ConfigProperty({\n  type: DatabaseType,\n  tags: {\n    name: $localize`Type`,\n    priority: ConfigPriority.advanced,\n    uiResetNeeded: {\n      db: true\n    },\n    githubIssue: 573\n  },\n  description: $localize`SQLite is recommended.`\n}), __metadata(\"design:type\", Number)], ServerDataBaseConfig.prototype, \"type\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Database folder`,\n    uiResetNeeded: {\n      server: true\n    },\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`All file-based data will be stored here (sqlite database, job history data).`\n}), __metadata(\"design:type\", String)], ServerDataBaseConfig.prototype, \"dbFolder\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`SQLite`,\n    uiResetNeeded: {\n      db: true\n    },\n    relevant: c => c.type === DatabaseType.sqlite\n  }\n}), __metadata(\"design:type\", SQLiteConfig)], ServerDataBaseConfig.prototype, \"sqlite\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`MySQL`,\n    uiResetNeeded: {\n      db: true\n    },\n    relevant: c => c.type === DatabaseType.mysql\n  }\n}), __metadata(\"design:type\", MySQLConfig)], ServerDataBaseConfig.prototype, \"mysql\", void 0);\nServerDataBaseConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerDataBaseConfig);\nexport { ServerDataBaseConfig };\nlet ServerUserConfig = class ServerUserConfig extends ClientUserConfig {\n  constructor() {\n    super(...arguments);\n    this.enforcedUsers = [];\n  }\n};\n__decorate([ConfigProperty({\n  arrayType: UserConfig,\n  tags: {\n    name: $localize`Enforced users`,\n    priority: ConfigPriority.underTheHood,\n    uiResetNeeded: {\n      server: true\n    },\n    uiOptional: true,\n    githubIssue: 575\n  },\n  description: $localize`Creates these users in the DB during startup if they do not exist. If a user with this name exist, it won't be overwritten, even if the role is different.`\n}), __metadata(\"design:type\", Array)], ServerUserConfig.prototype, \"enforcedUsers\", void 0);\nServerUserConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerUserConfig);\nexport { ServerUserConfig };\nlet ServerThumbnailConfig = class ServerThumbnailConfig extends ClientThumbnailConfig {\n  constructor() {\n    super(...arguments);\n    this.useLanczos3 = true;\n    this.quality = 80;\n    this.smartSubsample = true;\n    this.personFaceMargin = 0.6; // in ration [0-1]\n  }\n};\n\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Enforced users`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`if true, 'lanczos3' will used to scale photos, otherwise faster but lower quality 'nearest'.`\n}), __metadata(\"design:type\", Boolean)], ServerThumbnailConfig.prototype, \"useLanczos3\", void 0);\n__decorate([ConfigProperty({\n  max: 100,\n  min: 1,\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Converted photo and thumbnail quality`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Between 0-100.`\n}), __metadata(\"design:type\", Object)], ServerThumbnailConfig.prototype, \"quality\", void 0);\n__decorate([ConfigProperty({\n  type: 'boolean',\n  tags: {\n    name: $localize`Use chroma subsampling.`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Use high quality chroma subsampling in webp. See: https://sharp.pixelplumbing.com/api-output#webp.`\n}), __metadata(\"design:type\", Object)], ServerThumbnailConfig.prototype, \"smartSubsample\", void 0);\n__decorate([ConfigProperty({\n  type: 'ratio',\n  tags: {\n    name: $localize`Person face margin`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Person face size ratio on the face thumbnail.`\n}), __metadata(\"design:type\", Number)], ServerThumbnailConfig.prototype, \"personFaceMargin\", void 0);\nServerThumbnailConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerThumbnailConfig);\nexport { ServerThumbnailConfig };\nlet ServerGPXCompressingConfig = class ServerGPXCompressingConfig extends ClientGPXCompressingConfig {\n  constructor() {\n    super(...arguments);\n    this.onTheFly = true;\n    this.minDistance = 5;\n    this.maxMiddleDeviance = 5;\n    this.minTimeDistance = 5000;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`OnTheFly *.gpx compression`,\n    priority: ConfigPriority.advanced,\n    uiDisabled: (sc, c) => !c.Map.enabled || !sc.enabled || !c.MetaFile.gpx\n  },\n  description: $localize`Enables on the fly *.gpx compression.`\n}), __metadata(\"design:type\", Boolean)], ServerGPXCompressingConfig.prototype, \"onTheFly\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Min distance`,\n    priority: ConfigPriority.underTheHood,\n    unit: 'm',\n    uiDisabled: (sc, c) => !c.Map.enabled || !sc.enabled || !c.MetaFile.gpx\n  },\n  description: $localize`Filters out entry that are closer than this to each other in meters.`\n}), __metadata(\"design:type\", Number)], ServerGPXCompressingConfig.prototype, \"minDistance\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Max middle point deviance`,\n    priority: ConfigPriority.underTheHood,\n    unit: 'm',\n    uiDisabled: (sc, c) => !c.Map.enabled || !sc.enabled || !c.MetaFile.gpx\n  },\n  description: $localize`Filters out entry that would fall on the line if we would just connect the previous and the next points. This setting sets the sensitivity for that (higher number, more points are filtered).`\n}), __metadata(\"design:type\", Number)], ServerGPXCompressingConfig.prototype, \"maxMiddleDeviance\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Min time delta`,\n    priority: ConfigPriority.underTheHood,\n    unit: 'ms',\n    uiDisabled: (sc, c) => !c.Map.enabled || !sc.enabled || !c.MetaFile.gpx\n  },\n  description: $localize`Filters out entry that are closer than this in time in milliseconds.`\n}), __metadata(\"design:type\", Number)], ServerGPXCompressingConfig.prototype, \"minTimeDistance\", void 0);\nServerGPXCompressingConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerGPXCompressingConfig);\nexport { ServerGPXCompressingConfig };\nlet ServerMetaFileConfig = class ServerMetaFileConfig extends ClientMetaFileConfig {\n  constructor() {\n    super(...arguments);\n    this.GPXCompressing = new ServerGPXCompressingConfig();\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`GPX compression`,\n    priority: ConfigPriority.advanced,\n    uiJob: [{\n      job: DefaultsJobs[DefaultsJobs['GPX Compression']],\n      relevant: c => c.MetaFile.GPXCompressing.enabled\n    }]\n  }\n}), __metadata(\"design:type\", ServerGPXCompressingConfig)], ServerMetaFileConfig.prototype, \"GPXCompressing\", void 0);\nServerMetaFileConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerMetaFileConfig);\nexport { ServerMetaFileConfig };\nlet ServerSharingConfig = class ServerSharingConfig extends ClientSharingConfig {\n  constructor() {\n    super(...arguments);\n    this.updateTimeout = 1000 * 60 * 5;\n  }\n};\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Update timeout`,\n    priority: ConfigPriority.underTheHood,\n    unit: 'ms'\n  },\n  description: $localize`After creating a sharing link, it can be updated for this long.`\n}), __metadata(\"design:type\", Number)], ServerSharingConfig.prototype, \"updateTimeout\", void 0);\nServerSharingConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerSharingConfig);\nexport { ServerSharingConfig };\nlet ServerIndexingConfig = class ServerIndexingConfig {\n  constructor() {\n    this.cachedFolderTimeout = 1000 * 60 * 60; // Do not rescans the folder if seems ok\n    this.reIndexingSensitivity = ReIndexingSensitivity.low;\n    this.excludeFolderList = ['.Trash-1000', '.dtrash', '$RECYCLE.BIN'];\n    this.excludeFileList = [];\n  }\n};\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Index cache timeout`,\n    priority: ConfigPriority.underTheHood,\n    unit: 'ms'\n  },\n  description: $localize`If there was no indexing in this time, it reindexes. (skipped if indexes are in DB and sensitivity is low).`\n}), __metadata(\"design:type\", Number)], ServerIndexingConfig.prototype, \"cachedFolderTimeout\", void 0);\n__decorate([ConfigProperty({\n  type: ReIndexingSensitivity,\n  tags: {\n    name: $localize`Folder reindexing sensitivity`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Set the reindexing sensitivity. High value check the folders for change more often.`\n}), __metadata(\"design:type\", Number)], ServerIndexingConfig.prototype, \"reIndexingSensitivity\", void 0);\n__decorate([ConfigProperty({\n  arrayType: 'string',\n  tags: {\n    name: $localize`Exclude Folder List`,\n    priority: ConfigPriority.advanced,\n    uiResetNeeded: {\n      server: true,\n      db: true\n    },\n    uiOptional: true,\n    uiAllowSpaces: true\n  },\n  description: $localize`Folders to exclude from indexing. If an entry starts with '/' it is treated as an absolute path. If it doesn't start with '/' but contains a '/', the path is relative to the image directory. If it doesn't contain a '/', any folder with this name will be excluded.`\n}), __metadata(\"design:type\", Array)], ServerIndexingConfig.prototype, \"excludeFolderList\", void 0);\n__decorate([ConfigProperty({\n  arrayType: 'string',\n  tags: {\n    name: $localize`Exclude File List`,\n    priority: ConfigPriority.advanced,\n    uiResetNeeded: {\n      server: true,\n      db: true\n    },\n    uiOptional: true,\n    hint: $localize`.ignore;.pg2ignore`\n  },\n  description: $localize`Files that mark a folder to be excluded from indexing. Any folder that contains a file with this name will be excluded from indexing.`\n}), __metadata(\"design:type\", Array)], ServerIndexingConfig.prototype, \"excludeFileList\", void 0);\nServerIndexingConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerIndexingConfig);\nexport { ServerIndexingConfig };\nlet ServerThreadingConfig = class ServerThreadingConfig {\n  constructor() {\n    this.enabled = false;\n    this.thumbnailThreads = 0; // if zero-> CPU count -1\n  }\n};\n\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Threading`,\n    uiResetNeeded: {\n      server: true\n    },\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`[Deprecated, will be removed in the next release] Runs directory scanning and thumbnail generation in a different thread.`\n}), __metadata(\"design:type\", Boolean)], ServerThreadingConfig.prototype, \"enabled\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Thumbnail threads`,\n    uiResetNeeded: {\n      server: true\n    },\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Number of threads that are used to generate thumbnails. If 0, number of 'CPU cores -1' threads will be used.`\n}), __metadata(\"design:type\", Number)], ServerThreadingConfig.prototype, \"thumbnailThreads\", void 0);\nServerThreadingConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerThreadingConfig);\nexport { ServerThreadingConfig };\nlet ServerDuplicatesConfig = class ServerDuplicatesConfig {\n  constructor() {\n    this.listingLimit = 1000;\n  }\n};\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Max duplicates`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Maximum number of duplicates to list.`\n}), __metadata(\"design:type\", Number)], ServerDuplicatesConfig.prototype, \"listingLimit\", void 0);\nServerDuplicatesConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerDuplicatesConfig);\nexport { ServerDuplicatesConfig };\nlet ServerLogConfig = class ServerLogConfig {\n  constructor() {\n    this.level = LogLevel.info;\n    this.sqlLevel = SQLLogLevel.error;\n    this.logServerTiming = false;\n  }\n};\n__decorate([ConfigProperty({\n  type: LogLevel,\n  tags: {\n    name: $localize`Level`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`Logging level.`\n}), __metadata(\"design:type\", Number)], ServerLogConfig.prototype, \"level\", void 0);\n__decorate([ConfigProperty({\n  type: SQLLogLevel,\n  tags: {\n    name: $localize`Sql Level`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Logging level for SQL queries.`\n}), __metadata(\"design:type\", Number)], ServerLogConfig.prototype, \"sqlLevel\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Server timing`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`If enabled, the app ads \"Server-Timing\" http header to the response.`\n}), __metadata(\"design:type\", Boolean)], ServerLogConfig.prototype, \"logServerTiming\", void 0);\nServerLogConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerLogConfig);\nexport { ServerLogConfig };\nlet NeverJobTriggerConfig = class NeverJobTriggerConfig {\n  constructor() {\n    this.type = JobTriggerType.never;\n  }\n};\n__decorate([ConfigProperty({\n  type: JobTriggerType\n}), __metadata(\"design:type\", Object)], NeverJobTriggerConfig.prototype, \"type\", void 0);\nNeverJobTriggerConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], NeverJobTriggerConfig);\nexport { NeverJobTriggerConfig };\nlet ScheduledJobTriggerConfig = class ScheduledJobTriggerConfig {\n  constructor() {\n    this.type = JobTriggerType.scheduled;\n  }\n};\n__decorate([ConfigProperty({\n  type: JobTriggerType\n}), __metadata(\"design:type\", Object)], ScheduledJobTriggerConfig.prototype, \"type\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt'\n}), __metadata(\"design:type\", Number)], ScheduledJobTriggerConfig.prototype, \"time\", void 0);\nScheduledJobTriggerConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ScheduledJobTriggerConfig);\nexport { ScheduledJobTriggerConfig };\nlet PeriodicJobTriggerConfig = class PeriodicJobTriggerConfig {\n  constructor() {\n    this.type = JobTriggerType.periodic;\n    this.periodicity = 7; // 0-6: week days 7 every day\n    this.atTime = 0; // day time\n  }\n};\n\n__decorate([ConfigProperty({\n  type: JobTriggerType\n}), __metadata(\"design:type\", Object)], PeriodicJobTriggerConfig.prototype, \"type\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  max: 7\n}), __metadata(\"design:type\", Number)], PeriodicJobTriggerConfig.prototype, \"periodicity\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  max: 23 * 60 + 59\n}), __metadata(\"design:type\", Number)], PeriodicJobTriggerConfig.prototype, \"atTime\", void 0);\nPeriodicJobTriggerConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], PeriodicJobTriggerConfig);\nexport { PeriodicJobTriggerConfig };\nlet AfterJobTriggerConfig = class AfterJobTriggerConfig {\n  constructor(afterScheduleName) {\n    this.type = JobTriggerType.after;\n    this.afterScheduleName = afterScheduleName;\n  }\n};\n__decorate([ConfigProperty({\n  type: JobTriggerType\n}), __metadata(\"design:type\", Object)], AfterJobTriggerConfig.prototype, \"type\", void 0);\n__decorate([ConfigProperty(), __metadata(\"design:type\", String)], AfterJobTriggerConfig.prototype, \"afterScheduleName\", void 0);\nAfterJobTriggerConfig = __decorate([SubConfigClass({\n  softReadonly: true\n}), __metadata(\"design:paramtypes\", [String])], AfterJobTriggerConfig);\nexport { AfterJobTriggerConfig };\nlet JobScheduleConfig = class JobScheduleConfig {\n  constructor(name, jobName, trigger, config = {}, allowParallelRun = false) {\n    this.config = {};\n    this.allowParallelRun = false;\n    this.name = name;\n    this.jobName = jobName;\n    this.config = config;\n    this.allowParallelRun = allowParallelRun;\n    this.trigger = trigger;\n  }\n};\n__decorate([ConfigProperty(), __metadata(\"design:type\", String)], JobScheduleConfig.prototype, \"name\", void 0);\n__decorate([ConfigProperty(), __metadata(\"design:type\", String)], JobScheduleConfig.prototype, \"jobName\", void 0);\n__decorate([ConfigProperty(), __metadata(\"design:type\", Object)], JobScheduleConfig.prototype, \"config\", void 0);\n__decorate([ConfigProperty(), __metadata(\"design:type\", Boolean)], JobScheduleConfig.prototype, \"allowParallelRun\", void 0);\n__decorate([ConfigProperty({\n  type: NeverJobTriggerConfig,\n  typeBuilder: v => {\n    const type = typeof v.type === 'number' ? v.type : JobTriggerType[v.type];\n    switch (type) {\n      case JobTriggerType.after:\n        return AfterJobTriggerConfig;\n      case JobTriggerType.never:\n        return NeverJobTriggerConfig;\n      case JobTriggerType.scheduled:\n        return ScheduledJobTriggerConfig;\n      case JobTriggerType.periodic:\n        return PeriodicJobTriggerConfig;\n    }\n    return null;\n  }\n}), __metadata(\"design:type\", Object)], JobScheduleConfig.prototype, \"trigger\", void 0);\nJobScheduleConfig = __decorate([SubConfigClass({\n  softReadonly: true\n}), __metadata(\"design:paramtypes\", [String, String, Object, Object, Boolean])], JobScheduleConfig);\nexport { JobScheduleConfig };\nlet ServerJobConfig = class ServerJobConfig {\n  constructor() {\n    this.maxSavedProgress = 20;\n    this.mediaProcessingBatchSize = 1000;\n    this.scheduled = [new JobScheduleConfig(DefaultsJobs[DefaultsJobs.Indexing], DefaultsJobs[DefaultsJobs.Indexing], new NeverJobTriggerConfig(), {\n      indexChangesOnly: true\n    } // set config explicitly, so it is not undefined on the UI\n    ), new JobScheduleConfig(DefaultsJobs[DefaultsJobs['Preview Filling']], DefaultsJobs[DefaultsJobs['Preview Filling']], new AfterJobTriggerConfig(DefaultsJobs[DefaultsJobs['Indexing']]), {}), new JobScheduleConfig(DefaultsJobs[DefaultsJobs['Thumbnail Generation']], DefaultsJobs[DefaultsJobs['Thumbnail Generation']], new AfterJobTriggerConfig(DefaultsJobs[DefaultsJobs['Preview Filling']]), {\n      sizes: [240],\n      indexedOnly: true\n    }), new JobScheduleConfig(DefaultsJobs[DefaultsJobs['Photo Converting']], DefaultsJobs[DefaultsJobs['Photo Converting']], new AfterJobTriggerConfig(DefaultsJobs[DefaultsJobs['Thumbnail Generation']]), {\n      indexedOnly: true\n    }), new JobScheduleConfig(DefaultsJobs[DefaultsJobs['Video Converting']], DefaultsJobs[DefaultsJobs['Video Converting']], new AfterJobTriggerConfig(DefaultsJobs[DefaultsJobs['Photo Converting']]), {\n      indexedOnly: true\n    }), new JobScheduleConfig(DefaultsJobs[DefaultsJobs['GPX Compression']], DefaultsJobs[DefaultsJobs['GPX Compression']], new AfterJobTriggerConfig(DefaultsJobs[DefaultsJobs['Video Converting']]), {\n      indexedOnly: true\n    }), new JobScheduleConfig(DefaultsJobs[DefaultsJobs['Temp Folder Cleaning']], DefaultsJobs[DefaultsJobs['Temp Folder Cleaning']], new AfterJobTriggerConfig(DefaultsJobs[DefaultsJobs['GPX Compression']]), {\n      indexedOnly: true\n    })];\n  }\n};\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Max saved progress`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Job history size.`\n}), __metadata(\"design:type\", Number)], ServerJobConfig.prototype, \"maxSavedProgress\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Processing batch size`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`Jobs load this many photos or videos form the DB for processing at once.`\n}), __metadata(\"design:type\", Number)], ServerJobConfig.prototype, \"mediaProcessingBatchSize\", void 0);\n__decorate([ConfigProperty({\n  arrayType: JobScheduleConfig,\n  tags: {\n    name: $localize`Scheduled jobs`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", Array)], ServerJobConfig.prototype, \"scheduled\", void 0);\nServerJobConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerJobConfig);\nexport { ServerJobConfig };\nlet VideoTranscodingConfig = class VideoTranscodingConfig {\n  constructor() {\n    this.bitRate = 5 * 1024 * 1024;\n    this.resolution = 720;\n    this.fps = 25;\n    this.format = 'mp4';\n    this.mp4Codec = 'libx264';\n    this.webmCodec = 'libvpx';\n    this.crf = 23;\n    this.preset = FFmpegPresets.medium;\n    this.customOutputOptions = [];\n    this.customInputOptions = [];\n  }\n};\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Bit rate`,\n    priority: ConfigPriority.advanced,\n    unit: 'bps'\n  },\n  description: $localize`Target bit rate of the output video will be scaled down this this. This should be less than the upload rate of your home server.`\n}), __metadata(\"design:type\", Number)], VideoTranscodingConfig.prototype, \"bitRate\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Resolution`,\n    priority: ConfigPriority.advanced,\n    uiOptions: [720, 1080, 1440, 2160, 4320],\n    unit: 'px'\n  },\n  description: $localize`The height of the output video will be scaled down to this, while keeping the aspect ratio.`\n}), __metadata(\"design:type\", Number)], VideoTranscodingConfig.prototype, \"resolution\", void 0);\n__decorate([ConfigProperty({\n  type: 'positiveFloat',\n  tags: {\n    name: $localize`FPS`,\n    priority: ConfigPriority.underTheHood,\n    uiOptions: [24, 25, 30, 48, 50, 60]\n  },\n  description: $localize`Target frame per second (fps) of the output video will be scaled down this this.`\n}), __metadata(\"design:type\", Number)], VideoTranscodingConfig.prototype, \"fps\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Format`,\n    priority: ConfigPriority.advanced,\n    uiOptions: ['mp4', 'webm']\n  }\n}), __metadata(\"design:type\", String)], VideoTranscodingConfig.prototype, \"format\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`MP4 codec`,\n    priority: ConfigPriority.underTheHood,\n    uiOptions: ['libx264', 'libx265'],\n    relevant: c => c.format === 'mp4'\n  }\n}), __metadata(\"design:type\", String)], VideoTranscodingConfig.prototype, \"mp4Codec\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Webm Codec`,\n    priority: ConfigPriority.underTheHood,\n    uiOptions: ['libvpx', 'libvpx-vp9'],\n    relevant: c => c.format === 'webm'\n  }\n}), __metadata(\"design:type\", String)], VideoTranscodingConfig.prototype, \"webmCodec\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  max: 51,\n  tags: {\n    name: $localize`CRF`,\n    priority: ConfigPriority.underTheHood\n  },\n  description: $localize`The range of the Constant Rate Factor (CRF) scale is 0–51, where 0 is lossless, 23 is the default, and 51 is worst quality possible.`\n}), __metadata(\"design:type\", Number)], VideoTranscodingConfig.prototype, \"crf\", void 0);\n__decorate([ConfigProperty({\n  type: FFmpegPresets,\n  tags: {\n    name: $localize`Preset`,\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`A preset is a collection of options that will provide a certain encoding speed to compression ratio. A slower preset will provide better compression (compression is quality per filesize).`\n}), __metadata(\"design:type\", Number)], VideoTranscodingConfig.prototype, \"preset\", void 0);\n__decorate([ConfigProperty({\n  arrayType: 'string',\n  tags: {\n    name: $localize`Custom Output Options`,\n    priority: ConfigPriority.underTheHood,\n    hint: '-pass 2;-minrate 1M;-maxrate 1M;-bufsize 2M',\n    uiAllowSpaces: true\n  },\n  description: $localize`It will be sent to ffmpeg as it is, as custom output options.`\n}), __metadata(\"design:type\", Array)], VideoTranscodingConfig.prototype, \"customOutputOptions\", void 0);\n__decorate([ConfigProperty({\n  arrayType: 'string',\n  tags: {\n    name: $localize`Custom Input Options`,\n    priority: ConfigPriority.underTheHood,\n    hint: '-option1; -option2 param2; -option3; -option4 param4',\n    githubIssue: 592,\n    uiAllowSpaces: true\n  },\n  description: $localize`It will be sent to ffmpeg as it is, as custom input options.`\n}), __metadata(\"design:type\", Array)], VideoTranscodingConfig.prototype, \"customInputOptions\", void 0);\nVideoTranscodingConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], VideoTranscodingConfig);\nexport { VideoTranscodingConfig };\nlet ServerVideoConfig = class ServerVideoConfig extends ClientVideoConfig {\n  constructor() {\n    super(...arguments);\n    this.transcoding = new VideoTranscodingConfig();\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Video transcoding`,\n    priority: ConfigPriority.advanced,\n    uiDisabled: sb => !sb.enabled\n  },\n  description: $localize`To ensure smooth video playback, video transcoding is recommended to a lower bit rate than the server's upload rate.   The transcoded videos will be save to the thumbnail folder.  You can trigger the transcoding manually, but you can also create an automatic encoding job in advanced settings mode.`\n}), __metadata(\"design:type\", VideoTranscodingConfig)], ServerVideoConfig.prototype, \"transcoding\", void 0);\nServerVideoConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerVideoConfig);\nexport { ServerVideoConfig };\nlet PhotoConvertingConfig = class PhotoConvertingConfig extends ClientPhotoConvertingConfig {\n  constructor() {\n    super(...arguments);\n    this.onTheFly = true;\n    this.resolution = 1080;\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`On the fly converting`,\n    priority: ConfigPriority.underTheHood,\n    uiDisabled: sc => !sc.enabled\n  },\n  description: $localize`Converts photos on the fly, when they are requested.`\n}), __metadata(\"design:type\", Boolean)], PhotoConvertingConfig.prototype, \"onTheFly\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Resolution`,\n    priority: ConfigPriority.advanced,\n    uiOptions: [720, 1080, 1440, 2160, 4320],\n    unit: 'px',\n    uiDisabled: sc => !sc.enabled\n  },\n  description: $localize`The shorter edge of the converted photo will be scaled down to this, while keeping the aspect ratio.`\n}), __metadata(\"design:type\", Number)], PhotoConvertingConfig.prototype, \"resolution\", void 0);\nPhotoConvertingConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], PhotoConvertingConfig);\nexport { PhotoConvertingConfig };\nlet ServerPhotoConfig = class ServerPhotoConfig extends ClientPhotoConfig {\n  constructor() {\n    super(...arguments);\n    this.Converting = new PhotoConvertingConfig();\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Photo resizing`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", PhotoConvertingConfig)], ServerPhotoConfig.prototype, \"Converting\", void 0);\nServerPhotoConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerPhotoConfig);\nexport { ServerPhotoConfig };\nlet ServerPreviewConfig = class ServerPreviewConfig {\n  constructor() {\n    this.SearchQuery = {\n      type: SearchQueryTypes.any_text,\n      text: ''\n    };\n    this.Sorting = [SortingMethods.descRating, SortingMethods.descDate];\n  }\n};\n__decorate([ConfigProperty({\n  type: 'object',\n  tags: {\n    name: $localize`Preview Filter query`,\n    uiResetNeeded: {\n      db: true\n    },\n    priority: ConfigPriority.advanced,\n    uiType: 'SearchQuery'\n  },\n  description: $localize`Filters the sub-folders with this search query. If filter results no photo, the app will search again without the filter.`\n}), __metadata(\"design:type\", Object)], ServerPreviewConfig.prototype, \"SearchQuery\", void 0);\n__decorate([ConfigProperty({\n  arrayType: SortingMethods,\n  tags: {\n    name: $localize`Preview Sorting`,\n    uiResetNeeded: {\n      db: true\n    },\n    priority: ConfigPriority.advanced\n  },\n  description: $localize`If multiple preview is available sorts them by these methods and selects the first one.`\n}), __metadata(\"design:type\", Array)], ServerPreviewConfig.prototype, \"Sorting\", void 0);\nServerPreviewConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerPreviewConfig);\nexport { ServerPreviewConfig };\nlet ServerMediaConfig = class ServerMediaConfig extends ClientMediaConfig {\n  constructor() {\n    super(...arguments);\n    this.folder = 'demo/images';\n    this.tempFolder = 'demo/tmp';\n    this.photoMetadataSize = 512 * 1024; // only this many bites will be loaded when scanning photo for metadata\n    this.Video = new ServerVideoConfig();\n    this.Photo = new ServerPhotoConfig();\n    this.Thumbnail = new ServerThumbnailConfig();\n  }\n};\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Images folder`,\n    priority: ConfigPriority.basic,\n    uiResetNeeded: {\n      server: true\n    },\n    dockerSensitive: true\n  },\n  description: $localize`Images are loaded from this folder (read permission required)`\n}), __metadata(\"design:type\", String)], ServerMediaConfig.prototype, \"folder\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Temp folder`,\n    uiResetNeeded: {\n      server: true\n    },\n    priority: ConfigPriority.basic,\n    dockerSensitive: true\n  },\n  description: $localize`Thumbnails, converted photos, videos will be stored here (write permission required)`\n}), __metadata(\"design:type\", String)], ServerMediaConfig.prototype, \"tempFolder\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Metadata read buffer`,\n    priority: ConfigPriority.underTheHood,\n    uiResetNeeded: {\n      db: true,\n      server: true\n    },\n    githubIssue: 398,\n    unit: 'bytes'\n  },\n  description: $localize`Only this many bites will be loaded when scanning photo/video for metadata. Increase this number if your photos shows up as square.`\n}), __metadata(\"design:type\", Number)], ServerMediaConfig.prototype, \"photoMetadataSize\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Video`,\n    uiIcon: 'video',\n    priority: ConfigPriority.advanced,\n    uiJob: [{\n      job: DefaultsJobs[DefaultsJobs['Video Converting']],\n      relevant: c => c.Media.Video.enabled\n    }]\n  },\n  description: $localize`Video support uses ffmpeg. ffmpeg and ffprobe binaries need to be available in the PATH or the @ffmpeg-installer/ffmpeg and @ffprobe-installer/ffprobe optional node packages need to be installed.`\n}), __metadata(\"design:type\", ServerVideoConfig)], ServerMediaConfig.prototype, \"Video\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Photo`,\n    uiIcon: 'camera-slr',\n    priority: ConfigPriority.advanced,\n    uiJob: [{\n      job: DefaultsJobs[DefaultsJobs['Photo Converting']],\n      relevant: c => c.Media.Photo.Converting.enabled\n    }]\n  }\n}), __metadata(\"design:type\", ServerPhotoConfig)], ServerMediaConfig.prototype, \"Photo\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Thumbnail`,\n    uiIcon: 'grid-three-up',\n    priority: ConfigPriority.advanced,\n    uiJob: [{\n      job: DefaultsJobs[DefaultsJobs['Thumbnail Generation']]\n    }]\n  }\n}), __metadata(\"design:type\", ServerThumbnailConfig)], ServerMediaConfig.prototype, \"Thumbnail\", void 0);\nServerMediaConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerMediaConfig);\nexport { ServerMediaConfig };\nlet ServerServiceConfig = class ServerServiceConfig extends ClientServiceConfig {\n  constructor() {\n    super(...arguments);\n    this.sessionSecret = [];\n    this.sessionTimeout = 1000 * 60 * 60 * 24 * 7; // in ms\n    this.port = 80;\n    this.host = '0.0.0.0';\n    this.Threading = new ServerThreadingConfig();\n    this.Log = new ServerLogConfig();\n  }\n};\n__decorate([ConfigProperty({\n  arrayType: 'string',\n  tags: {\n    secret: true,\n    name: 'sessionSecret'\n  }\n}), __metadata(\"design:type\", Array)], ServerServiceConfig.prototype, \"sessionSecret\", void 0);\n__decorate([ConfigProperty({\n  type: 'unsignedInt',\n  tags: {\n    name: $localize`Session Timeout`,\n    priority: ConfigPriority.underTheHood,\n    unit: 'ms'\n  },\n  description: $localize`Users kept logged in for this long time.`\n}), __metadata(\"design:type\", Number)], ServerServiceConfig.prototype, \"sessionTimeout\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Port`,\n    priority: ConfigPriority.advanced,\n    uiResetNeeded: {\n      server: true\n    },\n    dockerSensitive: true\n  },\n  description: $localize`Port number. Port 80 is usually what you need.`,\n  type: 'unsignedInt',\n  envAlias: 'PORT',\n  min: 0,\n  max: 65535\n}), __metadata(\"design:type\", Number)], ServerServiceConfig.prototype, \"port\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Host`,\n    priority: ConfigPriority.advanced,\n    uiResetNeeded: {\n      server: true\n    },\n    dockerSensitive: true\n  },\n  description: $localize`Server will accept connections from this IPv6 or IPv4 address.`\n}), __metadata(\"design:type\", String)], ServerServiceConfig.prototype, \"host\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Threading`,\n    priority: ConfigPriority.underTheHood\n  }\n}), __metadata(\"design:type\", ServerThreadingConfig)], ServerServiceConfig.prototype, \"Threading\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Logs`,\n    priority: ConfigPriority.advanced\n  }\n}), __metadata(\"design:type\", ServerLogConfig)], ServerServiceConfig.prototype, \"Log\", void 0);\nServerServiceConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerServiceConfig);\nexport { ServerServiceConfig };\nlet ServerEnvironmentConfig = class ServerEnvironmentConfig {};\n__decorate([ConfigProperty({\n  volatile: true\n}), __metadata(\"design:type\", String)], ServerEnvironmentConfig.prototype, \"upTime\", void 0);\n__decorate([ConfigProperty({\n  volatile: true\n}), __metadata(\"design:type\", String)], ServerEnvironmentConfig.prototype, \"appVersion\", void 0);\n__decorate([ConfigProperty({\n  volatile: true\n}), __metadata(\"design:type\", String)], ServerEnvironmentConfig.prototype, \"buildTime\", void 0);\n__decorate([ConfigProperty({\n  volatile: true\n}), __metadata(\"design:type\", String)], ServerEnvironmentConfig.prototype, \"buildCommitHash\", void 0);\n__decorate([ConfigProperty({\n  volatile: true\n}), __metadata(\"design:type\", Boolean)], ServerEnvironmentConfig.prototype, \"isDocker\", void 0);\nServerEnvironmentConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerEnvironmentConfig);\nexport { ServerEnvironmentConfig };\nlet ServerConfig = class ServerConfig extends ClientConfig {\n  constructor() {\n    super(...arguments);\n    this.Environment = new ServerEnvironmentConfig();\n    this.Server = new ServerServiceConfig();\n    this.Database = new ServerDataBaseConfig();\n    this.Users = new ServerUserConfig();\n    this.Indexing = new ServerIndexingConfig();\n    this.Media = new ServerMediaConfig();\n    this.MetaFile = new ServerMetaFileConfig();\n    this.Preview = new ServerPreviewConfig();\n    this.Sharing = new ServerSharingConfig();\n    this.Duplicates = new ServerDuplicatesConfig();\n    this.Jobs = new ServerJobConfig();\n  }\n};\n__decorate([ConfigProperty({\n  volatile: true\n}), __metadata(\"design:type\", ServerEnvironmentConfig)], ServerConfig.prototype, \"Environment\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Server`,\n    uiIcon: 'cog'\n  }\n}), __metadata(\"design:type\", ServerServiceConfig)], ServerConfig.prototype, \"Server\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Database`,\n    uiIcon: 'list'\n  }\n}), __metadata(\"design:type\", ServerDataBaseConfig)], ServerConfig.prototype, \"Database\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Users`,\n    uiIcon: 'person'\n  }\n}), __metadata(\"design:type\", ServerUserConfig)], ServerConfig.prototype, \"Users\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Indexing`,\n    uiIcon: 'pie-chart',\n    uiJob: [{\n      job: DefaultsJobs[DefaultsJobs.Indexing],\n      description: $localize`If you add a new folder to your gallery, the site indexes it automatically.  If you would like to trigger indexing manually, click index button. (Note: search only works among the indexed directories.)`\n    }, {\n      job: DefaultsJobs[DefaultsJobs['Gallery Reset']],\n      hideProgress: true\n    }]\n  }\n}), __metadata(\"design:type\", ServerIndexingConfig)], ServerConfig.prototype, \"Indexing\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Media`,\n    uiIcon: 'camera-slr'\n  }\n}), __metadata(\"design:type\", ServerMediaConfig)], ServerConfig.prototype, \"Media\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Meta file`,\n    uiIcon: 'file'\n  }\n}), __metadata(\"design:type\", ServerMetaFileConfig)], ServerConfig.prototype, \"MetaFile\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Preview`,\n    uiIcon: 'image',\n    uiJob: [{\n      job: DefaultsJobs[DefaultsJobs['Preview Filling']]\n    }, {\n      job: DefaultsJobs[DefaultsJobs['Preview Reset']],\n      hideProgress: true\n    }]\n  }\n}), __metadata(\"design:type\", ServerPreviewConfig)], ServerConfig.prototype, \"Preview\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Sharing`,\n    uiIcon: 'share'\n  }\n}), __metadata(\"design:type\", ServerSharingConfig)], ServerConfig.prototype, \"Sharing\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Duplicates`,\n    uiIcon: 'layers'\n  }\n}), __metadata(\"design:type\", ServerDuplicatesConfig)], ServerConfig.prototype, \"Duplicates\", void 0);\n__decorate([ConfigProperty({\n  tags: {\n    name: $localize`Jobs`,\n    uiIcon: 'project'\n  }\n}), __metadata(\"design:type\", ServerJobConfig)], ServerConfig.prototype, \"Jobs\", void 0);\nServerConfig = __decorate([SubConfigClass({\n  softReadonly: true\n})], ServerConfig);\nexport { ServerConfig };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}