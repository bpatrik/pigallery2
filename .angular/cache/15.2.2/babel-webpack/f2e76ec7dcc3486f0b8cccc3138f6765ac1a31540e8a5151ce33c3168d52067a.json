{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { Dimension } from '../../../model/IRenderable';\nimport { GalleryMapLightboxComponent } from './lightbox/lightbox.map.gallery.component';\nimport { MapService } from './map.service';\nimport { Config } from '../../../../../common/config/public/Config';\nimport { marker, tileLayer } from 'leaflet';\nimport { ThemeService } from '../../../model/theme.service';\nimport { MarkerFactory } from './MarkerFactory';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./map.service\";\nimport * as i2 from \"../../../model/theme.service\";\nimport * as i3 from \"@asymmetrik/ngx-leaflet\";\nimport * as i4 from \"./lightbox/lightbox.map.gallery.component\";\nconst _c0 = [\"map\"];\nexport let GalleryMapComponent = /*#__PURE__*/(() => {\n  class GalleryMapComponent {\n    constructor(mapService, themeService) {\n      this.mapService = mapService;\n      this.themeService = themeService;\n      this.options = {\n        zoomControl: false,\n        dragging: false,\n        keyboard: false,\n        tap: false,\n        doubleClickZoom: false,\n        boxZoom: false,\n        zoom: 0,\n        center: [0, 0]\n      };\n      this.markerLayer = [];\n      this.initThemeModes();\n    }\n    ngOnDestroy() {\n      this.darkModeSubscription.unsubscribe();\n    }\n    initThemeModes() {\n      this.layers = {\n        'light': tileLayer(this.mapService.MapLayer.url, {\n          attribution: this.mapService.ShortAttributions\n        }),\n        'dark': tileLayer(this.mapService.DarkMapLayer.url, {\n          attribution: this.mapService.ShortAttributions\n        })\n      };\n      if (this.themeService.darkMode.value) {\n        this.options.layers = [this.layers.dark];\n      } else {\n        this.options.layers = [this.layers.light];\n      }\n      // update map theme on dark theme\n      this.darkModeSubscription = this.themeService.darkMode.subscribe(isDark => {\n        if (!this.leafletMap) {\n          return;\n        }\n        if (isDark) {\n          if (this.leafletMap.hasLayer(this.layers.dark)) {\n            return;\n          }\n          this.leafletMap.removeLayer(this.layers.light);\n          this.leafletMap.addLayer(this.layers.dark);\n        } else {\n          if (this.leafletMap.hasLayer(this.layers.light)) {\n            return;\n          }\n          this.leafletMap.removeLayer(this.layers.dark);\n          this.leafletMap.addLayer(this.layers.light);\n        }\n      });\n    }\n    onMapReady(map) {\n      this.leafletMap = map;\n      if (this.markerLayer.length > 0) {\n        this.leafletMap.setView(this.markerLayer[0].getLatLng(), 99);\n        this.leafletMap.fitBounds(this.markerLayer.map(mp => [mp.getLatLng().lat, mp.getLatLng().lng]));\n      }\n      this.leafletMap.setZoom(0);\n    }\n    ngOnChanges() {\n      this.markerLayer = this.photos.filter(p => {\n        return p.metadata && p.metadata.positionData && p.metadata.positionData.GPSData && p.metadata.positionData.GPSData.latitude && p.metadata.positionData.GPSData.longitude;\n      }).slice(0, Config.Map.maxPreviewMarkers).map(p => {\n        return marker({\n          lat: p.metadata.positionData.GPSData.latitude,\n          lng: p.metadata.positionData.GPSData.longitude\n        }).setIcon(MarkerFactory.defIconSmall);\n      });\n      if (this.leafletMap && this.markerLayer.length > 0) {\n        this.options.center = this.markerLayer[0].getLatLng();\n        this.leafletMap.setView(this.markerLayer[0].getLatLng(), 99);\n        this.leafletMap.fitBounds(this.markerLayer.map(mp => [mp.getLatLng().lat, mp.getLatLng().lng]));\n        this.leafletMap.setZoom(0);\n      }\n    }\n    click() {\n      this.mapLightbox.show(this.getDimension());\n    }\n    getDimension() {\n      return {\n        top: this.mapElement.nativeElement.parentElement.offsetParent.offsetTop,\n        left: this.mapElement.nativeElement.parentElement.offsetLeft,\n        width: this.mapElement.nativeElement.offsetWidth,\n        height: this.mapElement.nativeElement.offsetHeight\n      };\n    }\n  }\n  GalleryMapComponent.ɵfac = function GalleryMapComponent_Factory(t) {\n    return new (t || GalleryMapComponent)(i0.ɵɵdirectiveInject(i1.MapService), i0.ɵɵdirectiveInject(i2.ThemeService));\n  };\n  GalleryMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GalleryMapComponent,\n    selectors: [[\"app-gallery-map\"]],\n    viewQuery: function GalleryMapComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(GalleryMapLightboxComponent, 5);\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapLightbox = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapElement = _t.first);\n      }\n    },\n    inputs: {\n      photos: \"photos\",\n      gpxFiles: \"gpxFiles\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 5,\n    vars: 4,\n    consts: [[3, \"photos\", \"gpxFiles\"], [\"id\", \"map\", 1, \"clickable\", 2, \"border-radius\", \"inherit\"], [\"map\", \"\"], [\"leaflet\", \"\", 1, \"leaflet-map\", 2, \"border-radius\", \"inherit\", 3, \"leafletOptions\", \"leafletLayers\", \"leafletMapReady\"], [1, \"overlay\", 3, \"click\"]],\n    template: function GalleryMapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-gallery-map-lightbox\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1, 2)(3, \"div\", 3);\n        i0.ɵɵlistener(\"leafletMapReady\", function GalleryMapComponent_Template_div_leafletMapReady_3_listener($event) {\n          return ctx.onMapReady($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵlistener(\"click\", function GalleryMapComponent_Template_div_click_4_listener() {\n          return ctx.click();\n        });\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"photos\", ctx.photos)(\"gpxFiles\", ctx.gpxFiles);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"leafletOptions\", ctx.options)(\"leafletLayers\", ctx.markerLayer);\n      }\n    },\n    dependencies: [i3.LeafletDirective, i3.LeafletLayersDirective, i4.GalleryMapLightboxComponent],\n    styles: [\".leaflet-map[_ngcontent-%COMP%]{z-index:0;width:100%;height:100%}.clickable[_ngcontent-%COMP%]{cursor:pointer}.oi[_ngcontent-%COMP%]{font-size:59pt}#map[_ngcontent-%COMP%]{width:100%;height:100%;z-index:0}.overlay[_ngcontent-%COMP%]{width:100%;height:100%;background-color:transparent;opacity:.8;cursor:pointer;position:absolute;transform:translateY(-100%)}\"]\n  });\n  return GalleryMapComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}