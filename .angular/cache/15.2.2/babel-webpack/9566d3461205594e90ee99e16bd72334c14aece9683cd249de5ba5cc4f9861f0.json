{"ast":null,"code":"import { GalleryCacheService } from './cache.gallery.service';\nimport { Config } from '../../../../common/config/public/Config';\nimport { Person } from '../faces/Person';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./cache.gallery.service\";\nexport var ThumbnailLoadingPriority = /*#__PURE__*/(() => {\n  (function (ThumbnailLoadingPriority) {\n    ThumbnailLoadingPriority[ThumbnailLoadingPriority[\"extraHigh\"] = 4] = \"extraHigh\";\n    ThumbnailLoadingPriority[ThumbnailLoadingPriority[\"high\"] = 3] = \"high\";\n    ThumbnailLoadingPriority[ThumbnailLoadingPriority[\"medium\"] = 2] = \"medium\";\n    ThumbnailLoadingPriority[ThumbnailLoadingPriority[\"low\"] = 1] = \"low\";\n  })(ThumbnailLoadingPriority || (ThumbnailLoadingPriority = {}));\n  return ThumbnailLoadingPriority;\n})();\nexport let ThumbnailLoaderService = /*#__PURE__*/(() => {\n  class ThumbnailLoaderService {\n    constructor(galleryCacheService) {\n      this.galleryCacheService = galleryCacheService;\n      this.que = [];\n      this.runningRequests = 0;\n      this.run = () => {\n        if (this.que.length === 0 || this.runningRequests >= Config.Media.Thumbnail.concurrentThumbnailGenerations) {\n          return;\n        }\n        const task = this.getNextTask();\n        if (task === null) {\n          return;\n        }\n        this.runningRequests++;\n        task.taskEntities.forEach(te => te.listener.onStartedLoading());\n        task.inProgress = true;\n        const curImg = new Image();\n        curImg.onload = () => {\n          task.onLoaded();\n          task.taskEntities.forEach(te => te.listener.onLoad());\n          this.taskReady(task);\n          this.runningRequests--;\n          this.run();\n        };\n        curImg.onerror = error => {\n          task.taskEntities.forEach(te => te.listener.onError(error));\n          this.taskReady(task);\n          this.runningRequests--;\n          this.run();\n        };\n        curImg.src = task.path;\n      };\n    }\n    removeTask(taskEntry) {\n      const index = taskEntry.parentTask.taskEntities.indexOf(taskEntry);\n      if (index === -1) {\n        throw new Error('ThumbnailTaskEntity not exist on Task');\n      }\n      taskEntry.parentTask.taskEntities.splice(index, 1);\n      if (taskEntry.parentTask.taskEntities.length === 0 && taskEntry.parentTask.inProgress === false) {\n        const i = this.que.indexOf(taskEntry.parentTask);\n        if (i === -1) {\n          throw new Error('ThumbnailTask not exist');\n        }\n        this.que.splice(i, 1);\n      }\n    }\n    loadIcon(media, priority, listener) {\n      return this.load(media.getIconPath(), () => {\n        media.iconLoaded();\n        this.galleryCacheService.mediaUpdated(media.media);\n      }, priority, listener);\n    }\n    loadImage(media, priority, listener) {\n      return this.load(media.getThumbnailPath(), () => {\n        media.thumbnailLoaded();\n        this.galleryCacheService.mediaUpdated(media.media);\n      }, priority, listener);\n    }\n    loadPersonThumbnail(person, priority, listener) {\n      return this.load(Person.getThumbnailUrl(person), () => {\n        // no callback\n      }, priority, listener);\n    }\n    load(path, onLoaded, priority, listener) {\n      let thTask = null;\n      // is image already queued?\n      for (const item of this.que) {\n        if (item.path === path) {\n          thTask = item;\n          break;\n        }\n      }\n      if (thTask == null) {\n        thTask = {\n          inProgress: false,\n          taskEntities: [],\n          onLoaded,\n          path\n        };\n        this.que.push(thTask);\n      }\n      const thumbnailTaskEntity = {\n        priority,\n        listener,\n        parentTask: thTask\n      };\n      thTask.taskEntities.push(thumbnailTaskEntity);\n      if (thTask.inProgress === true) {\n        listener.onStartedLoading();\n      }\n      setTimeout(this.run, 0);\n      return thumbnailTaskEntity;\n    }\n    getNextTask() {\n      if (this.que.length === 0) {\n        return null;\n      }\n      let highestPriority = null;\n      let currentPriority = Number.MAX_SAFE_INTEGER;\n      for (const item1 of this.que) {\n        for (const item of item1.taskEntities) {\n          if (item1.inProgress === false) {\n            if (highestPriority == null || currentPriority < item.priority) {\n              highestPriority = item1;\n              currentPriority = item.priority;\n              if (currentPriority === ThumbnailLoadingPriority.extraHigh) {\n                return highestPriority;\n              }\n            }\n          }\n        }\n      }\n      return highestPriority;\n    }\n    taskReady(task) {\n      const i = this.que.indexOf(task);\n      if (i === -1) {\n        if (task.taskEntities.length !== 0) {\n          console.error('ThumbnailLoader: can\\'t find poolTask to remove');\n        }\n        return;\n      }\n      this.que.splice(i, 1);\n    }\n  }\n  ThumbnailLoaderService.ɵfac = function ThumbnailLoaderService_Factory(t) {\n    return new (t || ThumbnailLoaderService)(i0.ɵɵinject(i1.GalleryCacheService));\n  };\n  ThumbnailLoaderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ThumbnailLoaderService,\n    factory: ThumbnailLoaderService.ɵfac\n  });\n  return ThumbnailLoaderService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}