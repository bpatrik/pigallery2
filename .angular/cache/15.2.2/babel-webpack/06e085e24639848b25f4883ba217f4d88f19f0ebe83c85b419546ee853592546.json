{"ast":null,"code":"import { ShareService } from '../ui/gallery/share.service';\nimport { QueryParams } from '../../../common/QueryParams';\nimport { Utils } from '../../../common/Utils';\nimport { ContentService } from '../ui/gallery/content.service';\nimport { Config } from '../../../common/config/public/Config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../ui/gallery/share.service\";\nimport * as i2 from \"../ui/gallery/content.service\";\nexport let QueryService = /*#__PURE__*/(() => {\n  class QueryService {\n    constructor(shareService, galleryService) {\n      this.shareService = shareService;\n      this.galleryService = galleryService;\n    }\n    getMediaStringId(media) {\n      if (this.galleryService.isSearchResult()) {\n        return Utils.concatUrls(media.directory.path, media.directory.name, media.name);\n      } else {\n        return media.name;\n      }\n    }\n    getParams(media) {\n      const query = {};\n      if (media) {\n        query[QueryParams.gallery.photo] = this.getMediaStringId(media);\n      }\n      if (Config.Sharing.enabled === true) {\n        if (this.shareService.isSharing()) {\n          query[QueryParams.gallery.sharingKey_query] = this.shareService.getSharingKey();\n        }\n      }\n      return query;\n    }\n    getParamsForDirs(directory) {\n      const params = {};\n      if (Config.Sharing.enabled === true) {\n        if (this.shareService.isSharing()) {\n          params[QueryParams.gallery.sharingKey_query] = this.shareService.getSharingKey();\n        }\n      }\n      if (directory && directory.lastModified && directory.lastScanned && !directory.isPartial) {\n        params[QueryParams.gallery.knownLastModified] = directory.lastModified;\n        params[QueryParams.gallery.knownLastScanned] = directory.lastScanned;\n      }\n      return params;\n    }\n  }\n  QueryService.ɵfac = function QueryService_Factory(t) {\n    return new (t || QueryService)(i0.ɵɵinject(i1.ShareService), i0.ɵɵinject(i2.ContentService));\n  };\n  QueryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QueryService,\n    factory: QueryService.ɵfac\n  });\n  return QueryService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}