{"ast":null,"code":"import { Utils } from '../Utils';\nexport var UserRoles = /*#__PURE__*/(() => {\n  (function (UserRoles) {\n    UserRoles[UserRoles[\"LimitedGuest\"] = 1] = \"LimitedGuest\";\n    UserRoles[UserRoles[\"Guest\"] = 2] = \"Guest\";\n    UserRoles[UserRoles[\"User\"] = 3] = \"User\";\n    UserRoles[UserRoles[\"Admin\"] = 4] = \"Admin\";\n    UserRoles[UserRoles[\"Developer\"] = 5] = \"Developer\";\n  })(UserRoles || (UserRoles = {}));\n  return UserRoles;\n})();\nexport const UserDTOUtils = {\n  isDirectoryPathAvailable: (path, permissions) => {\n    if (permissions == null) {\n      return true;\n    }\n    permissions = permissions.map(p => Utils.canonizePath(p));\n    path = Utils.canonizePath(path);\n    if (permissions.length === 0 || permissions[0] === '/*') {\n      return true;\n    }\n    for (let permission of permissions) {\n      if (permission === '/*') {\n        return true;\n      }\n      if (permission[permission.length - 1] === '*') {\n        permission = permission.slice(0, -1);\n        if (path.startsWith(permission) && (!path[permission.length] || path[permission.length] === '/')) {\n          return true;\n        }\n      } else if (path === permission) {\n        return true;\n      } else if (path === '.' && permission === '/') {\n        return true;\n      }\n    }\n    return false;\n  },\n  isDirectoryAvailable: (directory, permissions) => {\n    return UserDTOUtils.isDirectoryPathAvailable(Utils.concatUrls(directory.path, directory.name), permissions);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}