{"ast":null,"code":"import { Event } from '../../../../common/event/Event';\nimport { PageHelper } from '../../model/page.helper';\nimport * as i0 from \"@angular/core\";\nexport let OverlayService = /*#__PURE__*/(() => {\n  class OverlayService {\n    constructor() {\n      this.OnOverlayChange = new Event();\n      this.scrollWidth = null;\n    }\n    showOverlay() {\n      // disable scrolling\n      PageHelper.hideScrollY();\n      this.OnOverlayChange.trigger(true);\n    }\n    hideOverlay() {\n      PageHelper.showScrollY();\n      this.OnOverlayChange.trigger(false);\n    }\n    getScrollbarWidth() {\n      if (this.scrollWidth == null) {\n        const outer = document.createElement('div');\n        outer.style.visibility = 'hidden';\n        outer.style.width = '100px';\n        outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n        document.body.appendChild(outer);\n        const widthNoScroll = outer.offsetWidth;\n        // force scrollbars\n        outer.style.overflowY = 'scroll';\n        // add innerdiv\n        const inner = document.createElement('div');\n        inner.style.width = '100%';\n        outer.appendChild(inner);\n        const widthWithScroll = inner.offsetWidth;\n        // remove divs\n        outer.parentNode.removeChild(outer);\n        this.scrollWidth = widthNoScroll - widthWithScroll;\n      }\n      return this.scrollWidth;\n    }\n    getPhantomScrollbarWidth() {\n      if (!PageHelper.isScrollYVisible()) {\n        return this.getScrollbarWidth();\n      }\n      return 0;\n    }\n  }\n  OverlayService.ɵfac = function OverlayService_Factory(t) {\n    return new (t || OverlayService)();\n  };\n  OverlayService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OverlayService,\n    factory: OverlayService.ɵfac\n  });\n  return OverlayService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}