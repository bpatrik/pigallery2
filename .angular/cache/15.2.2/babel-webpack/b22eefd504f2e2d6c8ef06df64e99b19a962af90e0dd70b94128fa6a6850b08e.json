{"ast":null,"code":"import { Utils } from '../../../../common/Utils';\nimport { Config } from '../../../../common/config/public/Config';\nexport class MediaIcon {\n  constructor(media) {\n    this.media = media;\n    this.replacementSizeCache = false;\n  }\n  getExtension() {\n    return this.media.name.substr(this.media.name.lastIndexOf('.') + 1);\n  }\n  iconLoaded() {\n    this.media.missingThumbnails -= MediaIcon.ThumbnailMap[Config.Media.Thumbnail.iconSize];\n  }\n  isIconAvailable() {\n    // eslint-disable-next-line no-bitwise\n    return (this.media.missingThumbnails & MediaIcon.ThumbnailMap[Config.Media.Thumbnail.iconSize]) === 0;\n  }\n  getReadableRelativePath() {\n    return Utils.concatUrls(this.media.directory.path, this.media.directory.name, this.media.name);\n  }\n  getRelativePath() {\n    return encodeURI(this.getReadableRelativePath())\n    // do not escape all urls with encodeURIComponent because that make the URL ugly and not needed\n    // do not escape before concatUrls as that would make prevent optimizations\n    // .replace(new RegExp('%', 'g'), '%25') // order important\n    .replace(new RegExp('#', 'g'), '%23').replace(new RegExp('\\\\$', 'g'), '%24').replace(new RegExp('\\\\?', 'g'), '%3F');\n  }\n  getIconPath() {\n    return Utils.concatUrls(Config.Server.urlBase, Config.Server.apiPath, '/gallery/content/', this.getRelativePath(), 'icon');\n  }\n  getMediaPath() {\n    return Utils.concatUrls(Config.Server.urlBase, Config.Server.apiPath, '/gallery/content/', this.getRelativePath());\n  }\n  getBestFitMediaPath() {\n    return Utils.concatUrls(this.getMediaPath(), '/bestFit');\n  }\n  equals(other) {\n    // is gridphoto\n    if (other instanceof MediaIcon) {\n      return this.media.directory.path === other.media.directory.path && this.media.directory.name === other.media.directory.name && this.media.name === other.media.name;\n    }\n    // is media\n    if (other.directory) {\n      return this.media.directory.path === other.directory.path && this.media.directory.name === other.directory.name && this.media.name === other.name;\n    }\n    return false;\n  }\n}\nMediaIcon.ThumbnailMap = Config.Media.Thumbnail.generateThumbnailMap();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}