{"ast":null,"code":"import { Utils } from '../Utils';\nimport { MediaDTOUtils } from './MediaDTO';\nexport class ContentWrapper {\n  constructor(directory = null, searchResult = null, notModified) {\n    if (directory) {\n      this.directory = directory;\n    }\n    if (searchResult) {\n      this.searchResult = searchResult;\n    }\n    if (notModified) {\n      this.notModified = notModified;\n    }\n  }\n  static mapify(cw, media, isSearchResult) {\n    if (isSearchResult) {\n      const k = JSON.stringify(media.directory);\n      if (!cw.reverseMap.directories.has(k)) {\n        cw.reverseMap.directories.set(k, cw.map.directories.length);\n        cw.map.directories.push(media.directory);\n      }\n      // @ts-ignore\n      media.d = cw.reverseMap.directories.get(k);\n      delete media.directory;\n    }\n    // @ts-ignore\n    media['n'] = media.name;\n    delete media.name;\n    if (typeof media.missingThumbnails !== 'undefined') {\n      // @ts-ignore\n      media['t'] = media.missingThumbnails;\n      delete media.missingThumbnails;\n    }\n    if (media.metadata) {\n      // @ts-ignore\n      media.metadata['d'] = [media.metadata.size.width, media.metadata.size.height];\n      delete media.metadata.size;\n      // @ts-ignore\n      media.metadata['s'] = media.metadata.fileSize;\n      delete media.metadata.fileSize;\n      // @ts-ignore\n      media.metadata['t'] = media.metadata.creationDate / 1000; // skip millies\n      delete media.metadata.creationDate;\n      if (media.metadata.rating) {\n        // @ts-ignore\n        media.metadata['r'] = media.metadata.rating;\n        delete media.metadata.rating;\n      }\n      if (media.metadata.caption) {\n        // @ts-ignore\n        media.metadata['a'] = media.metadata.caption;\n        delete media.metadata.caption;\n      }\n      if (media.metadata.faces) {\n        for (let i = 0; i < media.metadata.faces.length; ++i) {\n          const name = media.metadata.faces[i].name;\n          if (!cw.reverseMap.faces.has(name)) {\n            cw.reverseMap.faces.set(name, cw.map.faces.length);\n            cw.map.faces.push(name);\n          }\n          // @ts-ignore\n          media.metadata.faces[i] = [...media.metadata.faces[i].b, cw.reverseMap.faces.get(name)];\n        }\n        // @ts-ignore\n        media.metadata['f'] = media.metadata.faces;\n        delete media.metadata.faces;\n      }\n      if (media.metadata.keywords) {\n        for (let i = 0; i < media.metadata.keywords.length; ++i) {\n          const k = media.metadata.keywords[i];\n          if (!cw.reverseMap.keywords.has(k)) {\n            cw.reverseMap.keywords.set(k, cw.map.keywords.length);\n            cw.map.keywords.push(k);\n          }\n          // @ts-ignore\n          media.metadata.keywords[i] = cw.reverseMap.keywords.get(k);\n        }\n        // @ts-ignore\n        media.metadata['k'] = media.metadata.keywords;\n        delete media.metadata.keywords;\n      }\n      const mapifyOne = (map, reverseMap, obj, key, mappedKey) => {\n        // @ts-ignore\n        const k = obj[key];\n        if (!reverseMap.has(k)) {\n          reverseMap.set(k, map.length);\n          map.push(k);\n        }\n        // @ts-ignore\n        obj[mappedKey] = reverseMap.get(k);\n        delete obj[key];\n      };\n      if (media.metadata.cameraData) {\n        if (media.metadata.cameraData.lens) {\n          mapifyOne(cw.map.lens, cw.reverseMap.lens, media.metadata.cameraData, 'lens', 'l');\n        }\n        if (media.metadata.cameraData.make) {\n          mapifyOne(cw.map.camera, cw.reverseMap.camera, media.metadata.cameraData, 'make', 'm');\n        }\n        if (media.metadata.cameraData.model) {\n          mapifyOne(cw.map.camera, cw.reverseMap.camera, media.metadata.cameraData, 'model', 'o');\n        }\n        if (media.metadata.cameraData.ISO) {\n          // @ts-ignore\n          media.metadata.cameraData['i'] = media.metadata.cameraData.ISO;\n          delete media.metadata.cameraData.ISO;\n        }\n        if (media.metadata.cameraData.fStop) {\n          // @ts-ignore\n          media.metadata.cameraData['s'] = media.metadata.cameraData.fStop;\n          delete media.metadata.cameraData.fStop;\n        }\n        if (media.metadata.cameraData.exposure) {\n          // @ts-ignore\n          media.metadata.cameraData['e'] = media.metadata.cameraData.exposure;\n          delete media.metadata.cameraData.exposure;\n        }\n        if (media.metadata.cameraData.focalLength) {\n          // @ts-ignore\n          media.metadata.cameraData['a'] = media.metadata.cameraData.focalLength;\n          delete media.metadata.cameraData.focalLength;\n        }\n        // @ts-ignore\n        media.metadata['c'] = media.metadata.cameraData;\n        delete media.metadata.cameraData;\n      }\n      if (media.metadata.positionData) {\n        if (media.metadata.positionData.country) {\n          mapifyOne(cw.map.keywords, cw.reverseMap.keywords, media.metadata.positionData, 'country', 'c');\n        }\n        if (media.metadata.positionData.city) {\n          mapifyOne(cw.map.keywords, cw.reverseMap.keywords, media.metadata.positionData, 'city', 'cy');\n        }\n        if (media.metadata.positionData.state) {\n          mapifyOne(cw.map.keywords, cw.reverseMap.keywords, media.metadata.positionData, 'state', 's');\n        }\n        if (media.metadata.positionData.GPSData) {\n          // @ts-ignore\n          media.metadata.positionData['g'] = [media.metadata.positionData.GPSData.latitude, media.metadata.positionData.GPSData.longitude];\n          delete media.metadata.positionData.GPSData;\n        }\n        // @ts-ignore\n        media.metadata['p'] = media.metadata.positionData;\n        delete media.metadata.positionData;\n      }\n      // @ts-ignore\n      media['m'] = media.metadata;\n      delete media.metadata;\n    }\n  }\n  static packMedia(cw, media, isSearchResult) {\n    // clean up media\n    for (let i = 0; i < media.length; ++i) {\n      const m = media[i];\n      delete m.id;\n      if (m.directory) {\n        if (isSearchResult) {\n          // keep the directory for search result\n          delete m.directory.id;\n        } else {\n          // for gallery listing, photos belong to one directory,\n          // this can be deleted as the directory know its child\n          delete m.directory;\n        }\n      }\n      if (MediaDTOUtils.isPhoto(m)) {\n        delete m.metadata.bitRate;\n        delete m.metadata.duration;\n        // compress faces\n        if (m.metadata.faces) {\n          for (let j = 0; j < m.metadata.faces.length; ++j) {\n            const f = m.metadata.faces[j];\n            // @ts-ignore\n            f['b'] = [f.box.top, f.box.left, f.box.height, f.box.width];\n            delete f.box;\n          }\n        }\n        ContentWrapper.mapify(cw, m, isSearchResult);\n      } else if (MediaDTOUtils.isVideo(m)) {\n        delete m.metadata.rating;\n        delete m.metadata.caption;\n        delete m.metadata.cameraData;\n        delete m.metadata.keywords;\n        delete m.metadata.faces;\n        delete m.metadata.positionData;\n        ContentWrapper.mapify(cw, m, isSearchResult);\n      }\n      Utils.removeNullOrEmptyObj(m);\n    }\n  }\n  static packDirectory(cw, dir, isSearchResult = false) {\n    if (dir.preview) {\n      dir.preview.directory = {\n        path: dir.preview.directory.path,\n        name: dir.preview.directory.name\n      };\n      // make sure that it is not a same object as one of the photo in the media[]\n      // as the next foreach would remove the directory\n      dir.preview = Utils.clone(dir.preview);\n    }\n    if (dir.media) {\n      ContentWrapper.packMedia(cw, dir.media, isSearchResult);\n    }\n    if (dir.metaFile) {\n      for (let i = 0; i < dir.metaFile.length; ++i) {\n        if (isSearchResult) {\n          delete dir.metaFile[i].directory.id;\n        } else {\n          delete dir.metaFile[i].directory;\n        }\n        delete dir.metaFile[i].id;\n        ContentWrapper.mapify(cw, dir.metaFile[i], isSearchResult);\n      }\n    }\n    if (dir.directories) {\n      for (let i = 0; i < dir.directories.length; ++i) {\n        ContentWrapper.packDirectory(cw, dir.directories[i]);\n        delete dir.directories[i].parent;\n      }\n    }\n    delete dir.validPreview; // should not go to the client side;\n  }\n\n  static deMapify(cw, media, isSearchResult) {\n    const deMapifyOne = (map, obj, key, mappedKey) => {\n      // @ts-ignore\n      obj[key] = map[obj[mappedKey]];\n      // @ts-ignore\n      delete obj[mappedKey];\n    };\n    if (isSearchResult) {\n      deMapifyOne(cw.map.directories, media, 'directory', 'd');\n    }\n    // @ts-ignore\n    if (media['n']) {\n      // @ts-ignore\n      media.name = media['n'];\n      // @ts-ignore\n      delete media['n'];\n    }\n    // @ts-ignore\n    if (media['t']) {\n      // @ts-ignore\n      media.missingThumbnails = media['t'];\n      // @ts-ignore\n      delete media['t'];\n    }\n    // @ts-ignore\n    if (media['m']) {\n      // @ts-ignore\n      media.metadata = media['m'];\n      // @ts-ignore\n      delete media['m'];\n      media.metadata.size = {\n        // @ts-ignore\n        width: media.metadata['d'][0],\n        // @ts-ignore\n        height: media.metadata['d'][1]\n      };\n      // @ts-ignore\n      delete media.metadata['d'];\n      // @ts-ignore\n      if (typeof media.metadata['t'] !== 'undefined') {\n        // @ts-ignore\n        media.metadata.creationDate = media.metadata['t'] * 1000;\n        // @ts-ignore\n        delete media.metadata['t'];\n      }\n      // @ts-ignore\n      if (typeof media.metadata['r'] !== 'undefined') {\n        // @ts-ignore\n        media.metadata.rating = media.metadata['r'];\n        // @ts-ignore\n        delete media.metadata['r'];\n      }\n      // @ts-ignore\n      if (typeof media.metadata['a'] !== 'undefined') {\n        // @ts-ignore\n        media.metadata.caption = media.metadata['a'];\n        // @ts-ignore\n        delete media.metadata['a'];\n      }\n      // @ts-ignore\n      media.metadata.fileSize = media.metadata['s'];\n      // @ts-ignore\n      delete media.metadata['s'];\n      // @ts-ignore\n      if (media.metadata['f']) {\n        // @ts-ignore\n        media.metadata.faces = media.metadata['f'];\n        // @ts-ignore\n        delete media.metadata['f'];\n        for (let j = 0; j < media.metadata.faces.length; ++j) {\n          // @ts-ignore\n          const boxArr = media.metadata.faces[j];\n          media.metadata.faces[j] = {\n            box: {\n              top: boxArr[0],\n              left: boxArr[1],\n              height: boxArr[2],\n              width: boxArr[3]\n            },\n            // @ts-ignore\n            name: boxArr[4]\n          };\n        }\n        for (let i = 0; i < media.metadata.faces.length; ++i) {\n          // @ts-ignore\n          media.metadata.faces[i].name = cw.map.faces[media.metadata.faces[i].name];\n        }\n      }\n      // @ts-ignore\n      if (media.metadata['k']) {\n        // @ts-ignore\n        media.metadata.keywords = media.metadata['k'];\n        // @ts-ignore\n        delete media.metadata['k'];\n        for (let i = 0; i < media.metadata.keywords.length; ++i) {\n          // @ts-ignore\n          media.metadata.keywords[i] = cw.map.keywords[media.metadata.keywords[i]];\n        }\n      }\n      // @ts-ignore\n      if (media.metadata['c']) {\n        // @ts-ignore\n        media.metadata.cameraData = media.metadata.c;\n        // @ts-ignore\n        delete media.metadata.c;\n        // @ts-ignore\n        if (typeof media.metadata.cameraData.l !== 'undefined') {\n          deMapifyOne(cw.map.lens, media.metadata.cameraData, 'lens', 'l');\n        }\n        // @ts-ignore\n        if (typeof media.metadata.cameraData.m !== 'undefined') {\n          deMapifyOne(cw.map.camera, media.metadata.cameraData, 'make', 'm');\n        }\n        // @ts-ignore\n        if (typeof media.metadata.cameraData['o'] !== 'undefined') {\n          deMapifyOne(cw.map.camera, media.metadata.cameraData, 'model', 'o');\n        }\n        // @ts-ignore\n        if (typeof media.metadata.cameraData['i'] !== 'undefined') {\n          // @ts-ignore\n          media.metadata.cameraData.ISO = media.metadata.cameraData['i'];\n          // @ts-ignore\n          delete media.metadata.cameraData['i'];\n        }\n        // @ts-ignore\n        if (typeof media.metadata.cameraData['a'] !== 'undefined') {\n          // @ts-ignore\n          media.metadata.cameraData.focalLength = media.metadata.cameraData['a'];\n          // @ts-ignore\n          delete media.metadata.cameraData['a'];\n        }\n        // @ts-ignore\n        if (typeof media.metadata.cameraData['e'] !== 'undefined') {\n          // @ts-ignore\n          media.metadata.cameraData.exposure = media.metadata.cameraData['e'];\n          // @ts-ignore\n          delete media.metadata.cameraData['e'];\n        }\n        // @ts-ignore\n        if (typeof media.metadata.cameraData['s'] !== 'undefined') {\n          // @ts-ignore\n          media.metadata.cameraData.fStop = media.metadata.cameraData['s'];\n          // @ts-ignore\n          delete media.metadata.cameraData['s'];\n        }\n      }\n      // @ts-ignore\n      if (media.metadata['p']) {\n        // @ts-ignore\n        media.metadata.positionData = media.metadata.p;\n        // @ts-ignore\n        delete media.metadata.p;\n        // @ts-ignore\n        if (typeof media.metadata.positionData.c !== 'undefined') {\n          deMapifyOne(cw.map.keywords, media.metadata.positionData, 'country', 'c');\n        }\n        // @ts-ignore\n        if (typeof media.metadata.positionData.cy !== 'undefined') {\n          deMapifyOne(cw.map.keywords, media.metadata.positionData, 'city', 'cy');\n        }\n        // @ts-ignore\n        if (typeof media.metadata.positionData.s !== 'undefined') {\n          deMapifyOne(cw.map.keywords, media.metadata.positionData, 'state', 's');\n        }\n        // @ts-ignore\n        if (media.metadata.positionData['g']) {\n          media.metadata.positionData.GPSData = {\n            // @ts-ignore\n            latitude: media.metadata.positionData['g'][0],\n            // @ts-ignore\n            longitude: media.metadata.positionData['g'][1]\n          };\n          // @ts-ignore\n          delete media.metadata.positionData['g'];\n        }\n      }\n    }\n  }\n  static unPackMedia(cw, dir, media, isSearchResult) {\n    // clean up media\n    for (let i = 0; i < media.length; ++i) {\n      const m = media[i];\n      ContentWrapper.deMapify(cw, m, isSearchResult);\n      if (!isSearchResult) {\n        m.directory = dir;\n      }\n    }\n  }\n  static unPackDirectory(cw, dir, isSearchResult = false) {\n    if (dir.media) {\n      ContentWrapper.unPackMedia(cw, dir, dir.media, isSearchResult);\n    }\n    if (dir.metaFile) {\n      for (let i = 0; i < dir.metaFile.length; ++i) {\n        if (!isSearchResult) {\n          dir.metaFile[i].directory = dir;\n        }\n        ContentWrapper.deMapify(cw, dir.metaFile[i], isSearchResult);\n      }\n    }\n    if (dir.directories) {\n      for (let i = 0; i < dir.directories.length; ++i) {\n        ContentWrapper.unPackDirectory(cw, dir.directories[i]);\n        if (!isSearchResult) {\n          dir.directories[i].parent = dir;\n        }\n      }\n    }\n  }\n  static pack(cw) {\n    // init CW for packing\n    cw.map = {\n      faces: [],\n      keywords: [],\n      lens: [],\n      camera: [],\n      directories: []\n    };\n    cw.reverseMap = {\n      faces: new Map(),\n      keywords: new Map(),\n      lens: new Map(),\n      camera: new Map(),\n      directories: new Map()\n    };\n    if (cw.directory) {\n      ContentWrapper.packDirectory(cw, cw.directory);\n    } else if (cw.searchResult) {\n      ContentWrapper.packDirectory(cw, cw.searchResult, true);\n    }\n    // remove empty maps\n    for (const k in cw.map) {\n      // @ts-ignore\n      if (cw.map[k].length === 0) {\n        // @ts-ignore\n        delete cw.map[k];\n      }\n    }\n    delete cw.reverseMap;\n    return cw;\n  }\n  static unpack(cw) {\n    if (!cw || cw.notModified) {\n      return cw;\n    }\n    if (cw.directory) {\n      ContentWrapper.unPackDirectory(cw, cw.directory);\n    } else if (cw.searchResult) {\n      ContentWrapper.unPackDirectory(cw, cw.searchResult, true);\n    }\n    delete cw.map;\n    return cw;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}